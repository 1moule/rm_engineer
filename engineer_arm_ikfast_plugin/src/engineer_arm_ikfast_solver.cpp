/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-07-18 08:06:48.659566
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h"  // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                               \
  {                                                                                                                    \
    if (!(b))                                                                                                          \
    {                                                                                                                  \
      std::stringstream ss;                                                                                            \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '"      \
         << #b << "' failed";                                                                                          \
      throw std::runtime_error(ss.str());                                                                              \
    }                                                                                                                  \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif  // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_(const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_(const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_(const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char* trans, const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b,
             const int* ldb, int* info);
void dgeev_(const char* jobvl, const char* jobvr, const int* n, double* a, const int* lda, double* wr, double* wi,
            double* vl, const int* ldvl, double* vr, const int* ldvr, double* work, const int* lwork, int* info);
}

using namespace std;  // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
  return fabsf(f);
}
inline double IKabs(double f)
{
  return fabs(f);
}

inline float IKsqr(float f)
{
  return f * f;
}
inline double IKsqr(double f)
{
  return f * f;
}

inline float IKlog(float f)
{
  return logf(f);
}
inline double IKlog(double f)
{
  return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif

inline float IKasin(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f)
{
  return sinf(f);
}
inline double IKsin(double f)
{
  return sin(f);
}
inline float IKcos(float f)
{
  return cosf(f);
}
inline double IKcos(double f)
{
  return cos(f);
}
inline float IKtan(float f)
{
  return tanf(f);
}
inline double IKtan(double f)
{
  return tan(f);
}
inline float IKsqrt(float f)
{
  if (f <= 0.0f)
    return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f)
{
  if (f <= 0.0)
    return 0.0;
  return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
  return atan2f(fy, fx);
}
inline float IKatan2(float fy, float fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2Simple(double fy, double fx)
{
  return atan2(fy, fx);
}
inline double IKatan2(double fy, double fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return IKPI_2;
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2(fy, fx);
}

template <typename T>
struct CheckValue
{
  T value;
  bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
  CheckValue<T> ret;
  ret.valid = false;
  ret.value = 0;
  if (!isnan(fy) && !isnan(fx))
  {
    if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH)
    {
      ret.value = IKatan2Simple(fy, fx);
      ret.valid = true;
    }
  }
  return ret;
}

inline float IKsign(float f)
{
  if (f > 0)
  {
    return float(1);
  }
  else if (f < 0)
  {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f)
{
  if (f > 0)
  {
    return 1.0;
  }
  else if (f < 0)
  {
    return -1.0;
  }
  return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
  CheckValue<T> ret;
  ret.valid = true;
  if (n == 0)
  {
    ret.value = 1.0;
    return ret;
  }
  else if (n == 1)
  {
    ret.value = f;
    return ret;
  }
  else if (n < 0)
  {
    if (f == 0)
    {
      ret.valid = false;
      ret.value = (T)1.0e30;
      return ret;
    }
    if (n == -1)
    {
      ret.value = T(1.0) / f;
      return ret;
    }
  }

  int num = n > 0 ? n : -n;
  if (num == 2)
  {
    ret.value = f * f;
  }
  else if (num == 3)
  {
    ret.value = f * f * f;
  }
  else
  {
    ret.value = 1.0;
    while (num > 0)
    {
      if (num & 1)
      {
        ret.value *= f;
      }
      num >>= 1;
      f *= f;
    }
  }

  if (n < 0)
  {
    ret.value = T(1.0) / ret.value;
  }
  return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10;
  x0 = IKcos(j[6]);
  x1 = IKsin(j[4]);
  x2 = IKsin(j[5]);
  x3 = IKcos(j[4]);
  x4 = IKsin(j[6]);
  x5 = IKcos(j[5]);
  x6 = (x2 * x3);
  x7 = (x1 * x4);
  x8 = (x0 * x1);
  x9 = (x1 * x5);
  x10 = (x3 * x5);
  eerot[0] = (((x0 * x3)) + ((x2 * x7)));
  eerot[1] = (((x2 * x8)) + (((-1.0) * x3 * x4)));
  eerot[2] = x9;
  eetrans[0] = ((-0.124) + (((0.253) * x9)) + j[2] + j[1]);
  eerot[3] = (x4 * x5);
  eerot[4] = (x0 * x5);
  eerot[5] = ((-1.0) * x2);
  eetrans[1] = ((((-0.253) * x2)) + j[3]);
  eerot[6] = ((((-1.0) * x8)) + ((x4 * x6)));
  eerot[7] = (((x0 * x6)) + x7);
  eerot[8] = x10;
  eetrans[2] = ((0.4382) + (((0.253) * x10)) + j[0]);
}

IKFAST_API int GetNumFreeParameters()
{
  return 1;
}
IKFAST_API int* GetFreeParameters()
{
  static int freeparams[] = { 2 };
  return freeparams;
}
IKFAST_API int GetNumJoints()
{
  return 7;
}

IKFAST_API int GetIkRealSize()
{
  return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
  return 0x67000001;
}

class IKSolver
{
public:
  IkReal j2, cj2, sj2, htj2, j2mul, j3, cj3, sj3, htj3, j3mul, j5, cj5, sj5, htj5, j5mul, j8, cj8, sj8, htj8, j8mul, j9,
      cj9, sj9, htj9, j9mul, j10, cj10, sj10, htj10, j10mul, j4, cj4, sj4, htj4, new_r00, r00, rxp0_0, new_r01, r01,
      rxp0_1, new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20,
      rxp2_0, new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
  unsigned char _ij2[2], _nj2, _ij3[2], _nj3, _ij5[2], _nj5, _ij8[2], _nj8, _ij9[2], _nj9, _ij10[2], _nj10, _ij4[2],
      _nj4;

  IkReal j100, cj100, sj100;
  unsigned char _ij100[2], _nj100;
  bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
  {
    j2 = numeric_limits<IkReal>::quiet_NaN();
    _ij2[0] = -1;
    _ij2[1] = -1;
    _nj2 = -1;
    j3 = numeric_limits<IkReal>::quiet_NaN();
    _ij3[0] = -1;
    _ij3[1] = -1;
    _nj3 = -1;
    j5 = numeric_limits<IkReal>::quiet_NaN();
    _ij5[0] = -1;
    _ij5[1] = -1;
    _nj5 = -1;
    j8 = numeric_limits<IkReal>::quiet_NaN();
    _ij8[0] = -1;
    _ij8[1] = -1;
    _nj8 = -1;
    j9 = numeric_limits<IkReal>::quiet_NaN();
    _ij9[0] = -1;
    _ij9[1] = -1;
    _nj9 = -1;
    j10 = numeric_limits<IkReal>::quiet_NaN();
    _ij10[0] = -1;
    _ij10[1] = -1;
    _nj10 = -1;
    _ij4[0] = -1;
    _ij4[1] = -1;
    _nj4 = 0;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
    {
      solutions.Clear();
      j4 = pfree[0];
      cj4 = cos(pfree[0]);
      sj4 = sin(pfree[0]), htj4 = tan(pfree[0] * 0.5);
      r00 = eerot[0 * 3 + 0];
      r01 = eerot[0 * 3 + 1];
      r02 = eerot[0 * 3 + 2];
      r10 = eerot[1 * 3 + 0];
      r11 = eerot[1 * 3 + 1];
      r12 = eerot[1 * 3 + 2];
      r20 = eerot[2 * 3 + 0];
      r21 = eerot[2 * 3 + 1];
      r22 = eerot[2 * 3 + 2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_px = ((0.014) + (((-0.253) * r02)) + px);
      new_r10 = r10;
      new_r11 = r11;
      new_r12 = r12;
      new_py = ((((-0.253) * r12)) + py);
      new_r20 = r20;
      new_r21 = r21;
      new_r22 = r22;
      new_pz = ((-0.2872) + (((-0.253) * r22)) + pz);
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      r10 = new_r10;
      r11 = new_r11;
      r12 = new_r12;
      r20 = new_r20;
      r21 = new_r21;
      r22 = new_r22;
      px = new_px;
      py = new_py;
      pz = new_pz;
      IkReal x11 = ((1.0) * px);
      IkReal x12 = ((1.0) * pz);
      IkReal x13 = ((1.0) * py);
      pp = ((px * px) + (py * py) + (pz * pz));
      npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
      npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
      npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
      rxp0_0 = ((((-1.0) * r20 * x13)) + ((pz * r10)));
      rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x12)));
      rxp0_2 = (((py * r00)) + (((-1.0) * r10 * x11)));
      rxp1_0 = ((((-1.0) * r21 * x13)) + ((pz * r11)));
      rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x12)));
      rxp1_2 = ((((-1.0) * r11 * x11)) + ((py * r01)));
      rxp2_0 = ((((-1.0) * r22 * x13)) + ((pz * r12)));
      rxp2_1 = (((px * r22)) + (((-1.0) * r02 * x12)));
      rxp2_2 = (((py * r02)) + (((-1.0) * r12 * x11)));
      {
        IkReal j5array[1], cj5array[1], sj5array[1];
        bool j5valid[1] = { false };
        _nj5 = 1;
        j5array[0] = py;
        sj5array[0] = IKsin(j5array[0]);
        cj5array[0] = IKcos(j5array[0]);
        j5valid[0] = true;
        for (int ij5 = 0; ij5 < 1; ++ij5)
        {
          if (!j5valid[ij5])
          {
            continue;
          }
          _ij5[0] = ij5;
          _ij5[1] = -1;
          for (int iij5 = ij5 + 1; iij5 < 1; ++iij5)
          {
            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
            {
              j5valid[iij5] = false;
              _ij5[1] = iij5;
              break;
            }
          }
          j5 = j5array[ij5];
          cj5 = cj5array[ij5];
          sj5 = sj5array[ij5];

          {
            IkReal j2array[1], cj2array[1], sj2array[1];
            bool j2valid[1] = { false };
            _nj2 = 1;
            j2array[0] = ((-0.151) + pz);
            sj2array[0] = IKsin(j2array[0]);
            cj2array[0] = IKcos(j2array[0]);
            j2valid[0] = true;
            for (int ij2 = 0; ij2 < 1; ++ij2)
            {
              if (!j2valid[ij2])
              {
                continue;
              }
              _ij2[0] = ij2;
              _ij2[1] = -1;
              for (int iij2 = ij2 + 1; iij2 < 1; ++iij2)
              {
                if (j2valid[iij2] && IKabs(cj2array[ij2] - cj2array[iij2]) < IKFAST_SOLUTION_THRESH &&
                    IKabs(sj2array[ij2] - sj2array[iij2]) < IKFAST_SOLUTION_THRESH)
                {
                  j2valid[iij2] = false;
                  _ij2[1] = iij2;
                  break;
                }
              }
              j2 = j2array[ij2];
              cj2 = cj2array[ij2];
              sj2 = sj2array[ij2];

              {
                IkReal j3array[1], cj3array[1], sj3array[1];
                bool j3valid[1] = { false };
                _nj3 = 1;
                j3array[0] = ((0.11) + px + (((-1.0) * j4)));
                sj3array[0] = IKsin(j3array[0]);
                cj3array[0] = IKcos(j3array[0]);
                j3valid[0] = true;
                for (int ij3 = 0; ij3 < 1; ++ij3)
                {
                  if (!j3valid[ij3])
                  {
                    continue;
                  }
                  _ij3[0] = ij3;
                  _ij3[1] = -1;
                  for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
                  {
                    if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
                    {
                      j3valid[iij3] = false;
                      _ij3[1] = iij3;
                      break;
                    }
                  }
                  j3 = j3array[ij3];
                  cj3 = cj3array[ij3];
                  sj3 = sj3array[ij3];

                  rotationfunction0(solutions);
                }
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions)
  {
    for (int rotationiter = 0; rotationiter < 1; ++rotationiter)
    {
      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_r10 = ((-1.0) * r20);
      new_r11 = ((-1.0) * r21);
      new_r12 = ((-1.0) * r22);
      new_r20 = r10;
      new_r21 = r11;
      new_r22 = r12;
      {
        IkReal j9array[2], cj9array[2], sj9array[2];
        bool j9valid[2] = { false };
        _nj9 = 2;
        sj9array[0] = ((-1.0) * new_r22);
        if (sj9array[0] >= -1 - IKFAST_SINCOS_THRESH && sj9array[0] <= 1 + IKFAST_SINCOS_THRESH)
        {
          j9valid[0] = j9valid[1] = true;
          j9array[0] = IKasin(sj9array[0]);
          cj9array[0] = IKcos(j9array[0]);
          sj9array[1] = sj9array[0];
          j9array[1] = j9array[0] > 0 ? (IKPI - j9array[0]) : (-IKPI - j9array[0]);
          cj9array[1] = -cj9array[0];
        }
        else if (isnan(sj9array[0]))
        {
          // probably any value will work
          j9valid[0] = true;
          cj9array[0] = 1;
          sj9array[0] = 0;
          j9array[0] = 0;
        }
        for (int ij9 = 0; ij9 < 2; ++ij9)
        {
          if (!j9valid[ij9])
          {
            continue;
          }
          _ij9[0] = ij9;
          _ij9[1] = -1;
          for (int iij9 = ij9 + 1; iij9 < 2; ++iij9)
          {
            if (j9valid[iij9] && IKabs(cj9array[ij9] - cj9array[iij9]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj9array[ij9] - sj9array[iij9]) < IKFAST_SOLUTION_THRESH)
            {
              j9valid[iij9] = false;
              _ij9[1] = iij9;
              break;
            }
          }
          j9 = j9array[ij9];
          cj9 = cj9array[ij9];
          sj9 = sj9array[ij9];

          {
            IkReal j10eval[3];
            j10eval[0] = cj9;
            j10eval[1] = IKsign(cj9);
            j10eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
            if (IKabs(j10eval[0]) < 0.0000010000000000 || IKabs(j10eval[1]) < 0.0000010000000000 ||
                IKabs(j10eval[2]) < 0.0000010000000000)
            {
              {
                IkReal j8eval[3];
                j8eval[0] = cj9;
                j8eval[1] = IKsign(cj9);
                j8eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                if (IKabs(j8eval[0]) < 0.0000010000000000 || IKabs(j8eval[1]) < 0.0000010000000000 ||
                    IKabs(j8eval[2]) < 0.0000010000000000)
                {
                  {
                    IkReal j8eval[2];
                    j8eval[0] = cj9;
                    j8eval[1] = new_r02;
                    if (IKabs(j8eval[0]) < 0.0000010000000000 || IKabs(j8eval[1]) < 0.0000010000000000)
                    {
                      {
                        IkReal evalcond[5];
                        bool bgotonextstatement = true;
                        do
                        {
                          evalcond[0] =
                              ((-3.14159265358979) +
                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j9)))), 6.28318530717959)));
                          evalcond[1] = new_r12;
                          evalcond[2] = new_r02;
                          evalcond[3] = new_r20;
                          evalcond[4] = new_r21;
                          if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                              IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                              IKabs(evalcond[4]) < 0.0000050000000000)
                          {
                            bgotonextstatement = false;
                            IkReal j10mul = 1;
                            j10 = 0;
                            j8mul = 1.0;
                            if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j8 = IKatan2(new_r01, ((-1.0) * new_r11));
                            {
                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                              vinfos[0].jointtype = 17;
                              vinfos[0].foffset = j2;
                              vinfos[0].indices[0] = _ij2[0];
                              vinfos[0].indices[1] = _ij2[1];
                              vinfos[0].maxsolutions = _nj2;
                              vinfos[1].jointtype = 17;
                              vinfos[1].foffset = j3;
                              vinfos[1].indices[0] = _ij3[0];
                              vinfos[1].indices[1] = _ij3[1];
                              vinfos[1].maxsolutions = _nj3;
                              vinfos[2].jointtype = 17;
                              vinfos[2].foffset = j4;
                              vinfos[2].indices[0] = _ij4[0];
                              vinfos[2].indices[1] = _ij4[1];
                              vinfos[2].maxsolutions = _nj4;
                              vinfos[3].jointtype = 17;
                              vinfos[3].foffset = j5;
                              vinfos[3].indices[0] = _ij5[0];
                              vinfos[3].indices[1] = _ij5[1];
                              vinfos[3].maxsolutions = _nj5;
                              vinfos[4].jointtype = 1;
                              vinfos[4].foffset = j8;
                              vinfos[4].fmul = j8mul;
                              vinfos[4].freeind = 0;
                              vinfos[4].maxsolutions = 0;
                              vinfos[5].jointtype = 1;
                              vinfos[5].foffset = j9;
                              vinfos[5].indices[0] = _ij9[0];
                              vinfos[5].indices[1] = _ij9[1];
                              vinfos[5].maxsolutions = _nj9;
                              vinfos[6].jointtype = 1;
                              vinfos[6].foffset = j10;
                              vinfos[6].fmul = j10mul;
                              vinfos[6].freeind = 0;
                              vinfos[6].maxsolutions = 0;
                              std::vector<int> vfree(1);
                              vfree[0] = 6;
                              solutions.AddSolution(vinfos, vfree);
                            }
                          }
                        } while (0);
                        if (bgotonextstatement)
                        {
                          bool bgotonextstatement = true;
                          do
                          {
                            evalcond[0] =
                                ((-3.14159265358979) +
                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j9)))), 6.28318530717959)));
                            evalcond[1] = new_r12;
                            evalcond[2] = new_r02;
                            evalcond[3] = new_r20;
                            evalcond[4] = new_r21;
                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                IKabs(evalcond[4]) < 0.0000050000000000)
                            {
                              bgotonextstatement = false;
                              IkReal j10mul = 1;
                              j10 = 0;
                              j8mul = -1.0;
                              if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                continue;
                              j8 = IKatan2(((-1.0) * new_r01), new_r11);
                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 17;
                                vinfos[0].foffset = j2;
                                vinfos[0].indices[0] = _ij2[0];
                                vinfos[0].indices[1] = _ij2[1];
                                vinfos[0].maxsolutions = _nj2;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j3;
                                vinfos[1].indices[0] = _ij3[0];
                                vinfos[1].indices[1] = _ij3[1];
                                vinfos[1].maxsolutions = _nj3;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j4;
                                vinfos[2].indices[0] = _ij4[0];
                                vinfos[2].indices[1] = _ij4[1];
                                vinfos[2].maxsolutions = _nj4;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j5;
                                vinfos[3].indices[0] = _ij5[0];
                                vinfos[3].indices[1] = _ij5[1];
                                vinfos[3].maxsolutions = _nj5;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j8;
                                vinfos[4].fmul = j8mul;
                                vinfos[4].freeind = 0;
                                vinfos[4].maxsolutions = 0;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j9;
                                vinfos[5].indices[0] = _ij9[0];
                                vinfos[5].indices[1] = _ij9[1];
                                vinfos[5].maxsolutions = _nj9;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j10;
                                vinfos[6].fmul = j10mul;
                                vinfos[6].freeind = 0;
                                vinfos[6].maxsolutions = 0;
                                std::vector<int> vfree(1);
                                vfree[0] = 6;
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          } while (0);
                          if (bgotonextstatement)
                          {
                            bool bgotonextstatement = true;
                            do
                            {
                              evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                              {
                                bgotonextstatement = false;
                                {
                                  IkReal j8eval[1];
                                  new_r21 = 0;
                                  new_r20 = 0;
                                  new_r02 = 0;
                                  new_r12 = 0;
                                  IkReal x14 = new_r22 * new_r22;
                                  IkReal x15 = ((16.0) * new_r10);
                                  IkReal x16 = ((16.0) * new_r01);
                                  IkReal x17 = ((16.0) * new_r00);
                                  IkReal x18 = (new_r11 * new_r22);
                                  IkReal x19 = ((8.0) * new_r00);
                                  IkReal x20 = (x14 * x15);
                                  IkReal x21 = (x14 * x16);
                                  j8eval[0] =
                                      ((IKabs(((((-1.0) * x21)) + x16))) + (IKabs(((((-1.0) * x16)) + x21))) +
                                       (IKabs((((new_r22 * x19)) + (((-8.0) * new_r11))))) +
                                       (IKabs(((((-32.0) * new_r11 * x14)) + (((16.0) * new_r11)) + ((new_r22 * x17))))) +
                                       (IKabs(((((32.0) * new_r00)) + (((-16.0) * x18)) + (((-1.0) * x14 * x17))))) +
                                       (IKabs(((((-1.0) * x20)) + x15))) + (IKabs(((((-1.0) * x15)) + x20))) +
                                       (IKabs(((((-8.0) * x18)) + ((x14 * x19))))));
                                  if (IKabs(j8eval[0]) < 0.0000000010000000)
                                  {
                                    continue;  // no branches [j8, j10]
                                  }
                                  else
                                  {
                                    IkReal op[4 + 1], zeror[4];
                                    int numroots;
                                    IkReal j8evalpoly[1];
                                    IkReal x22 = new_r22 * new_r22;
                                    IkReal x23 = ((16.0) * new_r01);
                                    IkReal x24 = (new_r00 * new_r22);
                                    IkReal x25 = (x22 * x23);
                                    IkReal x26 = ((((8.0) * x24)) + (((-8.0) * new_r11)));
                                    op[0] = x26;
                                    op[1] = ((((-1.0) * x23)) + x25);
                                    op[2] = ((((-32.0) * new_r11 * x22)) + (((16.0) * x24)) + (((16.0) * new_r11)));
                                    op[3] = ((((-1.0) * x25)) + x23);
                                    op[4] = x26;
                                    polyroots4(op, zeror, numroots);
                                    IkReal j8array[4], cj8array[4], sj8array[4], tempj8array[1];
                                    int numsolutions = 0;
                                    for (int ij8 = 0; ij8 < numroots; ++ij8)
                                    {
                                      IkReal htj8 = zeror[ij8];
                                      tempj8array[0] = ((2.0) * (atan(htj8)));
                                      for (int kj8 = 0; kj8 < 1; ++kj8)
                                      {
                                        j8array[numsolutions] = tempj8array[kj8];
                                        if (j8array[numsolutions] > IKPI)
                                        {
                                          j8array[numsolutions] -= IK2PI;
                                        }
                                        else if (j8array[numsolutions] < -IKPI)
                                        {
                                          j8array[numsolutions] += IK2PI;
                                        }
                                        sj8array[numsolutions] = IKsin(j8array[numsolutions]);
                                        cj8array[numsolutions] = IKcos(j8array[numsolutions]);
                                        numsolutions++;
                                      }
                                    }
                                    bool j8valid[4] = { true, true, true, true };
                                    _nj8 = 4;
                                    for (int ij8 = 0; ij8 < numsolutions; ++ij8)
                                    {
                                      if (!j8valid[ij8])
                                      {
                                        continue;
                                      }
                                      j8 = j8array[ij8];
                                      cj8 = cj8array[ij8];
                                      sj8 = sj8array[ij8];
                                      htj8 = IKtan(j8 / 2);

                                      IkReal x27 = new_r22 * new_r22;
                                      IkReal x28 = ((16.0) * new_r10);
                                      IkReal x29 = (new_r11 * new_r22);
                                      IkReal x30 = ((8.0) * x29);
                                      IkReal x31 = (new_r00 * x27);
                                      IkReal x32 = ((8.0) * x31);
                                      IkReal x33 = (x27 * x28);
                                      j8evalpoly[0] =
                                          ((((htj8 * htj8 * htj8 * htj8) * (((((-1.0) * x30)) + x32)))) +
                                           (((-1.0) * x30)) + ((htj8 * (((((-1.0) * x28)) + x33)))) + x32 +
                                           (((htj8 * htj8 * htj8) * (((((-1.0) * x33)) + x28)))) +
                                           (((htj8 * htj8) *
                                             (((((32.0) * new_r00)) + (((-16.0) * x31)) + (((-16.0) * x29)))))));
                                      if (IKabs(j8evalpoly[0]) > 0.0000000010000000)
                                      {
                                        continue;
                                      }
                                      _ij8[0] = ij8;
                                      _ij8[1] = -1;
                                      for (int iij8 = ij8 + 1; iij8 < numsolutions; ++iij8)
                                      {
                                        if (j8valid[iij8] &&
                                            IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j8valid[iij8] = false;
                                          _ij8[1] = iij8;
                                          break;
                                        }
                                      }
                                      {
                                        IkReal j10eval[3];
                                        new_r21 = 0;
                                        new_r20 = 0;
                                        new_r02 = 0;
                                        new_r12 = 0;
                                        IkReal x34 = cj8 * cj8;
                                        IkReal x35 = new_r22 * new_r22;
                                        IkReal x36 = (new_r22 * sj8);
                                        IkReal x37 = ((((-1.0) * x35)) + (((-1.0) * x34)) + ((x34 * x35)));
                                        j10eval[0] = x37;
                                        j10eval[1] = ((IKabs((((cj8 * new_r01)) + ((new_r00 * x36))))) +
                                                      (IKabs((((new_r01 * x36)) + (((-1.0) * cj8 * new_r00))))));
                                        j10eval[2] = IKsign(x37);
                                        if (IKabs(j10eval[0]) < 0.0000010000000000 ||
                                            IKabs(j10eval[1]) < 0.0000010000000000 ||
                                            IKabs(j10eval[2]) < 0.0000010000000000)
                                        {
                                          {
                                            IkReal j10eval[1];
                                            new_r21 = 0;
                                            new_r20 = 0;
                                            new_r02 = 0;
                                            new_r12 = 0;
                                            j10eval[0] = new_r22;
                                            if (IKabs(j10eval[0]) < 0.0000010000000000)
                                            {
                                              {
                                                IkReal j10eval[2];
                                                new_r21 = 0;
                                                new_r20 = 0;
                                                new_r02 = 0;
                                                new_r12 = 0;
                                                j10eval[0] = cj8;
                                                j10eval[1] = new_r22;
                                                if (IKabs(j10eval[0]) < 0.0000010000000000 ||
                                                    IKabs(j10eval[1]) < 0.0000010000000000)
                                                {
                                                  {
                                                    IkReal evalcond[1];
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-1.5707963267949) + j8)))),
                                                                             6.28318530717959)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j10array[1], cj10array[1], sj10array[1];
                                                          bool j10valid[1] = { false };
                                                          _nj10 = 1;
                                                          if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j10array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                          sj10array[0] = IKsin(j10array[0]);
                                                          cj10array[0] = IKcos(j10array[0]);
                                                          if (j10array[0] > IKPI)
                                                          {
                                                            j10array[0] -= IK2PI;
                                                          }
                                                          else if (j10array[0] < -IKPI)
                                                          {
                                                            j10array[0] += IK2PI;
                                                          }
                                                          j10valid[0] = true;
                                                          for (int ij10 = 0; ij10 < 1; ++ij10)
                                                          {
                                                            if (!j10valid[ij10])
                                                            {
                                                              continue;
                                                            }
                                                            _ij10[0] = ij10;
                                                            _ij10[1] = -1;
                                                            for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                            {
                                                              if (j10valid[iij10] &&
                                                                  IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j10valid[iij10] = false;
                                                                _ij10[1] = iij10;
                                                                break;
                                                              }
                                                            }
                                                            j10 = j10array[ij10];
                                                            cj10 = cj10array[ij10];
                                                            sj10 = sj10array[ij10];
                                                            {
                                                              IkReal evalcond[6];
                                                              IkReal x38 = IKsin(j10);
                                                              IkReal x39 = IKcos(j10);
                                                              IkReal x40 = ((1.0) * new_r00);
                                                              IkReal x41 = ((1.0) * new_r22);
                                                              IkReal x42 = ((1.0) * x39);
                                                              evalcond[0] = (x38 + new_r11);
                                                              evalcond[1] = ((((-1.0) * x42)) + new_r10);
                                                              evalcond[2] = ((((-1.0) * x38 * x41)) + (((-1.0) * x40)));
                                                              evalcond[3] =
                                                                  ((((-1.0) * x39 * x41)) + (((-1.0) * new_r01)));
                                                              evalcond[4] =
                                                                  ((((-1.0) * x38)) + (((-1.0) * new_r22 * x40)));
                                                              evalcond[5] =
                                                                  ((((-1.0) * x42)) + (((-1.0) * new_r01 * x41)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 17;
                                                              vinfos[0].foffset = j2;
                                                              vinfos[0].indices[0] = _ij2[0];
                                                              vinfos[0].indices[1] = _ij2[1];
                                                              vinfos[0].maxsolutions = _nj2;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j3;
                                                              vinfos[1].indices[0] = _ij3[0];
                                                              vinfos[1].indices[1] = _ij3[1];
                                                              vinfos[1].maxsolutions = _nj3;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j4;
                                                              vinfos[2].indices[0] = _ij4[0];
                                                              vinfos[2].indices[1] = _ij4[1];
                                                              vinfos[2].maxsolutions = _nj4;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j5;
                                                              vinfos[3].indices[0] = _ij5[0];
                                                              vinfos[3].indices[1] = _ij5[1];
                                                              vinfos[3].maxsolutions = _nj5;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j8;
                                                              vinfos[4].indices[0] = _ij8[0];
                                                              vinfos[4].indices[1] = _ij8[1];
                                                              vinfos[4].maxsolutions = _nj8;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j9;
                                                              vinfos[5].indices[0] = _ij9[0];
                                                              vinfos[5].indices[1] = _ij9[1];
                                                              vinfos[5].maxsolutions = _nj9;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j10;
                                                              vinfos[6].indices[0] = _ij10[0];
                                                              vinfos[6].indices[1] = _ij10[1];
                                                              vinfos[6].maxsolutions = _nj10;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((1.5707963267949) + j8)))),
                                                                               6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                        {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                                            bool j10valid[1] = { false };
                                                            _nj10 = 1;
                                                            if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j10array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                            sj10array[0] = IKsin(j10array[0]);
                                                            cj10array[0] = IKcos(j10array[0]);
                                                            if (j10array[0] > IKPI)
                                                            {
                                                              j10array[0] -= IK2PI;
                                                            }
                                                            else if (j10array[0] < -IKPI)
                                                            {
                                                              j10array[0] += IK2PI;
                                                            }
                                                            j10valid[0] = true;
                                                            for (int ij10 = 0; ij10 < 1; ++ij10)
                                                            {
                                                              if (!j10valid[ij10])
                                                              {
                                                                continue;
                                                              }
                                                              _ij10[0] = ij10;
                                                              _ij10[1] = -1;
                                                              for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                              {
                                                                if (j10valid[iij10] &&
                                                                    IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j10valid[iij10] = false;
                                                                  _ij10[1] = iij10;
                                                                  break;
                                                                }
                                                              }
                                                              j10 = j10array[ij10];
                                                              cj10 = cj10array[ij10];
                                                              sj10 = sj10array[ij10];
                                                              {
                                                                IkReal evalcond[6];
                                                                IkReal x43 = IKsin(j10);
                                                                IkReal x44 = IKcos(j10);
                                                                IkReal x45 = ((1.0) * x44);
                                                                IkReal x46 = ((1.0) * x43);
                                                                evalcond[0] = (x43 + (((-1.0) * new_r11)));
                                                                evalcond[1] = ((((-1.0) * new_r22 * x46)) + new_r00);
                                                                evalcond[2] = ((((-1.0) * new_r22 * x45)) + new_r01);
                                                                evalcond[3] = ((((-1.0) * x45)) + (((-1.0) * new_r10)));
                                                                evalcond[4] =
                                                                    (((new_r00 * new_r22)) + (((-1.0) * x46)));
                                                                evalcond[5] =
                                                                    ((((-1.0) * x45)) + ((new_r01 * new_r22)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j2;
                                                                vinfos[0].indices[0] = _ij2[0];
                                                                vinfos[0].indices[1] = _ij2[1];
                                                                vinfos[0].maxsolutions = _nj2;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j3;
                                                                vinfos[1].indices[0] = _ij3[0];
                                                                vinfos[1].indices[1] = _ij3[1];
                                                                vinfos[1].maxsolutions = _nj3;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j4;
                                                                vinfos[2].indices[0] = _ij4[0];
                                                                vinfos[2].indices[1] = _ij4[1];
                                                                vinfos[2].maxsolutions = _nj4;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j5;
                                                                vinfos[3].indices[0] = _ij5[0];
                                                                vinfos[3].indices[1] = _ij5[1];
                                                                vinfos[3].maxsolutions = _nj5;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j8;
                                                                vinfos[4].indices[0] = _ij8[0];
                                                                vinfos[4].indices[1] = _ij8[1];
                                                                vinfos[4].maxsolutions = _nj8;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j9;
                                                                vinfos[5].indices[0] = _ij9[0];
                                                                vinfos[5].indices[1] = _ij9[1];
                                                                vinfos[5].maxsolutions = _nj9;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j10;
                                                                vinfos[6].indices[0] = _ij10[0];
                                                                vinfos[6].indices[1] = _ij10[1];
                                                                vinfos[6].maxsolutions = _nj10;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement)
                                                      {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                          IkReal x47 = new_r22 * new_r22;
                                                          CheckValue<IkReal> x48 =
                                                              IKPowWithIntegerCheck(((-1.0) + x47), -1);
                                                          if (!x48.valid)
                                                          {
                                                            continue;
                                                          }
                                                          if (((x47 * (x48.value))) < -0.00001)
                                                            continue;
                                                          IkReal gconst6 = IKsqrt((x47 * (x48.value)));
                                                          evalcond[0] =
                                                              ((-3.14159265358979) +
                                                               (IKfmod(((3.14159265358979) +
                                                                        (IKabs((cj8 + (((-1.0) * gconst6))))) +
                                                                        (IKabs(((-1.0) + (IKsign(sj8)))))),
                                                                       6.28318530717959)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                          {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j10array[1], cj10array[1], sj10array[1];
                                                              bool j10valid[1] = { false };
                                                              _nj10 = 1;
                                                              if ((((1.0) + (((-1.0) * (gconst6 * gconst6))))) <
                                                                  -0.00001)
                                                                continue;
                                                              IkReal x49 =
                                                                  IKsqrt(((1.0) + (((-1.0) * (gconst6 * gconst6)))));
                                                              if (IKabs(((((-1.0) * new_r11 * x49)) +
                                                                         (((-1.0) * gconst6 * new_r01)))) <
                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs((((gconst6 * new_r00)) + ((new_r10 * x49)))) <
                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(((((-1.0) * new_r11 * x49)) +
                                                                               (((-1.0) * gconst6 * new_r01)))) +
                                                                        IKsqr((((gconst6 * new_r00)) +
                                                                               ((new_r10 * x49)))) -
                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j10array[0] =
                                                                  IKatan2(((((-1.0) * new_r11 * x49)) +
                                                                           (((-1.0) * gconst6 * new_r01))),
                                                                          (((gconst6 * new_r00)) + ((new_r10 * x49))));
                                                              sj10array[0] = IKsin(j10array[0]);
                                                              cj10array[0] = IKcos(j10array[0]);
                                                              if (j10array[0] > IKPI)
                                                              {
                                                                j10array[0] -= IK2PI;
                                                              }
                                                              else if (j10array[0] < -IKPI)
                                                              {
                                                                j10array[0] += IK2PI;
                                                              }
                                                              j10valid[0] = true;
                                                              for (int ij10 = 0; ij10 < 1; ++ij10)
                                                              {
                                                                if (!j10valid[ij10])
                                                                {
                                                                  continue;
                                                                }
                                                                _ij10[0] = ij10;
                                                                _ij10[1] = -1;
                                                                for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                                {
                                                                  if (j10valid[iij10] &&
                                                                      IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                          IKFAST_SOLUTION_THRESH)
                                                                  {
                                                                    j10valid[iij10] = false;
                                                                    _ij10[1] = iij10;
                                                                    break;
                                                                  }
                                                                }
                                                                j10 = j10array[ij10];
                                                                cj10 = cj10array[ij10];
                                                                sj10 = sj10array[ij10];
                                                                {
                                                                  IkReal evalcond[10];
                                                                  IkReal x50 = IKcos(j10);
                                                                  IkReal x51 = IKsin(j10);
                                                                  IkReal x52 = (gconst6 * new_r10);
                                                                  IkReal x53 = (gconst6 * new_r11);
                                                                  IkReal x54 = ((1.0) * new_r22);
                                                                  IkReal x55 = ((1.0) * x50);
                                                                  IkReal x56 = (new_r22 * x51);
                                                                  IkReal x57 = (gconst6 * x50);
                                                                  IkReal x58 = x49;
                                                                  IkReal x59 = (new_r00 * x58);
                                                                  IkReal x60 = (new_r01 * x58);
                                                                  IkReal x61 = (x50 * x58);
                                                                  evalcond[0] =
                                                                      (((gconst6 * new_r01)) + x51 + ((new_r11 * x58)));
                                                                  evalcond[1] = (((gconst6 * new_r00)) +
                                                                                 ((new_r10 * x58)) + (((-1.0) * x55)));
                                                                  evalcond[2] =
                                                                      (((new_r22 * x61)) + new_r01 + ((gconst6 * x51)));
                                                                  evalcond[3] = ((((-1.0) * x54 * x57)) +
                                                                                 ((x51 * x58)) + new_r11);
                                                                  evalcond[4] =
                                                                      ((((-1.0) * x51 * x54)) + x52 + (((-1.0) * x59)));
                                                                  evalcond[5] =
                                                                      (x53 + (((-1.0) * x50 * x54)) + (((-1.0) * x60)));
                                                                  evalcond[6] = ((((-1.0) * gconst6 * x55)) +
                                                                                 ((x56 * x58)) + new_r00);
                                                                  evalcond[7] = ((((-1.0) * gconst6 * x51 * x54)) +
                                                                                 (((-1.0) * x55 * x58)) + new_r10);
                                                                  evalcond[8] =
                                                                      (((new_r22 * x52)) + (((-1.0) * x54 * x59)) +
                                                                       (((-1.0) * x51)));
                                                                  evalcond[9] =
                                                                      (((new_r22 * x53)) + (((-1.0) * x54 * x60)) +
                                                                       (((-1.0) * x55)));
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                  {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 17;
                                                                  vinfos[0].foffset = j2;
                                                                  vinfos[0].indices[0] = _ij2[0];
                                                                  vinfos[0].indices[1] = _ij2[1];
                                                                  vinfos[0].maxsolutions = _nj2;
                                                                  vinfos[1].jointtype = 17;
                                                                  vinfos[1].foffset = j3;
                                                                  vinfos[1].indices[0] = _ij3[0];
                                                                  vinfos[1].indices[1] = _ij3[1];
                                                                  vinfos[1].maxsolutions = _nj3;
                                                                  vinfos[2].jointtype = 17;
                                                                  vinfos[2].foffset = j4;
                                                                  vinfos[2].indices[0] = _ij4[0];
                                                                  vinfos[2].indices[1] = _ij4[1];
                                                                  vinfos[2].maxsolutions = _nj4;
                                                                  vinfos[3].jointtype = 17;
                                                                  vinfos[3].foffset = j5;
                                                                  vinfos[3].indices[0] = _ij5[0];
                                                                  vinfos[3].indices[1] = _ij5[1];
                                                                  vinfos[3].maxsolutions = _nj5;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j8;
                                                                  vinfos[4].indices[0] = _ij8[0];
                                                                  vinfos[4].indices[1] = _ij8[1];
                                                                  vinfos[4].maxsolutions = _nj8;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j9;
                                                                  vinfos[5].indices[0] = _ij9[0];
                                                                  vinfos[5].indices[1] = _ij9[1];
                                                                  vinfos[5].maxsolutions = _nj9;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j10;
                                                                  vinfos[6].indices[0] = _ij10[0];
                                                                  vinfos[6].indices[1] = _ij10[1];
                                                                  vinfos[6].maxsolutions = _nj10;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                          bool bgotonextstatement = true;
                                                          do
                                                          {
                                                            IkReal x62 = new_r22 * new_r22;
                                                            CheckValue<IkReal> x63 =
                                                                IKPowWithIntegerCheck(((-1.0) + x62), -1);
                                                            if (!x63.valid)
                                                            {
                                                              continue;
                                                            }
                                                            if (((x62 * (x63.value))) < -0.00001)
                                                              continue;
                                                            IkReal gconst6 = IKsqrt((x62 * (x63.value)));
                                                            evalcond[0] =
                                                                ((-3.14159265358979) +
                                                                 (IKfmod(((3.14159265358979) +
                                                                          (IKabs(((1.0) + (IKsign(sj8))))) +
                                                                          (IKabs((cj8 + (((-1.0) * gconst6)))))),
                                                                         6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                                bool j10valid[1] = { false };
                                                                _nj10 = 1;
                                                                if ((((1.0) + (((-1.0) * (gconst6 * gconst6))))) <
                                                                    -0.00001)
                                                                  continue;
                                                                IkReal x64 =
                                                                    IKsqrt(((1.0) + (((-1.0) * (gconst6 * gconst6)))));
                                                                if (IKabs(((((-1.0) * gconst6 * new_r01)) +
                                                                           ((new_r11 * x64)))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs((((gconst6 * new_r00)) +
                                                                           (((-1.0) * new_r10 * x64)))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((((-1.0) * gconst6 * new_r01)) +
                                                                                 ((new_r11 * x64)))) +
                                                                          IKsqr((((gconst6 * new_r00)) +
                                                                                 (((-1.0) * new_r10 * x64)))) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j10array[0] = IKatan2(((((-1.0) * gconst6 * new_r01)) +
                                                                                       ((new_r11 * x64))),
                                                                                      (((gconst6 * new_r00)) +
                                                                                       (((-1.0) * new_r10 * x64))));
                                                                sj10array[0] = IKsin(j10array[0]);
                                                                cj10array[0] = IKcos(j10array[0]);
                                                                if (j10array[0] > IKPI)
                                                                {
                                                                  j10array[0] -= IK2PI;
                                                                }
                                                                else if (j10array[0] < -IKPI)
                                                                {
                                                                  j10array[0] += IK2PI;
                                                                }
                                                                j10valid[0] = true;
                                                                for (int ij10 = 0; ij10 < 1; ++ij10)
                                                                {
                                                                  if (!j10valid[ij10])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij10[0] = ij10;
                                                                  _ij10[1] = -1;
                                                                  for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                                  {
                                                                    if (j10valid[iij10] &&
                                                                        IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j10valid[iij10] = false;
                                                                      _ij10[1] = iij10;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j10 = j10array[ij10];
                                                                  cj10 = cj10array[ij10];
                                                                  sj10 = sj10array[ij10];
                                                                  {
                                                                    IkReal evalcond[10];
                                                                    IkReal x65 = IKsin(j10);
                                                                    IkReal x66 = IKcos(j10);
                                                                    IkReal x67 = ((1.0) * new_r22);
                                                                    IkReal x68 = (gconst6 * new_r10);
                                                                    IkReal x69 = (gconst6 * new_r11);
                                                                    IkReal x70 = ((1.0) * x66);
                                                                    IkReal x71 = (gconst6 * x66);
                                                                    IkReal x72 = (gconst6 * x65);
                                                                    IkReal x73 = x64;
                                                                    IkReal x74 = (new_r01 * x73);
                                                                    IkReal x75 = (new_r00 * x73);
                                                                    IkReal x76 = ((1.0) * x73);
                                                                    IkReal x77 = (x66 * x73);
                                                                    evalcond[0] = (((gconst6 * new_r01)) + x65 +
                                                                                   (((-1.0) * new_r11 * x76)));
                                                                    evalcond[1] =
                                                                        ((((-1.0) * x70)) + ((gconst6 * new_r00)) +
                                                                         (((-1.0) * new_r10 * x76)));
                                                                    evalcond[2] = (x75 + x68 + (((-1.0) * x65 * x67)));
                                                                    evalcond[3] = ((((-1.0) * x66 * x67)) + x74 + x69);
                                                                    evalcond[4] =
                                                                        (x72 + (((-1.0) * x67 * x77)) + new_r01);
                                                                    evalcond[5] =
                                                                        (x77 + (((-1.0) * x67 * x72)) + new_r10);
                                                                    evalcond[6] =
                                                                        (((new_r22 * x68)) + ((new_r22 * x75)) +
                                                                         (((-1.0) * x65)));
                                                                    evalcond[7] =
                                                                        (((new_r22 * x69)) + (((-1.0) * x70)) +
                                                                         ((new_r22 * x74)));
                                                                    evalcond[8] = ((((-1.0) * x67 * x71)) + new_r11 +
                                                                                   (((-1.0) * x65 * x76)));
                                                                    evalcond[9] =
                                                                        ((((-1.0) * gconst6 * x70)) +
                                                                         (((-1.0) * x65 * x67 * x73)) + new_r00);
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 17;
                                                                    vinfos[0].foffset = j2;
                                                                    vinfos[0].indices[0] = _ij2[0];
                                                                    vinfos[0].indices[1] = _ij2[1];
                                                                    vinfos[0].maxsolutions = _nj2;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j3;
                                                                    vinfos[1].indices[0] = _ij3[0];
                                                                    vinfos[1].indices[1] = _ij3[1];
                                                                    vinfos[1].maxsolutions = _nj3;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j4;
                                                                    vinfos[2].indices[0] = _ij4[0];
                                                                    vinfos[2].indices[1] = _ij4[1];
                                                                    vinfos[2].maxsolutions = _nj4;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j5;
                                                                    vinfos[3].indices[0] = _ij5[0];
                                                                    vinfos[3].indices[1] = _ij5[1];
                                                                    vinfos[3].maxsolutions = _nj5;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j8;
                                                                    vinfos[4].indices[0] = _ij8[0];
                                                                    vinfos[4].indices[1] = _ij8[1];
                                                                    vinfos[4].maxsolutions = _nj8;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j9;
                                                                    vinfos[5].indices[0] = _ij9[0];
                                                                    vinfos[5].indices[1] = _ij9[1];
                                                                    vinfos[5].maxsolutions = _nj9;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j10;
                                                                    vinfos[6].indices[0] = _ij10[0];
                                                                    vinfos[6].indices[1] = _ij10[1];
                                                                    vinfos[6].maxsolutions = _nj10;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement)
                                                          {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                              IkReal x78 = new_r22 * new_r22;
                                                              CheckValue<IkReal> x79 =
                                                                  IKPowWithIntegerCheck(((-1.0) + x78), -1);
                                                              if (!x79.valid)
                                                              {
                                                                continue;
                                                              }
                                                              if (((x78 * (x79.value))) < -0.00001)
                                                                continue;
                                                              IkReal gconst7 = ((-1.0) * (IKsqrt((x78 * (x79.value)))));
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-1.0) + (IKsign(sj8))))) +
                                                                            (IKabs((cj8 + (((-1.0) * gconst7)))))),
                                                                           6.28318530717959)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                              {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j10array[1], cj10array[1], sj10array[1];
                                                                  bool j10valid[1] = { false };
                                                                  _nj10 = 1;
                                                                  if ((((1.0) + (((-1.0) * (gconst7 * gconst7))))) <
                                                                      -0.00001)
                                                                    continue;
                                                                  IkReal x80 = IKsqrt(
                                                                      ((1.0) + (((-1.0) * (gconst7 * gconst7)))));
                                                                  if (IKabs(((((-1.0) * gconst7 * new_r01)) +
                                                                             (((-1.0) * new_r11 * x80)))) <
                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(
                                                                          (((new_r10 * x80)) + ((gconst7 * new_r00)))) <
                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(IKsqr(((((-1.0) * gconst7 * new_r01)) +
                                                                                   (((-1.0) * new_r11 * x80)))) +
                                                                            IKsqr((((new_r10 * x80)) +
                                                                                   ((gconst7 * new_r00)))) -
                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j10array[0] = IKatan2(
                                                                      ((((-1.0) * gconst7 * new_r01)) +
                                                                       (((-1.0) * new_r11 * x80))),
                                                                      (((new_r10 * x80)) + ((gconst7 * new_r00))));
                                                                  sj10array[0] = IKsin(j10array[0]);
                                                                  cj10array[0] = IKcos(j10array[0]);
                                                                  if (j10array[0] > IKPI)
                                                                  {
                                                                    j10array[0] -= IK2PI;
                                                                  }
                                                                  else if (j10array[0] < -IKPI)
                                                                  {
                                                                    j10array[0] += IK2PI;
                                                                  }
                                                                  j10valid[0] = true;
                                                                  for (int ij10 = 0; ij10 < 1; ++ij10)
                                                                  {
                                                                    if (!j10valid[ij10])
                                                                    {
                                                                      continue;
                                                                    }
                                                                    _ij10[0] = ij10;
                                                                    _ij10[1] = -1;
                                                                    for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                                    {
                                                                      if (j10valid[iij10] &&
                                                                          IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                              IKFAST_SOLUTION_THRESH)
                                                                      {
                                                                        j10valid[iij10] = false;
                                                                        _ij10[1] = iij10;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j10 = j10array[ij10];
                                                                    cj10 = cj10array[ij10];
                                                                    sj10 = sj10array[ij10];
                                                                    {
                                                                      IkReal evalcond[10];
                                                                      IkReal x81 = IKcos(j10);
                                                                      IkReal x82 = IKsin(j10);
                                                                      IkReal x83 = (gconst7 * new_r22);
                                                                      IkReal x84 = ((1.0) * x81);
                                                                      IkReal x85 = ((1.0) * x82);
                                                                      IkReal x86 = x80;
                                                                      IkReal x87 = ((1.0) * x86);
                                                                      IkReal x88 = (x82 * x86);
                                                                      evalcond[0] = (x82 + ((new_r11 * x86)) +
                                                                                     ((gconst7 * new_r01)));
                                                                      evalcond[1] =
                                                                          (((new_r10 * x86)) + (((-1.0) * x84)) +
                                                                           ((gconst7 * new_r00)));
                                                                      evalcond[2] = (((gconst7 * x82)) + new_r01 +
                                                                                     ((new_r22 * x81 * x86)));
                                                                      evalcond[3] =
                                                                          ((((-1.0) * x83 * x84)) + x88 + new_r11);
                                                                      evalcond[4] = ((((-1.0) * new_r00 * x87)) +
                                                                                     (((-1.0) * new_r22 * x85)) +
                                                                                     ((gconst7 * new_r10)));
                                                                      evalcond[5] = ((((-1.0) * new_r01 * x87)) +
                                                                                     (((-1.0) * new_r22 * x84)) +
                                                                                     ((gconst7 * new_r11)));
                                                                      evalcond[6] = ((((-1.0) * gconst7 * x84)) +
                                                                                     ((new_r22 * x88)) + new_r00);
                                                                      evalcond[7] = ((((-1.0) * x83 * x85)) +
                                                                                     (((-1.0) * x84 * x86)) + new_r10);
                                                                      evalcond[8] =
                                                                          ((((-1.0) * new_r00 * new_r22 * x87)) +
                                                                           ((new_r10 * x83)) + (((-1.0) * x85)));
                                                                      evalcond[9] =
                                                                          ((((-1.0) * new_r01 * new_r22 * x87)) +
                                                                           (((-1.0) * x84)) + ((new_r11 * x83)));
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                      {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 17;
                                                                      vinfos[0].foffset = j2;
                                                                      vinfos[0].indices[0] = _ij2[0];
                                                                      vinfos[0].indices[1] = _ij2[1];
                                                                      vinfos[0].maxsolutions = _nj2;
                                                                      vinfos[1].jointtype = 17;
                                                                      vinfos[1].foffset = j3;
                                                                      vinfos[1].indices[0] = _ij3[0];
                                                                      vinfos[1].indices[1] = _ij3[1];
                                                                      vinfos[1].maxsolutions = _nj3;
                                                                      vinfos[2].jointtype = 17;
                                                                      vinfos[2].foffset = j4;
                                                                      vinfos[2].indices[0] = _ij4[0];
                                                                      vinfos[2].indices[1] = _ij4[1];
                                                                      vinfos[2].maxsolutions = _nj4;
                                                                      vinfos[3].jointtype = 17;
                                                                      vinfos[3].foffset = j5;
                                                                      vinfos[3].indices[0] = _ij5[0];
                                                                      vinfos[3].indices[1] = _ij5[1];
                                                                      vinfos[3].maxsolutions = _nj5;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j8;
                                                                      vinfos[4].indices[0] = _ij8[0];
                                                                      vinfos[4].indices[1] = _ij8[1];
                                                                      vinfos[4].maxsolutions = _nj8;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j9;
                                                                      vinfos[5].indices[0] = _ij9[0];
                                                                      vinfos[5].indices[1] = _ij9[1];
                                                                      vinfos[5].maxsolutions = _nj9;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j10;
                                                                      vinfos[6].indices[0] = _ij10[0];
                                                                      vinfos[6].indices[1] = _ij10[1];
                                                                      vinfos[6].maxsolutions = _nj10;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                              bool bgotonextstatement = true;
                                                              do
                                                              {
                                                                IkReal x89 = new_r22 * new_r22;
                                                                CheckValue<IkReal> x90 =
                                                                    IKPowWithIntegerCheck(((-1.0) + x89), -1);
                                                                if (!x90.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                if (((x89 * (x90.value))) < -0.00001)
                                                                  continue;
                                                                IkReal gconst7 =
                                                                    ((-1.0) * (IKsqrt((x89 * (x90.value)))));
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((1.0) + (IKsign(sj8))))) +
                                                                              (IKabs((cj8 + (((-1.0) * gconst7)))))),
                                                                             6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                                    bool j10valid[1] = { false };
                                                                    _nj10 = 1;
                                                                    if ((((1.0) + (((-1.0) * (gconst7 * gconst7))))) <
                                                                        -0.00001)
                                                                      continue;
                                                                    IkReal x91 = IKsqrt(
                                                                        ((1.0) + (((-1.0) * (gconst7 * gconst7)))));
                                                                    if (IKabs(((((-1.0) * gconst7 * new_r01)) +
                                                                               ((new_r11 * x91)))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(((((-1.0) * new_r10 * x91)) +
                                                                               ((gconst7 * new_r00)))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr(((((-1.0) * gconst7 * new_r01)) +
                                                                                     ((new_r11 * x91)))) +
                                                                              IKsqr(((((-1.0) * new_r10 * x91)) +
                                                                                     ((gconst7 * new_r00)))) -
                                                                              1) <= IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j10array[0] =
                                                                        IKatan2(((((-1.0) * gconst7 * new_r01)) +
                                                                                 ((new_r11 * x91))),
                                                                                ((((-1.0) * new_r10 * x91)) +
                                                                                 ((gconst7 * new_r00))));
                                                                    sj10array[0] = IKsin(j10array[0]);
                                                                    cj10array[0] = IKcos(j10array[0]);
                                                                    if (j10array[0] > IKPI)
                                                                    {
                                                                      j10array[0] -= IK2PI;
                                                                    }
                                                                    else if (j10array[0] < -IKPI)
                                                                    {
                                                                      j10array[0] += IK2PI;
                                                                    }
                                                                    j10valid[0] = true;
                                                                    for (int ij10 = 0; ij10 < 1; ++ij10)
                                                                    {
                                                                      if (!j10valid[ij10])
                                                                      {
                                                                        continue;
                                                                      }
                                                                      _ij10[0] = ij10;
                                                                      _ij10[1] = -1;
                                                                      for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                                      {
                                                                        if (j10valid[iij10] &&
                                                                            IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                                IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                          j10valid[iij10] = false;
                                                                          _ij10[1] = iij10;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j10 = j10array[ij10];
                                                                      cj10 = cj10array[ij10];
                                                                      sj10 = sj10array[ij10];
                                                                      {
                                                                        IkReal evalcond[10];
                                                                        IkReal x92 = IKsin(j10);
                                                                        IkReal x93 = IKcos(j10);
                                                                        IkReal x94 = (gconst7 * new_r11);
                                                                        IkReal x95 = (gconst7 * new_r10);
                                                                        IkReal x96 = ((1.0) * x93);
                                                                        IkReal x97 = ((1.0) * new_r22 * x92);
                                                                        IkReal x98 = x91;
                                                                        IkReal x99 = (new_r22 * x98);
                                                                        IkReal x100 = ((1.0) * x98);
                                                                        evalcond[0] = ((((-1.0) * new_r11 * x100)) +
                                                                                       x92 + ((gconst7 * new_r01)));
                                                                        evalcond[1] =
                                                                            ((((-1.0) * new_r10 * x100)) +
                                                                             (((-1.0) * x96)) + ((gconst7 * new_r00)));
                                                                        evalcond[2] = (((new_r00 * x98)) + x95 +
                                                                                       (((-1.0) * x97)));
                                                                        evalcond[3] = (((new_r01 * x98)) + x94 +
                                                                                       (((-1.0) * new_r22 * x96)));
                                                                        evalcond[4] = (((gconst7 * x92)) + new_r01 +
                                                                                       (((-1.0) * x96 * x99)));
                                                                        evalcond[5] = (((x93 * x98)) + new_r10 +
                                                                                       (((-1.0) * gconst7 * x97)));
                                                                        evalcond[6] =
                                                                            (((new_r22 * x95)) + ((new_r00 * x99)) +
                                                                             (((-1.0) * x92)));
                                                                        evalcond[7] =
                                                                            (((new_r22 * x94)) + ((new_r01 * x99)) +
                                                                             (((-1.0) * x96)));
                                                                        evalcond[8] =
                                                                            ((((-1.0) * x100 * x92)) +
                                                                             (((-1.0) * gconst7 * new_r22 * x96)) +
                                                                             new_r11);
                                                                        evalcond[9] =
                                                                            (new_r00 + (((-1.0) * x97 * x98)) +
                                                                             (((-1.0) * gconst7 * x96)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[4]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[5]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[6]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[7]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[8]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 17;
                                                                        vinfos[0].foffset = j2;
                                                                        vinfos[0].indices[0] = _ij2[0];
                                                                        vinfos[0].indices[1] = _ij2[1];
                                                                        vinfos[0].maxsolutions = _nj2;
                                                                        vinfos[1].jointtype = 17;
                                                                        vinfos[1].foffset = j3;
                                                                        vinfos[1].indices[0] = _ij3[0];
                                                                        vinfos[1].indices[1] = _ij3[1];
                                                                        vinfos[1].maxsolutions = _nj3;
                                                                        vinfos[2].jointtype = 17;
                                                                        vinfos[2].foffset = j4;
                                                                        vinfos[2].indices[0] = _ij4[0];
                                                                        vinfos[2].indices[1] = _ij4[1];
                                                                        vinfos[2].maxsolutions = _nj4;
                                                                        vinfos[3].jointtype = 17;
                                                                        vinfos[3].foffset = j5;
                                                                        vinfos[3].indices[0] = _ij5[0];
                                                                        vinfos[3].indices[1] = _ij5[1];
                                                                        vinfos[3].maxsolutions = _nj5;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j8;
                                                                        vinfos[4].indices[0] = _ij8[0];
                                                                        vinfos[4].indices[1] = _ij8[1];
                                                                        vinfos[4].maxsolutions = _nj8;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j9;
                                                                        vinfos[5].indices[0] = _ij9[0];
                                                                        vinfos[5].indices[1] = _ij9[1];
                                                                        vinfos[5].maxsolutions = _nj9;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j10;
                                                                        vinfos[6].indices[0] = _ij10[0];
                                                                        vinfos[6].indices[1] = _ij10[1];
                                                                        vinfos[6].maxsolutions = _nj10;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement)
                                                              {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  if (1)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    continue;  // branch miss [j10]
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {}
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                else
                                                {
                                                  {
                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                    bool j10valid[1] = { false };
                                                    _nj10 = 1;
                                                    IkReal x101 = ((1.0) * cj8 * new_r01);
                                                    CheckValue<IkReal> x102 = IKPowWithIntegerCheck(cj8, -1);
                                                    if (!x102.valid)
                                                    {
                                                      continue;
                                                    }
                                                    CheckValue<IkReal> x103 = IKPowWithIntegerCheck(new_r22, -1);
                                                    if (!x103.valid)
                                                    {
                                                      continue;
                                                    }
                                                    if (IKabs(((((-1.0) * x101)) + (((-1.0) * new_r11 * sj8)))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((x102.value) * (x103.value) *
                                                               ((((new_r11 * (cj8 * cj8))) +
                                                                 (((-1.0) * sj8 * x101)))))) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((((-1.0) * x101)) + (((-1.0) * new_r11 * sj8)))) +
                                                              IKsqr(((x102.value) * (x103.value) *
                                                                     ((((new_r11 * (cj8 * cj8))) +
                                                                       (((-1.0) * sj8 * x101)))))) -
                                                              1) <= IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j10array[0] = IKatan2(
                                                        ((((-1.0) * x101)) + (((-1.0) * new_r11 * sj8))),
                                                        ((x102.value) * (x103.value) *
                                                         ((((new_r11 * (cj8 * cj8))) + (((-1.0) * sj8 * x101))))));
                                                    sj10array[0] = IKsin(j10array[0]);
                                                    cj10array[0] = IKcos(j10array[0]);
                                                    if (j10array[0] > IKPI)
                                                    {
                                                      j10array[0] -= IK2PI;
                                                    }
                                                    else if (j10array[0] < -IKPI)
                                                    {
                                                      j10array[0] += IK2PI;
                                                    }
                                                    j10valid[0] = true;
                                                    for (int ij10 = 0; ij10 < 1; ++ij10)
                                                    {
                                                      if (!j10valid[ij10])
                                                      {
                                                        continue;
                                                      }
                                                      _ij10[0] = ij10;
                                                      _ij10[1] = -1;
                                                      for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                      {
                                                        if (j10valid[iij10] &&
                                                            IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j10valid[iij10] = false;
                                                          _ij10[1] = iij10;
                                                          break;
                                                        }
                                                      }
                                                      j10 = j10array[ij10];
                                                      cj10 = cj10array[ij10];
                                                      sj10 = sj10array[ij10];
                                                      {
                                                        IkReal evalcond[10];
                                                        IkReal x104 = IKcos(j10);
                                                        IkReal x105 = IKsin(j10);
                                                        IkReal x106 = (cj8 * new_r22);
                                                        IkReal x107 = ((1.0) * new_r22);
                                                        IkReal x108 = (new_r01 * sj8);
                                                        IkReal x109 = (new_r00 * sj8);
                                                        IkReal x110 = ((1.0) * x104);
                                                        IkReal x111 = (cj8 * x105);
                                                        IkReal x112 = (sj8 * x105);
                                                        evalcond[0] = (((new_r11 * sj8)) + x105 + ((cj8 * new_r01)));
                                                        evalcond[1] =
                                                            (((new_r10 * sj8)) + (((-1.0) * x110)) + ((cj8 * new_r00)));
                                                        evalcond[2] = (x111 + ((new_r22 * sj8 * x104)) + new_r01);
                                                        evalcond[3] = (x112 + (((-1.0) * x106 * x110)) + new_r11);
                                                        evalcond[4] = (((cj8 * new_r10)) + (((-1.0) * x109)) +
                                                                       (((-1.0) * x105 * x107)));
                                                        evalcond[5] = ((((-1.0) * x104 * x107)) + ((cj8 * new_r11)) +
                                                                       (((-1.0) * x108)));
                                                        evalcond[6] =
                                                            (((new_r22 * x112)) + new_r00 + (((-1.0) * cj8 * x110)));
                                                        evalcond[7] = ((((-1.0) * x105 * x106)) +
                                                                       (((-1.0) * sj8 * x110)) + new_r10);
                                                        evalcond[8] = (((new_r10 * x106)) + (((-1.0) * x107 * x109)) +
                                                                       (((-1.0) * x105)));
                                                        evalcond[9] = ((((-1.0) * x107 * x108)) + (((-1.0) * x110)) +
                                                                       ((new_r11 * x106)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 17;
                                                        vinfos[0].foffset = j2;
                                                        vinfos[0].indices[0] = _ij2[0];
                                                        vinfos[0].indices[1] = _ij2[1];
                                                        vinfos[0].maxsolutions = _nj2;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j3;
                                                        vinfos[1].indices[0] = _ij3[0];
                                                        vinfos[1].indices[1] = _ij3[1];
                                                        vinfos[1].maxsolutions = _nj3;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j4;
                                                        vinfos[2].indices[0] = _ij4[0];
                                                        vinfos[2].indices[1] = _ij4[1];
                                                        vinfos[2].maxsolutions = _nj4;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j5;
                                                        vinfos[3].indices[0] = _ij5[0];
                                                        vinfos[3].indices[1] = _ij5[1];
                                                        vinfos[3].maxsolutions = _nj5;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j8;
                                                        vinfos[4].indices[0] = _ij8[0];
                                                        vinfos[4].indices[1] = _ij8[1];
                                                        vinfos[4].maxsolutions = _nj8;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j9;
                                                        vinfos[5].indices[0] = _ij9[0];
                                                        vinfos[5].indices[1] = _ij9[1];
                                                        vinfos[5].maxsolutions = _nj9;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j10;
                                                        vinfos[6].indices[0] = _ij10[0];
                                                        vinfos[6].indices[1] = _ij10[1];
                                                        vinfos[6].maxsolutions = _nj10;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            {
                                              {
                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                bool j10valid[1] = { false };
                                                _nj10 = 1;
                                                IkReal x113 = ((1.0) * new_r01);
                                                CheckValue<IkReal> x114 = IKPowWithIntegerCheck(new_r22, -1);
                                                if (!x114.valid)
                                                {
                                                  continue;
                                                }
                                                if (IKabs(((((-1.0) * new_r11 * sj8)) + (((-1.0) * cj8 * x113)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((x114.value) *
                                                           ((((cj8 * new_r11)) + (((-1.0) * sj8 * x113)))))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((((-1.0) * new_r11 * sj8)) + (((-1.0) * cj8 * x113)))) +
                                                          IKsqr(((x114.value) *
                                                                 ((((cj8 * new_r11)) + (((-1.0) * sj8 * x113)))))) -
                                                          1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j10array[0] = IKatan2(
                                                    ((((-1.0) * new_r11 * sj8)) + (((-1.0) * cj8 * x113))),
                                                    ((x114.value) * ((((cj8 * new_r11)) + (((-1.0) * sj8 * x113))))));
                                                sj10array[0] = IKsin(j10array[0]);
                                                cj10array[0] = IKcos(j10array[0]);
                                                if (j10array[0] > IKPI)
                                                {
                                                  j10array[0] -= IK2PI;
                                                }
                                                else if (j10array[0] < -IKPI)
                                                {
                                                  j10array[0] += IK2PI;
                                                }
                                                j10valid[0] = true;
                                                for (int ij10 = 0; ij10 < 1; ++ij10)
                                                {
                                                  if (!j10valid[ij10])
                                                  {
                                                    continue;
                                                  }
                                                  _ij10[0] = ij10;
                                                  _ij10[1] = -1;
                                                  for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                  {
                                                    if (j10valid[iij10] &&
                                                        IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                            IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j10valid[iij10] = false;
                                                      _ij10[1] = iij10;
                                                      break;
                                                    }
                                                  }
                                                  j10 = j10array[ij10];
                                                  cj10 = cj10array[ij10];
                                                  sj10 = sj10array[ij10];
                                                  {
                                                    IkReal evalcond[10];
                                                    IkReal x115 = IKcos(j10);
                                                    IkReal x116 = IKsin(j10);
                                                    IkReal x117 = (cj8 * new_r22);
                                                    IkReal x118 = ((1.0) * new_r22);
                                                    IkReal x119 = (new_r01 * sj8);
                                                    IkReal x120 = (new_r00 * sj8);
                                                    IkReal x121 = ((1.0) * x115);
                                                    IkReal x122 = (cj8 * x116);
                                                    IkReal x123 = (sj8 * x116);
                                                    evalcond[0] = (((new_r11 * sj8)) + x116 + ((cj8 * new_r01)));
                                                    evalcond[1] =
                                                        (((new_r10 * sj8)) + (((-1.0) * x121)) + ((cj8 * new_r00)));
                                                    evalcond[2] = (x122 + ((new_r22 * sj8 * x115)) + new_r01);
                                                    evalcond[3] = ((((-1.0) * x117 * x121)) + x123 + new_r11);
                                                    evalcond[4] = ((((-1.0) * x116 * x118)) + ((cj8 * new_r10)) +
                                                                   (((-1.0) * x120)));
                                                    evalcond[5] = ((((-1.0) * x115 * x118)) + ((cj8 * new_r11)) +
                                                                   (((-1.0) * x119)));
                                                    evalcond[6] =
                                                        ((((-1.0) * cj8 * x121)) + ((new_r22 * x123)) + new_r00);
                                                    evalcond[7] =
                                                        ((((-1.0) * x116 * x117)) + new_r10 + (((-1.0) * sj8 * x121)));
                                                    evalcond[8] = (((new_r10 * x117)) + (((-1.0) * x118 * x120)) +
                                                                   (((-1.0) * x116)));
                                                    evalcond[9] = (((new_r11 * x117)) + (((-1.0) * x118 * x119)) +
                                                                   (((-1.0) * x121)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 17;
                                                    vinfos[0].foffset = j2;
                                                    vinfos[0].indices[0] = _ij2[0];
                                                    vinfos[0].indices[1] = _ij2[1];
                                                    vinfos[0].maxsolutions = _nj2;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j3;
                                                    vinfos[1].indices[0] = _ij3[0];
                                                    vinfos[1].indices[1] = _ij3[1];
                                                    vinfos[1].maxsolutions = _nj3;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j4;
                                                    vinfos[2].indices[0] = _ij4[0];
                                                    vinfos[2].indices[1] = _ij4[1];
                                                    vinfos[2].maxsolutions = _nj4;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j5;
                                                    vinfos[3].indices[0] = _ij5[0];
                                                    vinfos[3].indices[1] = _ij5[1];
                                                    vinfos[3].maxsolutions = _nj5;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j8;
                                                    vinfos[4].indices[0] = _ij8[0];
                                                    vinfos[4].indices[1] = _ij8[1];
                                                    vinfos[4].maxsolutions = _nj8;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j9;
                                                    vinfos[5].indices[0] = _ij9[0];
                                                    vinfos[5].indices[1] = _ij9[1];
                                                    vinfos[5].maxsolutions = _nj9;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j10;
                                                    vinfos[6].indices[0] = _ij10[0];
                                                    vinfos[6].indices[1] = _ij10[1];
                                                    vinfos[6].maxsolutions = _nj10;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        else
                                        {
                                          {
                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                            bool j10valid[1] = { false };
                                            _nj10 = 1;
                                            IkReal x124 = cj8 * cj8;
                                            IkReal x125 = new_r22 * new_r22;
                                            IkReal x126 = (new_r22 * sj8);
                                            CheckValue<IkReal> x127 = IKPowWithIntegerCheck(
                                                IKsign((((x124 * x125)) + (((-1.0) * x124)) + (((-1.0) * x125)))), -1);
                                            if (!x127.valid)
                                            {
                                              continue;
                                            }
                                            CheckValue<IkReal> x128 = IKatan2WithCheck(
                                                IkReal((((new_r00 * x126)) + ((cj8 * new_r01)))),
                                                IkReal((((new_r01 * x126)) + (((-1.0) * cj8 * new_r00)))),
                                                IKFAST_ATAN2_MAGTHRESH);
                                            if (!x128.valid)
                                            {
                                              continue;
                                            }
                                            j10array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x127.value))) +
                                                           (x128.value));
                                            sj10array[0] = IKsin(j10array[0]);
                                            cj10array[0] = IKcos(j10array[0]);
                                            if (j10array[0] > IKPI)
                                            {
                                              j10array[0] -= IK2PI;
                                            }
                                            else if (j10array[0] < -IKPI)
                                            {
                                              j10array[0] += IK2PI;
                                            }
                                            j10valid[0] = true;
                                            for (int ij10 = 0; ij10 < 1; ++ij10)
                                            {
                                              if (!j10valid[ij10])
                                              {
                                                continue;
                                              }
                                              _ij10[0] = ij10;
                                              _ij10[1] = -1;
                                              for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                              {
                                                if (j10valid[iij10] &&
                                                    IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                  j10valid[iij10] = false;
                                                  _ij10[1] = iij10;
                                                  break;
                                                }
                                              }
                                              j10 = j10array[ij10];
                                              cj10 = cj10array[ij10];
                                              sj10 = sj10array[ij10];
                                              {
                                                IkReal evalcond[10];
                                                IkReal x129 = IKcos(j10);
                                                IkReal x130 = IKsin(j10);
                                                IkReal x131 = (cj8 * new_r22);
                                                IkReal x132 = ((1.0) * new_r22);
                                                IkReal x133 = (new_r01 * sj8);
                                                IkReal x134 = (new_r00 * sj8);
                                                IkReal x135 = ((1.0) * x129);
                                                IkReal x136 = (cj8 * x130);
                                                IkReal x137 = (sj8 * x130);
                                                evalcond[0] = (((new_r11 * sj8)) + x130 + ((cj8 * new_r01)));
                                                evalcond[1] =
                                                    (((new_r10 * sj8)) + (((-1.0) * x135)) + ((cj8 * new_r00)));
                                                evalcond[2] = (x136 + ((new_r22 * sj8 * x129)) + new_r01);
                                                evalcond[3] = (x137 + new_r11 + (((-1.0) * x131 * x135)));
                                                evalcond[4] =
                                                    (((cj8 * new_r10)) + (((-1.0) * x134)) + (((-1.0) * x130 * x132)));
                                                evalcond[5] =
                                                    (((cj8 * new_r11)) + (((-1.0) * x133)) + (((-1.0) * x129 * x132)));
                                                evalcond[6] = ((((-1.0) * cj8 * x135)) + ((new_r22 * x137)) + new_r00);
                                                evalcond[7] =
                                                    ((((-1.0) * x130 * x131)) + new_r10 + (((-1.0) * sj8 * x135)));
                                                evalcond[8] =
                                                    ((((-1.0) * x132 * x134)) + (((-1.0) * x130)) + ((new_r10 * x131)));
                                                evalcond[9] =
                                                    ((((-1.0) * x135)) + (((-1.0) * x132 * x133)) + ((new_r11 * x131)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 17;
                                                vinfos[0].foffset = j2;
                                                vinfos[0].indices[0] = _ij2[0];
                                                vinfos[0].indices[1] = _ij2[1];
                                                vinfos[0].maxsolutions = _nj2;
                                                vinfos[1].jointtype = 17;
                                                vinfos[1].foffset = j3;
                                                vinfos[1].indices[0] = _ij3[0];
                                                vinfos[1].indices[1] = _ij3[1];
                                                vinfos[1].maxsolutions = _nj3;
                                                vinfos[2].jointtype = 17;
                                                vinfos[2].foffset = j4;
                                                vinfos[2].indices[0] = _ij4[0];
                                                vinfos[2].indices[1] = _ij4[1];
                                                vinfos[2].maxsolutions = _nj4;
                                                vinfos[3].jointtype = 17;
                                                vinfos[3].foffset = j5;
                                                vinfos[3].indices[0] = _ij5[0];
                                                vinfos[3].indices[1] = _ij5[1];
                                                vinfos[3].maxsolutions = _nj5;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j8;
                                                vinfos[4].indices[0] = _ij8[0];
                                                vinfos[4].indices[1] = _ij8[1];
                                                vinfos[4].maxsolutions = _nj8;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j9;
                                                vinfos[5].indices[0] = _ij9[0];
                                                vinfos[5].indices[1] = _ij9[1];
                                                vinfos[5].maxsolutions = _nj9;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j10;
                                                vinfos[6].indices[0] = _ij10[0];
                                                vinfos[6].indices[1] = _ij10[1];
                                                vinfos[6].maxsolutions = _nj10;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement)
                            {
                              bool bgotonextstatement = true;
                              do
                              {
                                if (1)
                                {
                                  bgotonextstatement = false;
                                  continue;  // branch miss [j8, j10]
                                }
                              } while (0);
                              if (bgotonextstatement) {}
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j8array[1], cj8array[1], sj8array[1];
                        bool j8valid[1] = { false };
                        _nj8 = 1;
                        CheckValue<IkReal> x139 = IKPowWithIntegerCheck(cj9, -1);
                        if (!x139.valid)
                        {
                          continue;
                        }
                        IkReal x138 = x139.value;
                        CheckValue<IkReal> x140 = IKPowWithIntegerCheck(new_r02, -1);
                        if (!x140.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x141 = IKPowWithIntegerCheck(x138, -2);
                        if (!x141.valid)
                        {
                          continue;
                        }
                        if (IKabs((x138 * (x140.value) * (((x141.value) + (((-1.0) * (new_r12 * new_r12))))))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(((-1.0) * new_r12 * x138)) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(IKsqr((x138 * (x140.value) * (((x141.value) + (((-1.0) * (new_r12 * new_r12))))))) +
                                  IKsqr(((-1.0) * new_r12 * x138)) - 1) <= IKFAST_SINCOS_THRESH)
                          continue;
                        j8array[0] =
                            IKatan2((x138 * (x140.value) * (((x141.value) + (((-1.0) * (new_r12 * new_r12)))))),
                                    ((-1.0) * new_r12 * x138));
                        sj8array[0] = IKsin(j8array[0]);
                        cj8array[0] = IKcos(j8array[0]);
                        if (j8array[0] > IKPI)
                        {
                          j8array[0] -= IK2PI;
                        }
                        else if (j8array[0] < -IKPI)
                        {
                          j8array[0] += IK2PI;
                        }
                        j8valid[0] = true;
                        for (int ij8 = 0; ij8 < 1; ++ij8)
                        {
                          if (!j8valid[ij8])
                          {
                            continue;
                          }
                          _ij8[0] = ij8;
                          _ij8[1] = -1;
                          for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                          {
                            if (j8valid[iij8] && IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                            {
                              j8valid[iij8] = false;
                              _ij8[1] = iij8;
                              break;
                            }
                          }
                          j8 = j8array[ij8];
                          cj8 = cj8array[ij8];
                          sj8 = sj8array[ij8];
                          {
                            IkReal evalcond[8];
                            IkReal x142 = IKsin(j8);
                            IkReal x143 = IKcos(j8);
                            IkReal x144 = ((1.0) * x142);
                            IkReal x145 = (cj9 * x143);
                            IkReal x146 = (new_r12 * x143);
                            evalcond[0] = (x145 + new_r12);
                            evalcond[1] = ((((-1.0) * cj9 * x144)) + new_r02);
                            evalcond[2] = (((new_r12 * x142)) + ((new_r02 * x143)));
                            evalcond[3] = (cj9 + (((-1.0) * new_r02 * x144)) + x146);
                            evalcond[4] = (((new_r20 * sj9)) + ((new_r10 * x145)) + (((-1.0) * cj9 * new_r00 * x144)));
                            evalcond[5] = ((((-1.0) * cj9 * new_r01 * x144)) + ((new_r11 * x145)) + ((new_r21 * sj9)));
                            evalcond[6] = (((cj9 * new_r22)) + ((new_r02 * sj9 * x142)) + (((-1.0) * sj9 * x146)));
                            evalcond[7] =
                                ((1.0) + ((new_r12 * x145)) + (((-1.0) * cj9 * new_r02 * x144)) + ((new_r22 * sj9)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          {
                            IkReal j10eval[3];
                            j10eval[0] = cj9;
                            j10eval[1] = IKsign(cj9);
                            j10eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                            if (IKabs(j10eval[0]) < 0.0000010000000000 || IKabs(j10eval[1]) < 0.0000010000000000 ||
                                IKabs(j10eval[2]) < 0.0000010000000000)
                            {
                              {
                                IkReal j10eval[2];
                                j10eval[0] = cj9;
                                j10eval[1] = sj8;
                                if (IKabs(j10eval[0]) < 0.0000010000000000 || IKabs(j10eval[1]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal j10eval[3];
                                    j10eval[0] = cj9;
                                    j10eval[1] = sj8;
                                    j10eval[2] = sj9;
                                    if (IKabs(j10eval[0]) < 0.0000010000000000 ||
                                        IKabs(j10eval[1]) < 0.0000010000000000 ||
                                        IKabs(j10eval[2]) < 0.0000010000000000)
                                    {
                                      {
                                        IkReal evalcond[5];
                                        bool bgotonextstatement = true;
                                        do
                                        {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j9)))),
                                                       6.28318530717959)));
                                          evalcond[1] = new_r12;
                                          evalcond[2] = new_r02;
                                          evalcond[3] = new_r20;
                                          evalcond[4] = new_r21;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                              IKabs(evalcond[3]) < 0.0000050000000000 &&
                                              IKabs(evalcond[4]) < 0.0000050000000000)
                                          {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j10array[1], cj10array[1], sj10array[1];
                                              bool j10valid[1] = { false };
                                              _nj10 = 1;
                                              IkReal x147 = ((1.0) * cj8);
                                              if (IKabs(((((-1.0) * new_r01 * x147)) + (((-1.0) * new_r11 * sj8)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs((((new_r01 * sj8)) + (((-1.0) * new_r11 * x147)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((((-1.0) * new_r01 * x147)) +
                                                               (((-1.0) * new_r11 * sj8)))) +
                                                        IKsqr((((new_r01 * sj8)) + (((-1.0) * new_r11 * x147)))) - 1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j10array[0] =
                                                  IKatan2(((((-1.0) * new_r01 * x147)) + (((-1.0) * new_r11 * sj8))),
                                                          (((new_r01 * sj8)) + (((-1.0) * new_r11 * x147))));
                                              sj10array[0] = IKsin(j10array[0]);
                                              cj10array[0] = IKcos(j10array[0]);
                                              if (j10array[0] > IKPI)
                                              {
                                                j10array[0] -= IK2PI;
                                              }
                                              else if (j10array[0] < -IKPI)
                                              {
                                                j10array[0] += IK2PI;
                                              }
                                              j10valid[0] = true;
                                              for (int ij10 = 0; ij10 < 1; ++ij10)
                                              {
                                                if (!j10valid[ij10])
                                                {
                                                  continue;
                                                }
                                                _ij10[0] = ij10;
                                                _ij10[1] = -1;
                                                for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                {
                                                  if (j10valid[iij10] &&
                                                      IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                          IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j10valid[iij10] = false;
                                                    _ij10[1] = iij10;
                                                    break;
                                                  }
                                                }
                                                j10 = j10array[ij10];
                                                cj10 = cj10array[ij10];
                                                sj10 = sj10array[ij10];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x148 = IKsin(j10);
                                                  IkReal x149 = IKcos(j10);
                                                  IkReal x150 = ((1.0) * sj8);
                                                  IkReal x151 = (cj8 * x148);
                                                  IkReal x152 = ((1.0) * x149);
                                                  IkReal x153 = (sj8 * x148);
                                                  IkReal x154 = (x149 * x150);
                                                  evalcond[0] = (((new_r11 * sj8)) + x148 + ((cj8 * new_r01)));
                                                  evalcond[1] =
                                                      (x148 + ((cj8 * new_r10)) + (((-1.0) * new_r00 * x150)));
                                                  evalcond[2] =
                                                      (x149 + ((cj8 * new_r11)) + (((-1.0) * new_r01 * x150)));
                                                  evalcond[3] =
                                                      ((((-1.0) * x152)) + ((new_r10 * sj8)) + ((cj8 * new_r00)));
                                                  evalcond[4] = (x153 + ((cj8 * x149)) + new_r11);
                                                  evalcond[5] = ((((-1.0) * x154)) + x151 + new_r01);
                                                  evalcond[6] = ((((-1.0) * x154)) + x151 + new_r10);
                                                  evalcond[7] =
                                                      ((((-1.0) * cj8 * x152)) + (((-1.0) * x148 * x150)) + new_r00);
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j2;
                                                  vinfos[0].indices[0] = _ij2[0];
                                                  vinfos[0].indices[1] = _ij2[1];
                                                  vinfos[0].maxsolutions = _nj2;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j3;
                                                  vinfos[1].indices[0] = _ij3[0];
                                                  vinfos[1].indices[1] = _ij3[1];
                                                  vinfos[1].maxsolutions = _nj3;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j4;
                                                  vinfos[2].indices[0] = _ij4[0];
                                                  vinfos[2].indices[1] = _ij4[1];
                                                  vinfos[2].maxsolutions = _nj4;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j5;
                                                  vinfos[3].indices[0] = _ij5[0];
                                                  vinfos[3].indices[1] = _ij5[1];
                                                  vinfos[3].maxsolutions = _nj5;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j8;
                                                  vinfos[4].indices[0] = _ij8[0];
                                                  vinfos[4].indices[1] = _ij8[1];
                                                  vinfos[4].maxsolutions = _nj8;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j9;
                                                  vinfos[5].indices[0] = _ij9[0];
                                                  vinfos[5].indices[1] = _ij9[1];
                                                  vinfos[5].maxsolutions = _nj9;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j10;
                                                  vinfos[6].indices[0] = _ij10[0];
                                                  vinfos[6].indices[1] = _ij10[1];
                                                  vinfos[6].maxsolutions = _nj10;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement)
                                        {
                                          bool bgotonextstatement = true;
                                          do
                                          {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j9)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r12;
                                            evalcond[2] = new_r02;
                                            evalcond[3] = new_r20;
                                            evalcond[4] = new_r21;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                IKabs(evalcond[4]) < 0.0000050000000000)
                                            {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                bool j10valid[1] = { false };
                                                _nj10 = 1;
                                                IkReal x155 = ((1.0) * new_r01);
                                                if (IKabs(((((-1.0) * cj8 * x155)) + (((-1.0) * new_r11 * sj8)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((((-1.0) * sj8 * x155)) + ((cj8 * new_r11)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((((-1.0) * cj8 * x155)) + (((-1.0) * new_r11 * sj8)))) +
                                                          IKsqr(((((-1.0) * sj8 * x155)) + ((cj8 * new_r11)))) - 1) <=
                                                        IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j10array[0] =
                                                    IKatan2(((((-1.0) * cj8 * x155)) + (((-1.0) * new_r11 * sj8))),
                                                            ((((-1.0) * sj8 * x155)) + ((cj8 * new_r11))));
                                                sj10array[0] = IKsin(j10array[0]);
                                                cj10array[0] = IKcos(j10array[0]);
                                                if (j10array[0] > IKPI)
                                                {
                                                  j10array[0] -= IK2PI;
                                                }
                                                else if (j10array[0] < -IKPI)
                                                {
                                                  j10array[0] += IK2PI;
                                                }
                                                j10valid[0] = true;
                                                for (int ij10 = 0; ij10 < 1; ++ij10)
                                                {
                                                  if (!j10valid[ij10])
                                                  {
                                                    continue;
                                                  }
                                                  _ij10[0] = ij10;
                                                  _ij10[1] = -1;
                                                  for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                  {
                                                    if (j10valid[iij10] &&
                                                        IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                            IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j10valid[iij10] = false;
                                                      _ij10[1] = iij10;
                                                      break;
                                                    }
                                                  }
                                                  j10 = j10array[ij10];
                                                  cj10 = cj10array[ij10];
                                                  sj10 = sj10array[ij10];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x156 = IKcos(j10);
                                                    IkReal x157 = IKsin(j10);
                                                    IkReal x158 = ((1.0) * sj8);
                                                    IkReal x159 = ((1.0) * x156);
                                                    IkReal x160 = (sj8 * x157);
                                                    IkReal x161 = (cj8 * x157);
                                                    IkReal x162 = (cj8 * x159);
                                                    evalcond[0] = (((new_r11 * sj8)) + x157 + ((cj8 * new_r01)));
                                                    evalcond[1] =
                                                        ((((-1.0) * x159)) + ((new_r10 * sj8)) + ((cj8 * new_r00)));
                                                    evalcond[2] = (((sj8 * x156)) + x161 + new_r01);
                                                    evalcond[3] = ((((-1.0) * x162)) + x160 + new_r11);
                                                    evalcond[4] = (((cj8 * new_r10)) + (((-1.0) * x157)) +
                                                                   (((-1.0) * new_r00 * x158)));
                                                    evalcond[5] = ((((-1.0) * x159)) + ((cj8 * new_r11)) +
                                                                   (((-1.0) * new_r01 * x158)));
                                                    evalcond[6] = ((((-1.0) * x162)) + x160 + new_r00);
                                                    evalcond[7] =
                                                        ((((-1.0) * x161)) + (((-1.0) * x156 * x158)) + new_r10);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 17;
                                                    vinfos[0].foffset = j2;
                                                    vinfos[0].indices[0] = _ij2[0];
                                                    vinfos[0].indices[1] = _ij2[1];
                                                    vinfos[0].maxsolutions = _nj2;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j3;
                                                    vinfos[1].indices[0] = _ij3[0];
                                                    vinfos[1].indices[1] = _ij3[1];
                                                    vinfos[1].maxsolutions = _nj3;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j4;
                                                    vinfos[2].indices[0] = _ij4[0];
                                                    vinfos[2].indices[1] = _ij4[1];
                                                    vinfos[2].maxsolutions = _nj4;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j5;
                                                    vinfos[3].indices[0] = _ij5[0];
                                                    vinfos[3].indices[1] = _ij5[1];
                                                    vinfos[3].maxsolutions = _nj5;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j8;
                                                    vinfos[4].indices[0] = _ij8[0];
                                                    vinfos[4].indices[1] = _ij8[1];
                                                    vinfos[4].maxsolutions = _nj8;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j9;
                                                    vinfos[5].indices[0] = _ij9[0];
                                                    vinfos[5].indices[1] = _ij9[1];
                                                    vinfos[5].maxsolutions = _nj9;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j10;
                                                    vinfos[6].indices[0] = _ij10[0];
                                                    vinfos[6].indices[1] = _ij10[1];
                                                    vinfos[6].maxsolutions = _nj10;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement)
                                          {
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(j8))), 6.28318530717959)));
                                              evalcond[1] = new_r02;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000)
                                              {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j10array[1], cj10array[1], sj10array[1];
                                                  bool j10valid[1] = { false };
                                                  _nj10 = 1;
                                                  if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j10array[0] = IKatan2(((-1.0) * new_r01), new_r00);
                                                  sj10array[0] = IKsin(j10array[0]);
                                                  cj10array[0] = IKcos(j10array[0]);
                                                  if (j10array[0] > IKPI)
                                                  {
                                                    j10array[0] -= IK2PI;
                                                  }
                                                  else if (j10array[0] < -IKPI)
                                                  {
                                                    j10array[0] += IK2PI;
                                                  }
                                                  j10valid[0] = true;
                                                  for (int ij10 = 0; ij10 < 1; ++ij10)
                                                  {
                                                    if (!j10valid[ij10])
                                                    {
                                                      continue;
                                                    }
                                                    _ij10[0] = ij10;
                                                    _ij10[1] = -1;
                                                    for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                    {
                                                      if (j10valid[iij10] &&
                                                          IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                              IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j10valid[iij10] = false;
                                                        _ij10[1] = iij10;
                                                        break;
                                                      }
                                                    }
                                                    j10 = j10array[ij10];
                                                    cj10 = cj10array[ij10];
                                                    sj10 = sj10array[ij10];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x163 = IKcos(j10);
                                                      IkReal x164 = IKsin(j10);
                                                      IkReal x165 = ((1.0) * sj9);
                                                      IkReal x166 = ((1.0) * x163);
                                                      IkReal x167 = ((1.0) * x164);
                                                      evalcond[0] = (x164 + new_r01);
                                                      evalcond[1] = ((((-1.0) * x166)) + new_r00);
                                                      evalcond[2] = (((sj9 * x163)) + new_r11);
                                                      evalcond[3] = (((sj9 * x164)) + new_r10);
                                                      evalcond[4] = ((((-1.0) * cj9 * x167)) + new_r20);
                                                      evalcond[5] = ((((-1.0) * cj9 * x166)) + new_r21);
                                                      evalcond[6] = ((((-1.0) * x167)) + ((cj9 * new_r20)) +
                                                                     (((-1.0) * new_r10 * x165)));
                                                      evalcond[7] = ((((-1.0) * x166)) + ((cj9 * new_r21)) +
                                                                     (((-1.0) * new_r11 * x165)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 17;
                                                      vinfos[0].foffset = j2;
                                                      vinfos[0].indices[0] = _ij2[0];
                                                      vinfos[0].indices[1] = _ij2[1];
                                                      vinfos[0].maxsolutions = _nj2;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j3;
                                                      vinfos[1].indices[0] = _ij3[0];
                                                      vinfos[1].indices[1] = _ij3[1];
                                                      vinfos[1].maxsolutions = _nj3;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j4;
                                                      vinfos[2].indices[0] = _ij4[0];
                                                      vinfos[2].indices[1] = _ij4[1];
                                                      vinfos[2].maxsolutions = _nj4;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j5;
                                                      vinfos[3].indices[0] = _ij5[0];
                                                      vinfos[3].indices[1] = _ij5[1];
                                                      vinfos[3].maxsolutions = _nj5;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j8;
                                                      vinfos[4].indices[0] = _ij8[0];
                                                      vinfos[4].indices[1] = _ij8[1];
                                                      vinfos[4].maxsolutions = _nj8;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j9;
                                                      vinfos[5].indices[0] = _ij9[0];
                                                      vinfos[5].indices[1] = _ij9[1];
                                                      vinfos[5].maxsolutions = _nj9;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j10;
                                                      vinfos[6].indices[0] = _ij10[0];
                                                      vinfos[6].indices[1] = _ij10[1];
                                                      vinfos[6].maxsolutions = _nj10;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j8)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r02;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                    bool j10valid[1] = { false };
                                                    _nj10 = 1;
                                                    if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r00)) - 1) <=
                                                            IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j10array[0] = IKatan2(new_r01, ((-1.0) * new_r00));
                                                    sj10array[0] = IKsin(j10array[0]);
                                                    cj10array[0] = IKcos(j10array[0]);
                                                    if (j10array[0] > IKPI)
                                                    {
                                                      j10array[0] -= IK2PI;
                                                    }
                                                    else if (j10array[0] < -IKPI)
                                                    {
                                                      j10array[0] += IK2PI;
                                                    }
                                                    j10valid[0] = true;
                                                    for (int ij10 = 0; ij10 < 1; ++ij10)
                                                    {
                                                      if (!j10valid[ij10])
                                                      {
                                                        continue;
                                                      }
                                                      _ij10[0] = ij10;
                                                      _ij10[1] = -1;
                                                      for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                      {
                                                        if (j10valid[iij10] &&
                                                            IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j10valid[iij10] = false;
                                                          _ij10[1] = iij10;
                                                          break;
                                                        }
                                                      }
                                                      j10 = j10array[ij10];
                                                      cj10 = cj10array[ij10];
                                                      sj10 = sj10array[ij10];
                                                      {
                                                        IkReal evalcond[8];
                                                        IkReal x168 = IKsin(j10);
                                                        IkReal x169 = IKcos(j10);
                                                        IkReal x170 = ((1.0) * x169);
                                                        IkReal x171 = ((1.0) * x168);
                                                        evalcond[0] = (x168 + (((-1.0) * new_r01)));
                                                        evalcond[1] = ((((-1.0) * cj9 * x171)) + new_r20);
                                                        evalcond[2] = ((((-1.0) * cj9 * x170)) + new_r21);
                                                        evalcond[3] = (new_r11 + (((-1.0) * sj9 * x170)));
                                                        evalcond[4] = ((((-1.0) * x170)) + (((-1.0) * new_r00)));
                                                        evalcond[5] = (((sj9 * x168)) + (((-1.0) * new_r10)));
                                                        evalcond[6] =
                                                            (((cj9 * new_r20)) + ((new_r10 * sj9)) + (((-1.0) * x171)));
                                                        evalcond[7] =
                                                            (((cj9 * new_r21)) + (((-1.0) * x170)) + ((new_r11 * sj9)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 17;
                                                        vinfos[0].foffset = j2;
                                                        vinfos[0].indices[0] = _ij2[0];
                                                        vinfos[0].indices[1] = _ij2[1];
                                                        vinfos[0].maxsolutions = _nj2;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j3;
                                                        vinfos[1].indices[0] = _ij3[0];
                                                        vinfos[1].indices[1] = _ij3[1];
                                                        vinfos[1].maxsolutions = _nj3;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j4;
                                                        vinfos[2].indices[0] = _ij4[0];
                                                        vinfos[2].indices[1] = _ij4[1];
                                                        vinfos[2].maxsolutions = _nj4;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j5;
                                                        vinfos[3].indices[0] = _ij5[0];
                                                        vinfos[3].indices[1] = _ij5[1];
                                                        vinfos[3].maxsolutions = _nj5;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j8;
                                                        vinfos[4].indices[0] = _ij8[0];
                                                        vinfos[4].indices[1] = _ij8[1];
                                                        vinfos[4].maxsolutions = _nj8;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j9;
                                                        vinfos[5].indices[0] = _ij9[0];
                                                        vinfos[5].indices[1] = _ij9[1];
                                                        vinfos[5].maxsolutions = _nj9;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j10;
                                                        vinfos[6].indices[0] = _ij10[0];
                                                        vinfos[6].indices[1] = _ij10[1];
                                                        vinfos[6].maxsolutions = _nj10;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(j9))), 6.28318530717959)));
                                                  evalcond[1] = new_r22;
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[1]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j10array[1], cj10array[1], sj10array[1];
                                                      bool j10valid[1] = { false };
                                                      _nj10 = 1;
                                                      if (IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(IKsqr(new_r20) + IKsqr(new_r21) - 1) <=
                                                              IKFAST_SINCOS_THRESH)
                                                        continue;
                                                      j10array[0] = IKatan2(new_r20, new_r21);
                                                      sj10array[0] = IKsin(j10array[0]);
                                                      cj10array[0] = IKcos(j10array[0]);
                                                      if (j10array[0] > IKPI)
                                                      {
                                                        j10array[0] -= IK2PI;
                                                      }
                                                      else if (j10array[0] < -IKPI)
                                                      {
                                                        j10array[0] += IK2PI;
                                                      }
                                                      j10valid[0] = true;
                                                      for (int ij10 = 0; ij10 < 1; ++ij10)
                                                      {
                                                        if (!j10valid[ij10])
                                                        {
                                                          continue;
                                                        }
                                                        _ij10[0] = ij10;
                                                        _ij10[1] = -1;
                                                        for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                        {
                                                          if (j10valid[iij10] &&
                                                              IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                  IKFAST_SOLUTION_THRESH)
                                                          {
                                                            j10valid[iij10] = false;
                                                            _ij10[1] = iij10;
                                                            break;
                                                          }
                                                        }
                                                        j10 = j10array[ij10];
                                                        cj10 = cj10array[ij10];
                                                        sj10 = sj10array[ij10];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x172 = IKsin(j10);
                                                          IkReal x173 = IKcos(j10);
                                                          IkReal x174 = ((1.0) * x173);
                                                          evalcond[0] = ((((-1.0) * x172)) + new_r20);
                                                          evalcond[1] = ((((-1.0) * x174)) + new_r21);
                                                          evalcond[2] = (((sj8 * x172)) + new_r11);
                                                          evalcond[3] = (new_r01 + ((cj8 * x172)));
                                                          evalcond[4] = ((((-1.0) * sj8 * x174)) + new_r10);
                                                          evalcond[5] = ((((-1.0) * cj8 * x174)) + new_r00);
                                                          evalcond[6] = (((new_r11 * sj8)) + x172 + ((cj8 * new_r01)));
                                                          evalcond[7] = (((new_r10 * sj8)) + (((-1.0) * x174)) +
                                                                         ((cj8 * new_r00)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                          {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 17;
                                                          vinfos[0].foffset = j2;
                                                          vinfos[0].indices[0] = _ij2[0];
                                                          vinfos[0].indices[1] = _ij2[1];
                                                          vinfos[0].maxsolutions = _nj2;
                                                          vinfos[1].jointtype = 17;
                                                          vinfos[1].foffset = j3;
                                                          vinfos[1].indices[0] = _ij3[0];
                                                          vinfos[1].indices[1] = _ij3[1];
                                                          vinfos[1].maxsolutions = _nj3;
                                                          vinfos[2].jointtype = 17;
                                                          vinfos[2].foffset = j4;
                                                          vinfos[2].indices[0] = _ij4[0];
                                                          vinfos[2].indices[1] = _ij4[1];
                                                          vinfos[2].maxsolutions = _nj4;
                                                          vinfos[3].jointtype = 17;
                                                          vinfos[3].foffset = j5;
                                                          vinfos[3].indices[0] = _ij5[0];
                                                          vinfos[3].indices[1] = _ij5[1];
                                                          vinfos[3].maxsolutions = _nj5;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j8;
                                                          vinfos[4].indices[0] = _ij8[0];
                                                          vinfos[4].indices[1] = _ij8[1];
                                                          vinfos[4].maxsolutions = _nj8;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j9;
                                                          vinfos[5].indices[0] = _ij9[0];
                                                          vinfos[5].indices[1] = _ij9[1];
                                                          vinfos[5].maxsolutions = _nj9;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j10;
                                                          vinfos[6].indices[0] = _ij10[0];
                                                          vinfos[6].indices[1] = _ij10[1];
                                                          vinfos[6].maxsolutions = _nj10;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j9)))),
                                                                           6.28318530717959)));
                                                    evalcond[1] = new_r22;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[1]) < 0.0000050000000000)
                                                    {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                                        bool j10valid[1] = { false };
                                                        _nj10 = 1;
                                                        if (IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(IKsqr(((-1.0) * new_r20)) +
                                                                  IKsqr(((-1.0) * new_r21)) - 1) <= IKFAST_SINCOS_THRESH)
                                                          continue;
                                                        j10array[0] = IKatan2(((-1.0) * new_r20), ((-1.0) * new_r21));
                                                        sj10array[0] = IKsin(j10array[0]);
                                                        cj10array[0] = IKcos(j10array[0]);
                                                        if (j10array[0] > IKPI)
                                                        {
                                                          j10array[0] -= IK2PI;
                                                        }
                                                        else if (j10array[0] < -IKPI)
                                                        {
                                                          j10array[0] += IK2PI;
                                                        }
                                                        j10valid[0] = true;
                                                        for (int ij10 = 0; ij10 < 1; ++ij10)
                                                        {
                                                          if (!j10valid[ij10])
                                                          {
                                                            continue;
                                                          }
                                                          _ij10[0] = ij10;
                                                          _ij10[1] = -1;
                                                          for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                          {
                                                            if (j10valid[iij10] &&
                                                                IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j10valid[iij10] = false;
                                                              _ij10[1] = iij10;
                                                              break;
                                                            }
                                                          }
                                                          j10 = j10array[ij10];
                                                          cj10 = cj10array[ij10];
                                                          sj10 = sj10array[ij10];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x175 = IKsin(j10);
                                                            IkReal x176 = IKcos(j10);
                                                            IkReal x177 = ((1.0) * x176);
                                                            evalcond[0] = (x175 + new_r20);
                                                            evalcond[1] = (x176 + new_r21);
                                                            evalcond[2] = (((sj8 * x175)) + new_r11);
                                                            evalcond[3] = (new_r01 + ((cj8 * x175)));
                                                            evalcond[4] = ((((-1.0) * sj8 * x177)) + new_r10);
                                                            evalcond[5] = ((((-1.0) * cj8 * x177)) + new_r00);
                                                            evalcond[6] =
                                                                (((new_r11 * sj8)) + x175 + ((cj8 * new_r01)));
                                                            evalcond[7] = (((new_r10 * sj8)) + (((-1.0) * x177)) +
                                                                           ((cj8 * new_r00)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 17;
                                                            vinfos[0].foffset = j2;
                                                            vinfos[0].indices[0] = _ij2[0];
                                                            vinfos[0].indices[1] = _ij2[1];
                                                            vinfos[0].maxsolutions = _nj2;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j3;
                                                            vinfos[1].indices[0] = _ij3[0];
                                                            vinfos[1].indices[1] = _ij3[1];
                                                            vinfos[1].maxsolutions = _nj3;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j4;
                                                            vinfos[2].indices[0] = _ij4[0];
                                                            vinfos[2].indices[1] = _ij4[1];
                                                            vinfos[2].maxsolutions = _nj4;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j5;
                                                            vinfos[3].indices[0] = _ij5[0];
                                                            vinfos[3].indices[1] = _ij5[1];
                                                            vinfos[3].maxsolutions = _nj5;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j8;
                                                            vinfos[4].indices[0] = _ij8[0];
                                                            vinfos[4].indices[1] = _ij8[1];
                                                            vinfos[4].maxsolutions = _nj8;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j9;
                                                            vinfos[5].indices[0] = _ij9[0];
                                                            vinfos[5].indices[1] = _ij9[1];
                                                            vinfos[5].maxsolutions = _nj9;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j10;
                                                            vinfos[6].indices[0] = _ij10[0];
                                                            vinfos[6].indices[1] = _ij10[1];
                                                            vinfos[6].maxsolutions = _nj10;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement)
                                                  {
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j10eval[1];
                                                          new_r21 = 0;
                                                          new_r20 = 0;
                                                          new_r02 = 0;
                                                          new_r12 = 0;
                                                          j10eval[0] = 1.0;
                                                          if (IKabs(j10eval[0]) < 0.0000000100000000)
                                                          {
                                                            continue;  // no branches [j10]
                                                          }
                                                          else
                                                          {
                                                            IkReal op[2 + 1], zeror[2];
                                                            int numroots;
                                                            op[0] = 1.0;
                                                            op[1] = 0;
                                                            op[2] = -1.0;
                                                            polyroots2(op, zeror, numroots);
                                                            IkReal j10array[2], cj10array[2], sj10array[2],
                                                                tempj10array[1];
                                                            int numsolutions = 0;
                                                            for (int ij10 = 0; ij10 < numroots; ++ij10)
                                                            {
                                                              IkReal htj10 = zeror[ij10];
                                                              tempj10array[0] = ((2.0) * (atan(htj10)));
                                                              for (int kj10 = 0; kj10 < 1; ++kj10)
                                                              {
                                                                j10array[numsolutions] = tempj10array[kj10];
                                                                if (j10array[numsolutions] > IKPI)
                                                                {
                                                                  j10array[numsolutions] -= IK2PI;
                                                                }
                                                                else if (j10array[numsolutions] < -IKPI)
                                                                {
                                                                  j10array[numsolutions] += IK2PI;
                                                                }
                                                                sj10array[numsolutions] = IKsin(j10array[numsolutions]);
                                                                cj10array[numsolutions] = IKcos(j10array[numsolutions]);
                                                                numsolutions++;
                                                              }
                                                            }
                                                            bool j10valid[2] = { true, true };
                                                            _nj10 = 2;
                                                            for (int ij10 = 0; ij10 < numsolutions; ++ij10)
                                                            {
                                                              if (!j10valid[ij10])
                                                              {
                                                                continue;
                                                              }
                                                              j10 = j10array[ij10];
                                                              cj10 = cj10array[ij10];
                                                              sj10 = sj10array[ij10];
                                                              htj10 = IKtan(j10 / 2);

                                                              _ij10[0] = ij10;
                                                              _ij10[1] = -1;
                                                              for (int iij10 = ij10 + 1; iij10 < numsolutions; ++iij10)
                                                              {
                                                                if (j10valid[iij10] &&
                                                                    IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j10valid[iij10] = false;
                                                                  _ij10[1] = iij10;
                                                                  break;
                                                                }
                                                              }
                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j2;
                                                                vinfos[0].indices[0] = _ij2[0];
                                                                vinfos[0].indices[1] = _ij2[1];
                                                                vinfos[0].maxsolutions = _nj2;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j3;
                                                                vinfos[1].indices[0] = _ij3[0];
                                                                vinfos[1].indices[1] = _ij3[1];
                                                                vinfos[1].maxsolutions = _nj3;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j4;
                                                                vinfos[2].indices[0] = _ij4[0];
                                                                vinfos[2].indices[1] = _ij4[1];
                                                                vinfos[2].maxsolutions = _nj4;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j5;
                                                                vinfos[3].indices[0] = _ij5[0];
                                                                vinfos[3].indices[1] = _ij5[1];
                                                                vinfos[3].maxsolutions = _nj5;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j8;
                                                                vinfos[4].indices[0] = _ij8[0];
                                                                vinfos[4].indices[1] = _ij8[1];
                                                                vinfos[4].maxsolutions = _nj8;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j9;
                                                                vinfos[5].indices[0] = _ij9[0];
                                                                vinfos[5].indices[1] = _ij9[1];
                                                                vinfos[5].maxsolutions = _nj9;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j10;
                                                                vinfos[6].indices[0] = _ij10[0];
                                                                vinfos[6].indices[1] = _ij10[1];
                                                                vinfos[6].maxsolutions = _nj10;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        if (1)
                                                        {
                                                          bgotonextstatement = false;
                                                          continue;  // branch miss [j10]
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {}
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      {
                                        IkReal j10array[1], cj10array[1], sj10array[1];
                                        bool j10valid[1] = { false };
                                        _nj10 = 1;
                                        CheckValue<IkReal> x179 = IKPowWithIntegerCheck(cj9, -1);
                                        if (!x179.valid)
                                        {
                                          continue;
                                        }
                                        IkReal x178 = x179.value;
                                        CheckValue<IkReal> x180 = IKPowWithIntegerCheck(sj8, -1);
                                        if (!x180.valid)
                                        {
                                          continue;
                                        }
                                        CheckValue<IkReal> x181 = IKPowWithIntegerCheck(sj9, -1);
                                        if (!x181.valid)
                                        {
                                          continue;
                                        }
                                        if (IKabs((new_r20 * x178)) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs((x178 * (x180.value) * (x181.value) *
                                                   ((((cj8 * new_r20)) + ((cj9 * new_r01)))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr((new_r20 * x178)) +
                                                  IKsqr((x178 * (x180.value) * (x181.value) *
                                                         ((((cj8 * new_r20)) + ((cj9 * new_r01)))))) -
                                                  1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j10array[0] =
                                            IKatan2((new_r20 * x178), (x178 * (x180.value) * (x181.value) *
                                                                       ((((cj8 * new_r20)) + ((cj9 * new_r01))))));
                                        sj10array[0] = IKsin(j10array[0]);
                                        cj10array[0] = IKcos(j10array[0]);
                                        if (j10array[0] > IKPI)
                                        {
                                          j10array[0] -= IK2PI;
                                        }
                                        else if (j10array[0] < -IKPI)
                                        {
                                          j10array[0] += IK2PI;
                                        }
                                        j10valid[0] = true;
                                        for (int ij10 = 0; ij10 < 1; ++ij10)
                                        {
                                          if (!j10valid[ij10])
                                          {
                                            continue;
                                          }
                                          _ij10[0] = ij10;
                                          _ij10[1] = -1;
                                          for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                          {
                                            if (j10valid[iij10] &&
                                                IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                            {
                                              j10valid[iij10] = false;
                                              _ij10[1] = iij10;
                                              break;
                                            }
                                          }
                                          j10 = j10array[ij10];
                                          cj10 = cj10array[ij10];
                                          sj10 = sj10array[ij10];
                                          {
                                            IkReal evalcond[12];
                                            IkReal x182 = IKsin(j10);
                                            IkReal x183 = IKcos(j10);
                                            IkReal x184 = (new_r01 * sj8);
                                            IkReal x185 = (cj8 * new_r10);
                                            IkReal x186 = (cj8 * new_r11);
                                            IkReal x187 = (new_r00 * sj8);
                                            IkReal x188 = ((1.0) * sj9);
                                            IkReal x189 = (sj8 * sj9);
                                            IkReal x190 = ((1.0) * x183);
                                            IkReal x191 = (cj8 * x182);
                                            IkReal x192 = ((1.0) * x182);
                                            IkReal x193 = (sj9 * x183);
                                            evalcond[0] = (new_r20 + (((-1.0) * cj9 * x192)));
                                            evalcond[1] = (new_r21 + (((-1.0) * cj9 * x190)));
                                            evalcond[2] = (((new_r11 * sj8)) + x182 + ((cj8 * new_r01)));
                                            evalcond[3] = (((new_r10 * sj8)) + (((-1.0) * x190)) + ((cj8 * new_r00)));
                                            evalcond[4] = (((sj8 * x182)) + ((cj8 * x193)) + new_r11);
                                            evalcond[5] = ((((-1.0) * x187)) + x185 + ((sj9 * x182)));
                                            evalcond[6] = ((((-1.0) * x184)) + x193 + x186);
                                            evalcond[7] = (x191 + (((-1.0) * sj8 * x183 * x188)) + new_r01);
                                            evalcond[8] = (((sj9 * x191)) + new_r10 + (((-1.0) * sj8 * x190)));
                                            evalcond[9] =
                                                ((((-1.0) * sj8 * x182 * x188)) + new_r00 + (((-1.0) * cj8 * x190)));
                                            evalcond[10] = (((cj9 * new_r20)) + (((-1.0) * x192)) +
                                                            (((-1.0) * x185 * x188)) + ((sj9 * x187)));
                                            evalcond[11] = (((cj9 * new_r21)) + (((-1.0) * x186 * x188)) +
                                                            (((-1.0) * x190)) + ((sj9 * x184)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                            {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                            vinfos[0].jointtype = 17;
                                            vinfos[0].foffset = j2;
                                            vinfos[0].indices[0] = _ij2[0];
                                            vinfos[0].indices[1] = _ij2[1];
                                            vinfos[0].maxsolutions = _nj2;
                                            vinfos[1].jointtype = 17;
                                            vinfos[1].foffset = j3;
                                            vinfos[1].indices[0] = _ij3[0];
                                            vinfos[1].indices[1] = _ij3[1];
                                            vinfos[1].maxsolutions = _nj3;
                                            vinfos[2].jointtype = 17;
                                            vinfos[2].foffset = j4;
                                            vinfos[2].indices[0] = _ij4[0];
                                            vinfos[2].indices[1] = _ij4[1];
                                            vinfos[2].maxsolutions = _nj4;
                                            vinfos[3].jointtype = 17;
                                            vinfos[3].foffset = j5;
                                            vinfos[3].indices[0] = _ij5[0];
                                            vinfos[3].indices[1] = _ij5[1];
                                            vinfos[3].maxsolutions = _nj5;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j8;
                                            vinfos[4].indices[0] = _ij8[0];
                                            vinfos[4].indices[1] = _ij8[1];
                                            vinfos[4].maxsolutions = _nj8;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j9;
                                            vinfos[5].indices[0] = _ij9[0];
                                            vinfos[5].indices[1] = _ij9[1];
                                            vinfos[5].maxsolutions = _nj9;
                                            vinfos[6].jointtype = 1;
                                            vinfos[6].foffset = j10;
                                            vinfos[6].indices[0] = _ij10[0];
                                            vinfos[6].indices[1] = _ij10[1];
                                            vinfos[6].maxsolutions = _nj10;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                    bool j10valid[1] = { false };
                                    _nj10 = 1;
                                    CheckValue<IkReal> x195 = IKPowWithIntegerCheck(cj9, -1);
                                    if (!x195.valid)
                                    {
                                      continue;
                                    }
                                    IkReal x194 = x195.value;
                                    CheckValue<IkReal> x196 = IKPowWithIntegerCheck(sj8, -1);
                                    if (!x196.valid)
                                    {
                                      continue;
                                    }
                                    if (IKabs((x194 * (x196.value) *
                                               (((((-1.0) * cj8 * new_r21 * sj9)) + (((-1.0) * cj9 * new_r11)))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((new_r21 * x194)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(
                                            IKsqr((x194 * (x196.value) *
                                                   (((((-1.0) * cj8 * new_r21 * sj9)) + (((-1.0) * cj9 * new_r11)))))) +
                                            IKsqr((new_r21 * x194)) - 1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j10array[0] =
                                        IKatan2((x194 * (x196.value) *
                                                 (((((-1.0) * cj8 * new_r21 * sj9)) + (((-1.0) * cj9 * new_r11))))),
                                                (new_r21 * x194));
                                    sj10array[0] = IKsin(j10array[0]);
                                    cj10array[0] = IKcos(j10array[0]);
                                    if (j10array[0] > IKPI)
                                    {
                                      j10array[0] -= IK2PI;
                                    }
                                    else if (j10array[0] < -IKPI)
                                    {
                                      j10array[0] += IK2PI;
                                    }
                                    j10valid[0] = true;
                                    for (int ij10 = 0; ij10 < 1; ++ij10)
                                    {
                                      if (!j10valid[ij10])
                                      {
                                        continue;
                                      }
                                      _ij10[0] = ij10;
                                      _ij10[1] = -1;
                                      for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                      {
                                        if (j10valid[iij10] &&
                                            IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j10valid[iij10] = false;
                                          _ij10[1] = iij10;
                                          break;
                                        }
                                      }
                                      j10 = j10array[ij10];
                                      cj10 = cj10array[ij10];
                                      sj10 = sj10array[ij10];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x197 = IKsin(j10);
                                        IkReal x198 = IKcos(j10);
                                        IkReal x199 = (new_r01 * sj8);
                                        IkReal x200 = (cj8 * new_r10);
                                        IkReal x201 = (cj8 * new_r11);
                                        IkReal x202 = (new_r00 * sj8);
                                        IkReal x203 = ((1.0) * sj9);
                                        IkReal x204 = (sj8 * sj9);
                                        IkReal x205 = ((1.0) * x198);
                                        IkReal x206 = (cj8 * x197);
                                        IkReal x207 = ((1.0) * x197);
                                        IkReal x208 = (sj9 * x198);
                                        evalcond[0] = (new_r20 + (((-1.0) * cj9 * x207)));
                                        evalcond[1] = (new_r21 + (((-1.0) * cj9 * x205)));
                                        evalcond[2] = (((new_r11 * sj8)) + x197 + ((cj8 * new_r01)));
                                        evalcond[3] = (((new_r10 * sj8)) + (((-1.0) * x205)) + ((cj8 * new_r00)));
                                        evalcond[4] = (((cj8 * x208)) + ((sj8 * x197)) + new_r11);
                                        evalcond[5] = (x200 + ((sj9 * x197)) + (((-1.0) * x202)));
                                        evalcond[6] = ((((-1.0) * x199)) + x201 + x208);
                                        evalcond[7] = ((((-1.0) * sj8 * x198 * x203)) + x206 + new_r01);
                                        evalcond[8] = ((((-1.0) * sj8 * x205)) + ((sj9 * x206)) + new_r10);
                                        evalcond[9] =
                                            ((((-1.0) * cj8 * x205)) + new_r00 + (((-1.0) * sj8 * x197 * x203)));
                                        evalcond[10] = ((((-1.0) * x200 * x203)) + ((cj9 * new_r20)) +
                                                        (((-1.0) * x207)) + ((sj9 * x202)));
                                        evalcond[11] = ((((-1.0) * x201 * x203)) + ((cj9 * new_r21)) +
                                                        (((-1.0) * x205)) + ((sj9 * x199)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 17;
                                        vinfos[0].foffset = j2;
                                        vinfos[0].indices[0] = _ij2[0];
                                        vinfos[0].indices[1] = _ij2[1];
                                        vinfos[0].maxsolutions = _nj2;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j3;
                                        vinfos[1].indices[0] = _ij3[0];
                                        vinfos[1].indices[1] = _ij3[1];
                                        vinfos[1].maxsolutions = _nj3;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j4;
                                        vinfos[2].indices[0] = _ij4[0];
                                        vinfos[2].indices[1] = _ij4[1];
                                        vinfos[2].maxsolutions = _nj4;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j5;
                                        vinfos[3].indices[0] = _ij5[0];
                                        vinfos[3].indices[1] = _ij5[1];
                                        vinfos[3].maxsolutions = _nj5;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j8;
                                        vinfos[4].indices[0] = _ij8[0];
                                        vinfos[4].indices[1] = _ij8[1];
                                        vinfos[4].maxsolutions = _nj8;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j9;
                                        vinfos[5].indices[0] = _ij9[0];
                                        vinfos[5].indices[1] = _ij9[1];
                                        vinfos[5].maxsolutions = _nj9;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j10;
                                        vinfos[6].indices[0] = _ij10[0];
                                        vinfos[6].indices[1] = _ij10[1];
                                        vinfos[6].maxsolutions = _nj10;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j10array[1], cj10array[1], sj10array[1];
                                bool j10valid[1] = { false };
                                _nj10 = 1;
                                CheckValue<IkReal> x209 = IKPowWithIntegerCheck(IKsign(cj9), -1);
                                if (!x209.valid)
                                {
                                  continue;
                                }
                                CheckValue<IkReal> x210 =
                                    IKatan2WithCheck(IkReal(new_r20), IkReal(new_r21), IKFAST_ATAN2_MAGTHRESH);
                                if (!x210.valid)
                                {
                                  continue;
                                }
                                j10array[0] =
                                    ((-1.5707963267949) + (((1.5707963267949) * (x209.value))) + (x210.value));
                                sj10array[0] = IKsin(j10array[0]);
                                cj10array[0] = IKcos(j10array[0]);
                                if (j10array[0] > IKPI)
                                {
                                  j10array[0] -= IK2PI;
                                }
                                else if (j10array[0] < -IKPI)
                                {
                                  j10array[0] += IK2PI;
                                }
                                j10valid[0] = true;
                                for (int ij10 = 0; ij10 < 1; ++ij10)
                                {
                                  if (!j10valid[ij10])
                                  {
                                    continue;
                                  }
                                  _ij10[0] = ij10;
                                  _ij10[1] = -1;
                                  for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                  {
                                    if (j10valid[iij10] &&
                                        IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j10valid[iij10] = false;
                                      _ij10[1] = iij10;
                                      break;
                                    }
                                  }
                                  j10 = j10array[ij10];
                                  cj10 = cj10array[ij10];
                                  sj10 = sj10array[ij10];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x211 = IKsin(j10);
                                    IkReal x212 = IKcos(j10);
                                    IkReal x213 = (new_r01 * sj8);
                                    IkReal x214 = (cj8 * new_r10);
                                    IkReal x215 = (cj8 * new_r11);
                                    IkReal x216 = (new_r00 * sj8);
                                    IkReal x217 = ((1.0) * sj9);
                                    IkReal x218 = (sj8 * sj9);
                                    IkReal x219 = ((1.0) * x212);
                                    IkReal x220 = (cj8 * x211);
                                    IkReal x221 = ((1.0) * x211);
                                    IkReal x222 = (sj9 * x212);
                                    evalcond[0] = ((((-1.0) * cj9 * x221)) + new_r20);
                                    evalcond[1] = ((((-1.0) * cj9 * x219)) + new_r21);
                                    evalcond[2] = (((new_r11 * sj8)) + x211 + ((cj8 * new_r01)));
                                    evalcond[3] = (((new_r10 * sj8)) + ((cj8 * new_r00)) + (((-1.0) * x219)));
                                    evalcond[4] = (((cj8 * x222)) + ((sj8 * x211)) + new_r11);
                                    evalcond[5] = (((sj9 * x211)) + x214 + (((-1.0) * x216)));
                                    evalcond[6] = (x215 + x222 + (((-1.0) * x213)));
                                    evalcond[7] = ((((-1.0) * sj8 * x212 * x217)) + x220 + new_r01);
                                    evalcond[8] = ((((-1.0) * sj8 * x219)) + new_r10 + ((sj9 * x220)));
                                    evalcond[9] = ((((-1.0) * sj8 * x211 * x217)) + (((-1.0) * cj8 * x219)) + new_r00);
                                    evalcond[10] = (((sj9 * x216)) + ((cj9 * new_r20)) + (((-1.0) * x214 * x217)) +
                                                    (((-1.0) * x221)));
                                    evalcond[11] = (((sj9 * x213)) + ((cj9 * new_r21)) + (((-1.0) * x219)) +
                                                    (((-1.0) * x215 * x217)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 17;
                                    vinfos[0].foffset = j2;
                                    vinfos[0].indices[0] = _ij2[0];
                                    vinfos[0].indices[1] = _ij2[1];
                                    vinfos[0].maxsolutions = _nj2;
                                    vinfos[1].jointtype = 17;
                                    vinfos[1].foffset = j3;
                                    vinfos[1].indices[0] = _ij3[0];
                                    vinfos[1].indices[1] = _ij3[1];
                                    vinfos[1].maxsolutions = _nj3;
                                    vinfos[2].jointtype = 17;
                                    vinfos[2].foffset = j4;
                                    vinfos[2].indices[0] = _ij4[0];
                                    vinfos[2].indices[1] = _ij4[1];
                                    vinfos[2].maxsolutions = _nj4;
                                    vinfos[3].jointtype = 17;
                                    vinfos[3].foffset = j5;
                                    vinfos[3].indices[0] = _ij5[0];
                                    vinfos[3].indices[1] = _ij5[1];
                                    vinfos[3].maxsolutions = _nj5;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j8;
                                    vinfos[4].indices[0] = _ij8[0];
                                    vinfos[4].indices[1] = _ij8[1];
                                    vinfos[4].maxsolutions = _nj8;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j9;
                                    vinfos[5].indices[0] = _ij9[0];
                                    vinfos[5].indices[1] = _ij9[1];
                                    vinfos[5].maxsolutions = _nj9;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j10;
                                    vinfos[6].indices[0] = _ij10[0];
                                    vinfos[6].indices[1] = _ij10[1];
                                    vinfos[6].maxsolutions = _nj10;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
                  {
                    IkReal j8array[1], cj8array[1], sj8array[1];
                    bool j8valid[1] = { false };
                    _nj8 = 1;
                    CheckValue<IkReal> x223 = IKPowWithIntegerCheck(IKsign(cj9), -1);
                    if (!x223.valid)
                    {
                      continue;
                    }
                    CheckValue<IkReal> x224 =
                        IKatan2WithCheck(IkReal(new_r02), IkReal(((-1.0) * new_r12)), IKFAST_ATAN2_MAGTHRESH);
                    if (!x224.valid)
                    {
                      continue;
                    }
                    j8array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x223.value))) + (x224.value));
                    sj8array[0] = IKsin(j8array[0]);
                    cj8array[0] = IKcos(j8array[0]);
                    if (j8array[0] > IKPI)
                    {
                      j8array[0] -= IK2PI;
                    }
                    else if (j8array[0] < -IKPI)
                    {
                      j8array[0] += IK2PI;
                    }
                    j8valid[0] = true;
                    for (int ij8 = 0; ij8 < 1; ++ij8)
                    {
                      if (!j8valid[ij8])
                      {
                        continue;
                      }
                      _ij8[0] = ij8;
                      _ij8[1] = -1;
                      for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                      {
                        if (j8valid[iij8] && IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                        {
                          j8valid[iij8] = false;
                          _ij8[1] = iij8;
                          break;
                        }
                      }
                      j8 = j8array[ij8];
                      cj8 = cj8array[ij8];
                      sj8 = sj8array[ij8];
                      {
                        IkReal evalcond[8];
                        IkReal x225 = IKsin(j8);
                        IkReal x226 = IKcos(j8);
                        IkReal x227 = ((1.0) * x225);
                        IkReal x228 = (cj9 * x226);
                        IkReal x229 = (new_r12 * x226);
                        evalcond[0] = (x228 + new_r12);
                        evalcond[1] = ((((-1.0) * cj9 * x227)) + new_r02);
                        evalcond[2] = (((new_r02 * x226)) + ((new_r12 * x225)));
                        evalcond[3] = (cj9 + x229 + (((-1.0) * new_r02 * x227)));
                        evalcond[4] = (((new_r20 * sj9)) + (((-1.0) * cj9 * new_r00 * x227)) + ((new_r10 * x228)));
                        evalcond[5] = ((((-1.0) * cj9 * new_r01 * x227)) + ((new_r11 * x228)) + ((new_r21 * sj9)));
                        evalcond[6] = (((cj9 * new_r22)) + (((-1.0) * sj9 * x229)) + ((new_r02 * sj9 * x225)));
                        evalcond[7] =
                            ((1.0) + (((-1.0) * cj9 * new_r02 * x227)) + ((new_r22 * sj9)) + ((new_r12 * x228)));
                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                        {
                          continue;
                        }
                      }

                      {
                        IkReal j10eval[3];
                        j10eval[0] = cj9;
                        j10eval[1] = IKsign(cj9);
                        j10eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                        if (IKabs(j10eval[0]) < 0.0000010000000000 || IKabs(j10eval[1]) < 0.0000010000000000 ||
                            IKabs(j10eval[2]) < 0.0000010000000000)
                        {
                          {
                            IkReal j10eval[2];
                            j10eval[0] = cj9;
                            j10eval[1] = sj8;
                            if (IKabs(j10eval[0]) < 0.0000010000000000 || IKabs(j10eval[1]) < 0.0000010000000000)
                            {
                              {
                                IkReal j10eval[3];
                                j10eval[0] = cj9;
                                j10eval[1] = sj8;
                                j10eval[2] = sj9;
                                if (IKabs(j10eval[0]) < 0.0000010000000000 || IKabs(j10eval[1]) < 0.0000010000000000 ||
                                    IKabs(j10eval[2]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal evalcond[5];
                                    bool bgotonextstatement = true;
                                    do
                                    {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j9)))),
                                                             6.28318530717959)));
                                      evalcond[1] = new_r12;
                                      evalcond[2] = new_r02;
                                      evalcond[3] = new_r20;
                                      evalcond[4] = new_r21;
                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                          IKabs(evalcond[3]) < 0.0000050000000000 &&
                                          IKabs(evalcond[4]) < 0.0000050000000000)
                                      {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j10array[1], cj10array[1], sj10array[1];
                                          bool j10valid[1] = { false };
                                          _nj10 = 1;
                                          IkReal x230 = ((1.0) * cj8);
                                          if (IKabs(((((-1.0) * new_r11 * sj8)) + (((-1.0) * new_r01 * x230)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs((((new_r01 * sj8)) + (((-1.0) * new_r11 * x230)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(((((-1.0) * new_r11 * sj8)) + (((-1.0) * new_r01 * x230)))) +
                                                    IKsqr((((new_r01 * sj8)) + (((-1.0) * new_r11 * x230)))) - 1) <=
                                                  IKFAST_SINCOS_THRESH)
                                            continue;
                                          j10array[0] =
                                              IKatan2(((((-1.0) * new_r11 * sj8)) + (((-1.0) * new_r01 * x230))),
                                                      (((new_r01 * sj8)) + (((-1.0) * new_r11 * x230))));
                                          sj10array[0] = IKsin(j10array[0]);
                                          cj10array[0] = IKcos(j10array[0]);
                                          if (j10array[0] > IKPI)
                                          {
                                            j10array[0] -= IK2PI;
                                          }
                                          else if (j10array[0] < -IKPI)
                                          {
                                            j10array[0] += IK2PI;
                                          }
                                          j10valid[0] = true;
                                          for (int ij10 = 0; ij10 < 1; ++ij10)
                                          {
                                            if (!j10valid[ij10])
                                            {
                                              continue;
                                            }
                                            _ij10[0] = ij10;
                                            _ij10[1] = -1;
                                            for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                            {
                                              if (j10valid[iij10] &&
                                                  IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j10valid[iij10] = false;
                                                _ij10[1] = iij10;
                                                break;
                                              }
                                            }
                                            j10 = j10array[ij10];
                                            cj10 = cj10array[ij10];
                                            sj10 = sj10array[ij10];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x231 = IKsin(j10);
                                              IkReal x232 = IKcos(j10);
                                              IkReal x233 = ((1.0) * sj8);
                                              IkReal x234 = (cj8 * x231);
                                              IkReal x235 = ((1.0) * x232);
                                              IkReal x236 = (sj8 * x231);
                                              IkReal x237 = (x232 * x233);
                                              evalcond[0] = (((new_r11 * sj8)) + x231 + ((cj8 * new_r01)));
                                              evalcond[1] = (((cj8 * new_r10)) + x231 + (((-1.0) * new_r00 * x233)));
                                              evalcond[2] = (((cj8 * new_r11)) + x232 + (((-1.0) * new_r01 * x233)));
                                              evalcond[3] = (((new_r10 * sj8)) + (((-1.0) * x235)) + ((cj8 * new_r00)));
                                              evalcond[4] = (((cj8 * x232)) + x236 + new_r11);
                                              evalcond[5] = ((((-1.0) * x237)) + x234 + new_r01);
                                              evalcond[6] = ((((-1.0) * x237)) + x234 + new_r10);
                                              evalcond[7] =
                                                  ((((-1.0) * cj8 * x235)) + (((-1.0) * x231 * x233)) + new_r00);
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 17;
                                              vinfos[0].foffset = j2;
                                              vinfos[0].indices[0] = _ij2[0];
                                              vinfos[0].indices[1] = _ij2[1];
                                              vinfos[0].maxsolutions = _nj2;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j3;
                                              vinfos[1].indices[0] = _ij3[0];
                                              vinfos[1].indices[1] = _ij3[1];
                                              vinfos[1].maxsolutions = _nj3;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j4;
                                              vinfos[2].indices[0] = _ij4[0];
                                              vinfos[2].indices[1] = _ij4[1];
                                              vinfos[2].maxsolutions = _nj4;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j5;
                                              vinfos[3].indices[0] = _ij5[0];
                                              vinfos[3].indices[1] = _ij5[1];
                                              vinfos[3].maxsolutions = _nj5;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j8;
                                              vinfos[4].indices[0] = _ij8[0];
                                              vinfos[4].indices[1] = _ij8[1];
                                              vinfos[4].maxsolutions = _nj8;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j9;
                                              vinfos[5].indices[0] = _ij9[0];
                                              vinfos[5].indices[1] = _ij9[1];
                                              vinfos[5].maxsolutions = _nj9;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j10;
                                              vinfos[6].indices[0] = _ij10[0];
                                              vinfos[6].indices[1] = _ij10[1];
                                              vinfos[6].maxsolutions = _nj10;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement)
                                    {
                                      bool bgotonextstatement = true;
                                      do
                                      {
                                        evalcond[0] = ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j9)))),
                                                               6.28318530717959)));
                                        evalcond[1] = new_r12;
                                        evalcond[2] = new_r02;
                                        evalcond[3] = new_r20;
                                        evalcond[4] = new_r21;
                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                            IKabs(evalcond[3]) < 0.0000050000000000 &&
                                            IKabs(evalcond[4]) < 0.0000050000000000)
                                        {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j10array[1], cj10array[1], sj10array[1];
                                            bool j10valid[1] = { false };
                                            _nj10 = 1;
                                            IkReal x238 = ((1.0) * new_r01);
                                            if (IKabs(((((-1.0) * cj8 * x238)) + (((-1.0) * new_r11 * sj8)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(((((-1.0) * sj8 * x238)) + ((cj8 * new_r11)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(IKsqr(((((-1.0) * cj8 * x238)) + (((-1.0) * new_r11 * sj8)))) +
                                                      IKsqr(((((-1.0) * sj8 * x238)) + ((cj8 * new_r11)))) - 1) <=
                                                    IKFAST_SINCOS_THRESH)
                                              continue;
                                            j10array[0] =
                                                IKatan2(((((-1.0) * cj8 * x238)) + (((-1.0) * new_r11 * sj8))),
                                                        ((((-1.0) * sj8 * x238)) + ((cj8 * new_r11))));
                                            sj10array[0] = IKsin(j10array[0]);
                                            cj10array[0] = IKcos(j10array[0]);
                                            if (j10array[0] > IKPI)
                                            {
                                              j10array[0] -= IK2PI;
                                            }
                                            else if (j10array[0] < -IKPI)
                                            {
                                              j10array[0] += IK2PI;
                                            }
                                            j10valid[0] = true;
                                            for (int ij10 = 0; ij10 < 1; ++ij10)
                                            {
                                              if (!j10valid[ij10])
                                              {
                                                continue;
                                              }
                                              _ij10[0] = ij10;
                                              _ij10[1] = -1;
                                              for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                              {
                                                if (j10valid[iij10] &&
                                                    IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                  j10valid[iij10] = false;
                                                  _ij10[1] = iij10;
                                                  break;
                                                }
                                              }
                                              j10 = j10array[ij10];
                                              cj10 = cj10array[ij10];
                                              sj10 = sj10array[ij10];
                                              {
                                                IkReal evalcond[8];
                                                IkReal x239 = IKcos(j10);
                                                IkReal x240 = IKsin(j10);
                                                IkReal x241 = ((1.0) * sj8);
                                                IkReal x242 = ((1.0) * x239);
                                                IkReal x243 = (sj8 * x240);
                                                IkReal x244 = (cj8 * x240);
                                                IkReal x245 = (cj8 * x242);
                                                evalcond[0] = (((new_r11 * sj8)) + x240 + ((cj8 * new_r01)));
                                                evalcond[1] =
                                                    (((new_r10 * sj8)) + ((cj8 * new_r00)) + (((-1.0) * x242)));
                                                evalcond[2] = (((sj8 * x239)) + x244 + new_r01);
                                                evalcond[3] = (x243 + (((-1.0) * x245)) + new_r11);
                                                evalcond[4] = ((((-1.0) * x240)) + (((-1.0) * new_r00 * x241)) +
                                                               ((cj8 * new_r10)));
                                                evalcond[5] = ((((-1.0) * new_r01 * x241)) + ((cj8 * new_r11)) +
                                                               (((-1.0) * x242)));
                                                evalcond[6] = (x243 + (((-1.0) * x245)) + new_r00);
                                                evalcond[7] = ((((-1.0) * x244)) + new_r10 + (((-1.0) * x239 * x241)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 17;
                                                vinfos[0].foffset = j2;
                                                vinfos[0].indices[0] = _ij2[0];
                                                vinfos[0].indices[1] = _ij2[1];
                                                vinfos[0].maxsolutions = _nj2;
                                                vinfos[1].jointtype = 17;
                                                vinfos[1].foffset = j3;
                                                vinfos[1].indices[0] = _ij3[0];
                                                vinfos[1].indices[1] = _ij3[1];
                                                vinfos[1].maxsolutions = _nj3;
                                                vinfos[2].jointtype = 17;
                                                vinfos[2].foffset = j4;
                                                vinfos[2].indices[0] = _ij4[0];
                                                vinfos[2].indices[1] = _ij4[1];
                                                vinfos[2].maxsolutions = _nj4;
                                                vinfos[3].jointtype = 17;
                                                vinfos[3].foffset = j5;
                                                vinfos[3].indices[0] = _ij5[0];
                                                vinfos[3].indices[1] = _ij5[1];
                                                vinfos[3].maxsolutions = _nj5;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j8;
                                                vinfos[4].indices[0] = _ij8[0];
                                                vinfos[4].indices[1] = _ij8[1];
                                                vinfos[4].maxsolutions = _nj8;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j9;
                                                vinfos[5].indices[0] = _ij9[0];
                                                vinfos[5].indices[1] = _ij9[1];
                                                vinfos[5].maxsolutions = _nj9;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j10;
                                                vinfos[6].indices[0] = _ij10[0];
                                                vinfos[6].indices[1] = _ij10[1];
                                                vinfos[6].maxsolutions = _nj10;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement)
                                      {
                                        bool bgotonextstatement = true;
                                        do
                                        {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(j8))), 6.28318530717959)));
                                          evalcond[1] = new_r02;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000)
                                          {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j10array[1], cj10array[1], sj10array[1];
                                              bool j10valid[1] = { false };
                                              _nj10 = 1;
                                              if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j10array[0] = IKatan2(((-1.0) * new_r01), new_r00);
                                              sj10array[0] = IKsin(j10array[0]);
                                              cj10array[0] = IKcos(j10array[0]);
                                              if (j10array[0] > IKPI)
                                              {
                                                j10array[0] -= IK2PI;
                                              }
                                              else if (j10array[0] < -IKPI)
                                              {
                                                j10array[0] += IK2PI;
                                              }
                                              j10valid[0] = true;
                                              for (int ij10 = 0; ij10 < 1; ++ij10)
                                              {
                                                if (!j10valid[ij10])
                                                {
                                                  continue;
                                                }
                                                _ij10[0] = ij10;
                                                _ij10[1] = -1;
                                                for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                {
                                                  if (j10valid[iij10] &&
                                                      IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                          IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j10valid[iij10] = false;
                                                    _ij10[1] = iij10;
                                                    break;
                                                  }
                                                }
                                                j10 = j10array[ij10];
                                                cj10 = cj10array[ij10];
                                                sj10 = sj10array[ij10];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x246 = IKcos(j10);
                                                  IkReal x247 = IKsin(j10);
                                                  IkReal x248 = ((1.0) * sj9);
                                                  IkReal x249 = ((1.0) * x246);
                                                  IkReal x250 = ((1.0) * x247);
                                                  evalcond[0] = (x247 + new_r01);
                                                  evalcond[1] = ((((-1.0) * x249)) + new_r00);
                                                  evalcond[2] = (((sj9 * x246)) + new_r11);
                                                  evalcond[3] = (((sj9 * x247)) + new_r10);
                                                  evalcond[4] = ((((-1.0) * cj9 * x250)) + new_r20);
                                                  evalcond[5] = ((((-1.0) * cj9 * x249)) + new_r21);
                                                  evalcond[6] = (((cj9 * new_r20)) + (((-1.0) * new_r10 * x248)) +
                                                                 (((-1.0) * x250)));
                                                  evalcond[7] = (((cj9 * new_r21)) + (((-1.0) * new_r11 * x248)) +
                                                                 (((-1.0) * x249)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j2;
                                                  vinfos[0].indices[0] = _ij2[0];
                                                  vinfos[0].indices[1] = _ij2[1];
                                                  vinfos[0].maxsolutions = _nj2;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j3;
                                                  vinfos[1].indices[0] = _ij3[0];
                                                  vinfos[1].indices[1] = _ij3[1];
                                                  vinfos[1].maxsolutions = _nj3;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j4;
                                                  vinfos[2].indices[0] = _ij4[0];
                                                  vinfos[2].indices[1] = _ij4[1];
                                                  vinfos[2].maxsolutions = _nj4;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j5;
                                                  vinfos[3].indices[0] = _ij5[0];
                                                  vinfos[3].indices[1] = _ij5[1];
                                                  vinfos[3].maxsolutions = _nj5;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j8;
                                                  vinfos[4].indices[0] = _ij8[0];
                                                  vinfos[4].indices[1] = _ij8[1];
                                                  vinfos[4].maxsolutions = _nj8;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j9;
                                                  vinfos[5].indices[0] = _ij9[0];
                                                  vinfos[5].indices[1] = _ij9[1];
                                                  vinfos[5].maxsolutions = _nj9;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j10;
                                                  vinfos[6].indices[0] = _ij10[0];
                                                  vinfos[6].indices[1] = _ij10[1];
                                                  vinfos[6].maxsolutions = _nj10;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement)
                                        {
                                          bool bgotonextstatement = true;
                                          do
                                          {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j8)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r02;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000)
                                            {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j10array[1], cj10array[1], sj10array[1];
                                                bool j10valid[1] = { false };
                                                _nj10 = 1;
                                                if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r00)) - 1) <=
                                                        IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j10array[0] = IKatan2(new_r01, ((-1.0) * new_r00));
                                                sj10array[0] = IKsin(j10array[0]);
                                                cj10array[0] = IKcos(j10array[0]);
                                                if (j10array[0] > IKPI)
                                                {
                                                  j10array[0] -= IK2PI;
                                                }
                                                else if (j10array[0] < -IKPI)
                                                {
                                                  j10array[0] += IK2PI;
                                                }
                                                j10valid[0] = true;
                                                for (int ij10 = 0; ij10 < 1; ++ij10)
                                                {
                                                  if (!j10valid[ij10])
                                                  {
                                                    continue;
                                                  }
                                                  _ij10[0] = ij10;
                                                  _ij10[1] = -1;
                                                  for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                  {
                                                    if (j10valid[iij10] &&
                                                        IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                            IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                            IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j10valid[iij10] = false;
                                                      _ij10[1] = iij10;
                                                      break;
                                                    }
                                                  }
                                                  j10 = j10array[ij10];
                                                  cj10 = cj10array[ij10];
                                                  sj10 = sj10array[ij10];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x251 = IKsin(j10);
                                                    IkReal x252 = IKcos(j10);
                                                    IkReal x253 = ((1.0) * x252);
                                                    IkReal x254 = ((1.0) * x251);
                                                    evalcond[0] = (x251 + (((-1.0) * new_r01)));
                                                    evalcond[1] = ((((-1.0) * cj9 * x254)) + new_r20);
                                                    evalcond[2] = ((((-1.0) * cj9 * x253)) + new_r21);
                                                    evalcond[3] = ((((-1.0) * sj9 * x253)) + new_r11);
                                                    evalcond[4] = ((((-1.0) * new_r00)) + (((-1.0) * x253)));
                                                    evalcond[5] = ((((-1.0) * new_r10)) + ((sj9 * x251)));
                                                    evalcond[6] =
                                                        (((cj9 * new_r20)) + ((new_r10 * sj9)) + (((-1.0) * x254)));
                                                    evalcond[7] =
                                                        (((cj9 * new_r21)) + ((new_r11 * sj9)) + (((-1.0) * x253)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 17;
                                                    vinfos[0].foffset = j2;
                                                    vinfos[0].indices[0] = _ij2[0];
                                                    vinfos[0].indices[1] = _ij2[1];
                                                    vinfos[0].maxsolutions = _nj2;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j3;
                                                    vinfos[1].indices[0] = _ij3[0];
                                                    vinfos[1].indices[1] = _ij3[1];
                                                    vinfos[1].maxsolutions = _nj3;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j4;
                                                    vinfos[2].indices[0] = _ij4[0];
                                                    vinfos[2].indices[1] = _ij4[1];
                                                    vinfos[2].maxsolutions = _nj4;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j5;
                                                    vinfos[3].indices[0] = _ij5[0];
                                                    vinfos[3].indices[1] = _ij5[1];
                                                    vinfos[3].maxsolutions = _nj5;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j8;
                                                    vinfos[4].indices[0] = _ij8[0];
                                                    vinfos[4].indices[1] = _ij8[1];
                                                    vinfos[4].maxsolutions = _nj8;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j9;
                                                    vinfos[5].indices[0] = _ij9[0];
                                                    vinfos[5].indices[1] = _ij9[1];
                                                    vinfos[5].maxsolutions = _nj9;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j10;
                                                    vinfos[6].indices[0] = _ij10[0];
                                                    vinfos[6].indices[1] = _ij10[1];
                                                    vinfos[6].maxsolutions = _nj10;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement)
                                          {
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(j9))), 6.28318530717959)));
                                              evalcond[1] = new_r22;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000)
                                              {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j10array[1], cj10array[1], sj10array[1];
                                                  bool j10valid[1] = { false };
                                                  _nj10 = 1;
                                                  if (IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(new_r20) + IKsqr(new_r21) - 1) <= IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j10array[0] = IKatan2(new_r20, new_r21);
                                                  sj10array[0] = IKsin(j10array[0]);
                                                  cj10array[0] = IKcos(j10array[0]);
                                                  if (j10array[0] > IKPI)
                                                  {
                                                    j10array[0] -= IK2PI;
                                                  }
                                                  else if (j10array[0] < -IKPI)
                                                  {
                                                    j10array[0] += IK2PI;
                                                  }
                                                  j10valid[0] = true;
                                                  for (int ij10 = 0; ij10 < 1; ++ij10)
                                                  {
                                                    if (!j10valid[ij10])
                                                    {
                                                      continue;
                                                    }
                                                    _ij10[0] = ij10;
                                                    _ij10[1] = -1;
                                                    for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                    {
                                                      if (j10valid[iij10] &&
                                                          IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                              IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j10valid[iij10] = false;
                                                        _ij10[1] = iij10;
                                                        break;
                                                      }
                                                    }
                                                    j10 = j10array[ij10];
                                                    cj10 = cj10array[ij10];
                                                    sj10 = sj10array[ij10];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x255 = IKsin(j10);
                                                      IkReal x256 = IKcos(j10);
                                                      IkReal x257 = ((1.0) * x256);
                                                      evalcond[0] = (new_r20 + (((-1.0) * x255)));
                                                      evalcond[1] = (new_r21 + (((-1.0) * x257)));
                                                      evalcond[2] = (((sj8 * x255)) + new_r11);
                                                      evalcond[3] = (((cj8 * x255)) + new_r01);
                                                      evalcond[4] = ((((-1.0) * sj8 * x257)) + new_r10);
                                                      evalcond[5] = ((((-1.0) * cj8 * x257)) + new_r00);
                                                      evalcond[6] = (((new_r11 * sj8)) + x255 + ((cj8 * new_r01)));
                                                      evalcond[7] =
                                                          (((new_r10 * sj8)) + ((cj8 * new_r00)) + (((-1.0) * x257)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 17;
                                                      vinfos[0].foffset = j2;
                                                      vinfos[0].indices[0] = _ij2[0];
                                                      vinfos[0].indices[1] = _ij2[1];
                                                      vinfos[0].maxsolutions = _nj2;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j3;
                                                      vinfos[1].indices[0] = _ij3[0];
                                                      vinfos[1].indices[1] = _ij3[1];
                                                      vinfos[1].maxsolutions = _nj3;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j4;
                                                      vinfos[2].indices[0] = _ij4[0];
                                                      vinfos[2].indices[1] = _ij4[1];
                                                      vinfos[2].maxsolutions = _nj4;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j5;
                                                      vinfos[3].indices[0] = _ij5[0];
                                                      vinfos[3].indices[1] = _ij5[1];
                                                      vinfos[3].maxsolutions = _nj5;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j8;
                                                      vinfos[4].indices[0] = _ij8[0];
                                                      vinfos[4].indices[1] = _ij8[1];
                                                      vinfos[4].maxsolutions = _nj8;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j9;
                                                      vinfos[5].indices[0] = _ij9[0];
                                                      vinfos[5].indices[1] = _ij9[1];
                                                      vinfos[5].maxsolutions = _nj9;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j10;
                                                      vinfos[6].indices[0] = _ij10[0];
                                                      vinfos[6].indices[1] = _ij10[1];
                                                      vinfos[6].maxsolutions = _nj10;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j9)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r22;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                                    bool j10valid[1] = { false };
                                                    _nj10 = 1;
                                                    if (IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((-1.0) * new_r20)) + IKsqr(((-1.0) * new_r21)) -
                                                              1) <= IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j10array[0] = IKatan2(((-1.0) * new_r20), ((-1.0) * new_r21));
                                                    sj10array[0] = IKsin(j10array[0]);
                                                    cj10array[0] = IKcos(j10array[0]);
                                                    if (j10array[0] > IKPI)
                                                    {
                                                      j10array[0] -= IK2PI;
                                                    }
                                                    else if (j10array[0] < -IKPI)
                                                    {
                                                      j10array[0] += IK2PI;
                                                    }
                                                    j10valid[0] = true;
                                                    for (int ij10 = 0; ij10 < 1; ++ij10)
                                                    {
                                                      if (!j10valid[ij10])
                                                      {
                                                        continue;
                                                      }
                                                      _ij10[0] = ij10;
                                                      _ij10[1] = -1;
                                                      for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                                      {
                                                        if (j10valid[iij10] &&
                                                            IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j10valid[iij10] = false;
                                                          _ij10[1] = iij10;
                                                          break;
                                                        }
                                                      }
                                                      j10 = j10array[ij10];
                                                      cj10 = cj10array[ij10];
                                                      sj10 = sj10array[ij10];
                                                      {
                                                        IkReal evalcond[8];
                                                        IkReal x258 = IKsin(j10);
                                                        IkReal x259 = IKcos(j10);
                                                        IkReal x260 = ((1.0) * x259);
                                                        evalcond[0] = (x258 + new_r20);
                                                        evalcond[1] = (x259 + new_r21);
                                                        evalcond[2] = (((sj8 * x258)) + new_r11);
                                                        evalcond[3] = (((cj8 * x258)) + new_r01);
                                                        evalcond[4] = ((((-1.0) * sj8 * x260)) + new_r10);
                                                        evalcond[5] = ((((-1.0) * cj8 * x260)) + new_r00);
                                                        evalcond[6] = (((new_r11 * sj8)) + x258 + ((cj8 * new_r01)));
                                                        evalcond[7] =
                                                            (((new_r10 * sj8)) + ((cj8 * new_r00)) + (((-1.0) * x260)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 17;
                                                        vinfos[0].foffset = j2;
                                                        vinfos[0].indices[0] = _ij2[0];
                                                        vinfos[0].indices[1] = _ij2[1];
                                                        vinfos[0].maxsolutions = _nj2;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j3;
                                                        vinfos[1].indices[0] = _ij3[0];
                                                        vinfos[1].indices[1] = _ij3[1];
                                                        vinfos[1].maxsolutions = _nj3;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j4;
                                                        vinfos[2].indices[0] = _ij4[0];
                                                        vinfos[2].indices[1] = _ij4[1];
                                                        vinfos[2].maxsolutions = _nj4;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j5;
                                                        vinfos[3].indices[0] = _ij5[0];
                                                        vinfos[3].indices[1] = _ij5[1];
                                                        vinfos[3].maxsolutions = _nj5;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j8;
                                                        vinfos[4].indices[0] = _ij8[0];
                                                        vinfos[4].indices[1] = _ij8[1];
                                                        vinfos[4].maxsolutions = _nj8;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j9;
                                                        vinfos[5].indices[0] = _ij9[0];
                                                        vinfos[5].indices[1] = _ij9[1];
                                                        vinfos[5].maxsolutions = _nj9;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j10;
                                                        vinfos[6].indices[0] = _ij10[0];
                                                        vinfos[6].indices[1] = _ij10[1];
                                                        vinfos[6].maxsolutions = _nj10;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j10eval[1];
                                                      new_r21 = 0;
                                                      new_r20 = 0;
                                                      new_r02 = 0;
                                                      new_r12 = 0;
                                                      j10eval[0] = 1.0;
                                                      if (IKabs(j10eval[0]) < 0.0000000100000000)
                                                      {
                                                        continue;  // no branches [j10]
                                                      }
                                                      else
                                                      {
                                                        IkReal op[2 + 1], zeror[2];
                                                        int numroots;
                                                        op[0] = 1.0;
                                                        op[1] = 0;
                                                        op[2] = -1.0;
                                                        polyroots2(op, zeror, numroots);
                                                        IkReal j10array[2], cj10array[2], sj10array[2], tempj10array[1];
                                                        int numsolutions = 0;
                                                        for (int ij10 = 0; ij10 < numroots; ++ij10)
                                                        {
                                                          IkReal htj10 = zeror[ij10];
                                                          tempj10array[0] = ((2.0) * (atan(htj10)));
                                                          for (int kj10 = 0; kj10 < 1; ++kj10)
                                                          {
                                                            j10array[numsolutions] = tempj10array[kj10];
                                                            if (j10array[numsolutions] > IKPI)
                                                            {
                                                              j10array[numsolutions] -= IK2PI;
                                                            }
                                                            else if (j10array[numsolutions] < -IKPI)
                                                            {
                                                              j10array[numsolutions] += IK2PI;
                                                            }
                                                            sj10array[numsolutions] = IKsin(j10array[numsolutions]);
                                                            cj10array[numsolutions] = IKcos(j10array[numsolutions]);
                                                            numsolutions++;
                                                          }
                                                        }
                                                        bool j10valid[2] = { true, true };
                                                        _nj10 = 2;
                                                        for (int ij10 = 0; ij10 < numsolutions; ++ij10)
                                                        {
                                                          if (!j10valid[ij10])
                                                          {
                                                            continue;
                                                          }
                                                          j10 = j10array[ij10];
                                                          cj10 = cj10array[ij10];
                                                          sj10 = sj10array[ij10];
                                                          htj10 = IKtan(j10 / 2);

                                                          _ij10[0] = ij10;
                                                          _ij10[1] = -1;
                                                          for (int iij10 = ij10 + 1; iij10 < numsolutions; ++iij10)
                                                          {
                                                            if (j10valid[iij10] &&
                                                                IKabs(cj10array[ij10] - cj10array[iij10]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj10array[ij10] - sj10array[iij10]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j10valid[iij10] = false;
                                                              _ij10[1] = iij10;
                                                              break;
                                                            }
                                                          }
                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 17;
                                                            vinfos[0].foffset = j2;
                                                            vinfos[0].indices[0] = _ij2[0];
                                                            vinfos[0].indices[1] = _ij2[1];
                                                            vinfos[0].maxsolutions = _nj2;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j3;
                                                            vinfos[1].indices[0] = _ij3[0];
                                                            vinfos[1].indices[1] = _ij3[1];
                                                            vinfos[1].maxsolutions = _nj3;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j4;
                                                            vinfos[2].indices[0] = _ij4[0];
                                                            vinfos[2].indices[1] = _ij4[1];
                                                            vinfos[2].maxsolutions = _nj4;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j5;
                                                            vinfos[3].indices[0] = _ij5[0];
                                                            vinfos[3].indices[1] = _ij5[1];
                                                            vinfos[3].maxsolutions = _nj5;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j8;
                                                            vinfos[4].indices[0] = _ij8[0];
                                                            vinfos[4].indices[1] = _ij8[1];
                                                            vinfos[4].maxsolutions = _nj8;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j9;
                                                            vinfos[5].indices[0] = _ij9[0];
                                                            vinfos[5].indices[1] = _ij9[1];
                                                            vinfos[5].maxsolutions = _nj9;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j10;
                                                            vinfos[6].indices[0] = _ij10[0];
                                                            vinfos[6].indices[1] = _ij10[1];
                                                            vinfos[6].maxsolutions = _nj10;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    if (1)
                                                    {
                                                      bgotonextstatement = false;
                                                      continue;  // branch miss [j10]
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {}
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j10array[1], cj10array[1], sj10array[1];
                                    bool j10valid[1] = { false };
                                    _nj10 = 1;
                                    CheckValue<IkReal> x262 = IKPowWithIntegerCheck(cj9, -1);
                                    if (!x262.valid)
                                    {
                                      continue;
                                    }
                                    IkReal x261 = x262.value;
                                    CheckValue<IkReal> x263 = IKPowWithIntegerCheck(sj8, -1);
                                    if (!x263.valid)
                                    {
                                      continue;
                                    }
                                    CheckValue<IkReal> x264 = IKPowWithIntegerCheck(sj9, -1);
                                    if (!x264.valid)
                                    {
                                      continue;
                                    }
                                    if (IKabs((new_r20 * x261)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((x261 * (x263.value) * (x264.value) *
                                               ((((cj8 * new_r20)) + ((cj9 * new_r01)))))) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr((new_r20 * x261)) +
                                              IKsqr((x261 * (x263.value) * (x264.value) *
                                                     ((((cj8 * new_r20)) + ((cj9 * new_r01)))))) -
                                              1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j10array[0] =
                                        IKatan2((new_r20 * x261), (x261 * (x263.value) * (x264.value) *
                                                                   ((((cj8 * new_r20)) + ((cj9 * new_r01))))));
                                    sj10array[0] = IKsin(j10array[0]);
                                    cj10array[0] = IKcos(j10array[0]);
                                    if (j10array[0] > IKPI)
                                    {
                                      j10array[0] -= IK2PI;
                                    }
                                    else if (j10array[0] < -IKPI)
                                    {
                                      j10array[0] += IK2PI;
                                    }
                                    j10valid[0] = true;
                                    for (int ij10 = 0; ij10 < 1; ++ij10)
                                    {
                                      if (!j10valid[ij10])
                                      {
                                        continue;
                                      }
                                      _ij10[0] = ij10;
                                      _ij10[1] = -1;
                                      for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                      {
                                        if (j10valid[iij10] &&
                                            IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j10valid[iij10] = false;
                                          _ij10[1] = iij10;
                                          break;
                                        }
                                      }
                                      j10 = j10array[ij10];
                                      cj10 = cj10array[ij10];
                                      sj10 = sj10array[ij10];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x265 = IKsin(j10);
                                        IkReal x266 = IKcos(j10);
                                        IkReal x267 = (new_r01 * sj8);
                                        IkReal x268 = (cj8 * new_r10);
                                        IkReal x269 = (cj8 * new_r11);
                                        IkReal x270 = (new_r00 * sj8);
                                        IkReal x271 = ((1.0) * sj9);
                                        IkReal x272 = (sj8 * sj9);
                                        IkReal x273 = ((1.0) * x266);
                                        IkReal x274 = (cj8 * x265);
                                        IkReal x275 = ((1.0) * x265);
                                        IkReal x276 = (sj9 * x266);
                                        evalcond[0] = ((((-1.0) * cj9 * x275)) + new_r20);
                                        evalcond[1] = ((((-1.0) * cj9 * x273)) + new_r21);
                                        evalcond[2] = (((new_r11 * sj8)) + x265 + ((cj8 * new_r01)));
                                        evalcond[3] = (((new_r10 * sj8)) + ((cj8 * new_r00)) + (((-1.0) * x273)));
                                        evalcond[4] = (((cj8 * x276)) + new_r11 + ((sj8 * x265)));
                                        evalcond[5] = ((((-1.0) * x270)) + ((sj9 * x265)) + x268);
                                        evalcond[6] = ((((-1.0) * x267)) + x269 + x276);
                                        evalcond[7] = ((((-1.0) * sj8 * x266 * x271)) + x274 + new_r01);
                                        evalcond[8] = (((sj9 * x274)) + new_r10 + (((-1.0) * sj8 * x273)));
                                        evalcond[9] =
                                            ((((-1.0) * cj8 * x273)) + (((-1.0) * sj8 * x265 * x271)) + new_r00);
                                        evalcond[10] = (((cj9 * new_r20)) + ((sj9 * x270)) + (((-1.0) * x268 * x271)) +
                                                        (((-1.0) * x275)));
                                        evalcond[11] = (((cj9 * new_r21)) + ((sj9 * x267)) + (((-1.0) * x269 * x271)) +
                                                        (((-1.0) * x273)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 17;
                                        vinfos[0].foffset = j2;
                                        vinfos[0].indices[0] = _ij2[0];
                                        vinfos[0].indices[1] = _ij2[1];
                                        vinfos[0].maxsolutions = _nj2;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j3;
                                        vinfos[1].indices[0] = _ij3[0];
                                        vinfos[1].indices[1] = _ij3[1];
                                        vinfos[1].maxsolutions = _nj3;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j4;
                                        vinfos[2].indices[0] = _ij4[0];
                                        vinfos[2].indices[1] = _ij4[1];
                                        vinfos[2].maxsolutions = _nj4;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j5;
                                        vinfos[3].indices[0] = _ij5[0];
                                        vinfos[3].indices[1] = _ij5[1];
                                        vinfos[3].maxsolutions = _nj5;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j8;
                                        vinfos[4].indices[0] = _ij8[0];
                                        vinfos[4].indices[1] = _ij8[1];
                                        vinfos[4].maxsolutions = _nj8;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j9;
                                        vinfos[5].indices[0] = _ij9[0];
                                        vinfos[5].indices[1] = _ij9[1];
                                        vinfos[5].maxsolutions = _nj9;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j10;
                                        vinfos[6].indices[0] = _ij10[0];
                                        vinfos[6].indices[1] = _ij10[1];
                                        vinfos[6].maxsolutions = _nj10;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j10array[1], cj10array[1], sj10array[1];
                                bool j10valid[1] = { false };
                                _nj10 = 1;
                                CheckValue<IkReal> x278 = IKPowWithIntegerCheck(cj9, -1);
                                if (!x278.valid)
                                {
                                  continue;
                                }
                                IkReal x277 = x278.value;
                                CheckValue<IkReal> x279 = IKPowWithIntegerCheck(sj8, -1);
                                if (!x279.valid)
                                {
                                  continue;
                                }
                                if (IKabs((x277 * (x279.value) *
                                           (((((-1.0) * cj8 * new_r21 * sj9)) + (((-1.0) * cj9 * new_r11)))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs((new_r21 * x277)) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((x277 * (x279.value) *
                                                 (((((-1.0) * cj8 * new_r21 * sj9)) + (((-1.0) * cj9 * new_r11)))))) +
                                          IKsqr((new_r21 * x277)) - 1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j10array[0] =
                                    IKatan2((x277 * (x279.value) *
                                             (((((-1.0) * cj8 * new_r21 * sj9)) + (((-1.0) * cj9 * new_r11))))),
                                            (new_r21 * x277));
                                sj10array[0] = IKsin(j10array[0]);
                                cj10array[0] = IKcos(j10array[0]);
                                if (j10array[0] > IKPI)
                                {
                                  j10array[0] -= IK2PI;
                                }
                                else if (j10array[0] < -IKPI)
                                {
                                  j10array[0] += IK2PI;
                                }
                                j10valid[0] = true;
                                for (int ij10 = 0; ij10 < 1; ++ij10)
                                {
                                  if (!j10valid[ij10])
                                  {
                                    continue;
                                  }
                                  _ij10[0] = ij10;
                                  _ij10[1] = -1;
                                  for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                                  {
                                    if (j10valid[iij10] &&
                                        IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j10valid[iij10] = false;
                                      _ij10[1] = iij10;
                                      break;
                                    }
                                  }
                                  j10 = j10array[ij10];
                                  cj10 = cj10array[ij10];
                                  sj10 = sj10array[ij10];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x280 = IKsin(j10);
                                    IkReal x281 = IKcos(j10);
                                    IkReal x282 = (new_r01 * sj8);
                                    IkReal x283 = (cj8 * new_r10);
                                    IkReal x284 = (cj8 * new_r11);
                                    IkReal x285 = (new_r00 * sj8);
                                    IkReal x286 = ((1.0) * sj9);
                                    IkReal x287 = (sj8 * sj9);
                                    IkReal x288 = ((1.0) * x281);
                                    IkReal x289 = (cj8 * x280);
                                    IkReal x290 = ((1.0) * x280);
                                    IkReal x291 = (sj9 * x281);
                                    evalcond[0] = ((((-1.0) * cj9 * x290)) + new_r20);
                                    evalcond[1] = ((((-1.0) * cj9 * x288)) + new_r21);
                                    evalcond[2] = (((new_r11 * sj8)) + x280 + ((cj8 * new_r01)));
                                    evalcond[3] = (((new_r10 * sj8)) + ((cj8 * new_r00)) + (((-1.0) * x288)));
                                    evalcond[4] = (((cj8 * x291)) + ((sj8 * x280)) + new_r11);
                                    evalcond[5] = (((sj9 * x280)) + x283 + (((-1.0) * x285)));
                                    evalcond[6] = (x291 + x284 + (((-1.0) * x282)));
                                    evalcond[7] = (x289 + (((-1.0) * sj8 * x281 * x286)) + new_r01);
                                    evalcond[8] = (((sj9 * x289)) + (((-1.0) * sj8 * x288)) + new_r10);
                                    evalcond[9] = ((((-1.0) * sj8 * x280 * x286)) + (((-1.0) * cj8 * x288)) + new_r00);
                                    evalcond[10] = (((cj9 * new_r20)) + ((sj9 * x285)) + (((-1.0) * x290)) +
                                                    (((-1.0) * x283 * x286)));
                                    evalcond[11] = (((cj9 * new_r21)) + ((sj9 * x282)) + (((-1.0) * x284 * x286)) +
                                                    (((-1.0) * x288)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 17;
                                    vinfos[0].foffset = j2;
                                    vinfos[0].indices[0] = _ij2[0];
                                    vinfos[0].indices[1] = _ij2[1];
                                    vinfos[0].maxsolutions = _nj2;
                                    vinfos[1].jointtype = 17;
                                    vinfos[1].foffset = j3;
                                    vinfos[1].indices[0] = _ij3[0];
                                    vinfos[1].indices[1] = _ij3[1];
                                    vinfos[1].maxsolutions = _nj3;
                                    vinfos[2].jointtype = 17;
                                    vinfos[2].foffset = j4;
                                    vinfos[2].indices[0] = _ij4[0];
                                    vinfos[2].indices[1] = _ij4[1];
                                    vinfos[2].maxsolutions = _nj4;
                                    vinfos[3].jointtype = 17;
                                    vinfos[3].foffset = j5;
                                    vinfos[3].indices[0] = _ij5[0];
                                    vinfos[3].indices[1] = _ij5[1];
                                    vinfos[3].maxsolutions = _nj5;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j8;
                                    vinfos[4].indices[0] = _ij8[0];
                                    vinfos[4].indices[1] = _ij8[1];
                                    vinfos[4].maxsolutions = _nj8;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j9;
                                    vinfos[5].indices[0] = _ij9[0];
                                    vinfos[5].indices[1] = _ij9[1];
                                    vinfos[5].maxsolutions = _nj9;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j10;
                                    vinfos[6].indices[0] = _ij10[0];
                                    vinfos[6].indices[1] = _ij10[1];
                                    vinfos[6].maxsolutions = _nj10;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j10array[1], cj10array[1], sj10array[1];
                            bool j10valid[1] = { false };
                            _nj10 = 1;
                            CheckValue<IkReal> x292 = IKPowWithIntegerCheck(IKsign(cj9), -1);
                            if (!x292.valid)
                            {
                              continue;
                            }
                            CheckValue<IkReal> x293 =
                                IKatan2WithCheck(IkReal(new_r20), IkReal(new_r21), IKFAST_ATAN2_MAGTHRESH);
                            if (!x293.valid)
                            {
                              continue;
                            }
                            j10array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x292.value))) + (x293.value));
                            sj10array[0] = IKsin(j10array[0]);
                            cj10array[0] = IKcos(j10array[0]);
                            if (j10array[0] > IKPI)
                            {
                              j10array[0] -= IK2PI;
                            }
                            else if (j10array[0] < -IKPI)
                            {
                              j10array[0] += IK2PI;
                            }
                            j10valid[0] = true;
                            for (int ij10 = 0; ij10 < 1; ++ij10)
                            {
                              if (!j10valid[ij10])
                              {
                                continue;
                              }
                              _ij10[0] = ij10;
                              _ij10[1] = -1;
                              for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                              {
                                if (j10valid[iij10] &&
                                    IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j10valid[iij10] = false;
                                  _ij10[1] = iij10;
                                  break;
                                }
                              }
                              j10 = j10array[ij10];
                              cj10 = cj10array[ij10];
                              sj10 = sj10array[ij10];
                              {
                                IkReal evalcond[12];
                                IkReal x294 = IKsin(j10);
                                IkReal x295 = IKcos(j10);
                                IkReal x296 = (new_r01 * sj8);
                                IkReal x297 = (cj8 * new_r10);
                                IkReal x298 = (cj8 * new_r11);
                                IkReal x299 = (new_r00 * sj8);
                                IkReal x300 = ((1.0) * sj9);
                                IkReal x301 = (sj8 * sj9);
                                IkReal x302 = ((1.0) * x295);
                                IkReal x303 = (cj8 * x294);
                                IkReal x304 = ((1.0) * x294);
                                IkReal x305 = (sj9 * x295);
                                evalcond[0] = ((((-1.0) * cj9 * x304)) + new_r20);
                                evalcond[1] = ((((-1.0) * cj9 * x302)) + new_r21);
                                evalcond[2] = (((new_r11 * sj8)) + x294 + ((cj8 * new_r01)));
                                evalcond[3] = (((new_r10 * sj8)) + ((cj8 * new_r00)) + (((-1.0) * x302)));
                                evalcond[4] = (((sj8 * x294)) + ((cj8 * x305)) + new_r11);
                                evalcond[5] = ((((-1.0) * x299)) + x297 + ((sj9 * x294)));
                                evalcond[6] = ((((-1.0) * x296)) + x305 + x298);
                                evalcond[7] = ((((-1.0) * sj8 * x295 * x300)) + x303 + new_r01);
                                evalcond[8] = (((sj9 * x303)) + new_r10 + (((-1.0) * sj8 * x302)));
                                evalcond[9] = ((((-1.0) * cj8 * x302)) + (((-1.0) * sj8 * x294 * x300)) + new_r00);
                                evalcond[10] =
                                    (((cj9 * new_r20)) + (((-1.0) * x297 * x300)) + ((sj9 * x299)) + (((-1.0) * x304)));
                                evalcond[11] =
                                    ((((-1.0) * x298 * x300)) + ((cj9 * new_r21)) + ((sj9 * x296)) + (((-1.0) * x302)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 17;
                                vinfos[0].foffset = j2;
                                vinfos[0].indices[0] = _ij2[0];
                                vinfos[0].indices[1] = _ij2[1];
                                vinfos[0].maxsolutions = _nj2;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j3;
                                vinfos[1].indices[0] = _ij3[0];
                                vinfos[1].indices[1] = _ij3[1];
                                vinfos[1].maxsolutions = _nj3;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j4;
                                vinfos[2].indices[0] = _ij4[0];
                                vinfos[2].indices[1] = _ij4[1];
                                vinfos[2].maxsolutions = _nj4;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j5;
                                vinfos[3].indices[0] = _ij5[0];
                                vinfos[3].indices[1] = _ij5[1];
                                vinfos[3].maxsolutions = _nj5;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j8;
                                vinfos[4].indices[0] = _ij8[0];
                                vinfos[4].indices[1] = _ij8[1];
                                vinfos[4].maxsolutions = _nj8;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j9;
                                vinfos[5].indices[0] = _ij9[0];
                                vinfos[5].indices[1] = _ij9[1];
                                vinfos[5].maxsolutions = _nj9;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j10;
                                vinfos[6].indices[0] = _ij10[0];
                                vinfos[6].indices[1] = _ij10[1];
                                vinfos[6].maxsolutions = _nj10;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                IkReal j10array[1], cj10array[1], sj10array[1];
                bool j10valid[1] = { false };
                _nj10 = 1;
                CheckValue<IkReal> x306 = IKPowWithIntegerCheck(IKsign(cj9), -1);
                if (!x306.valid)
                {
                  continue;
                }
                CheckValue<IkReal> x307 = IKatan2WithCheck(IkReal(new_r20), IkReal(new_r21), IKFAST_ATAN2_MAGTHRESH);
                if (!x307.valid)
                {
                  continue;
                }
                j10array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x306.value))) + (x307.value));
                sj10array[0] = IKsin(j10array[0]);
                cj10array[0] = IKcos(j10array[0]);
                if (j10array[0] > IKPI)
                {
                  j10array[0] -= IK2PI;
                }
                else if (j10array[0] < -IKPI)
                {
                  j10array[0] += IK2PI;
                }
                j10valid[0] = true;
                for (int ij10 = 0; ij10 < 1; ++ij10)
                {
                  if (!j10valid[ij10])
                  {
                    continue;
                  }
                  _ij10[0] = ij10;
                  _ij10[1] = -1;
                  for (int iij10 = ij10 + 1; iij10 < 1; ++iij10)
                  {
                    if (j10valid[iij10] && IKabs(cj10array[ij10] - cj10array[iij10]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj10array[ij10] - sj10array[iij10]) < IKFAST_SOLUTION_THRESH)
                    {
                      j10valid[iij10] = false;
                      _ij10[1] = iij10;
                      break;
                    }
                  }
                  j10 = j10array[ij10];
                  cj10 = cj10array[ij10];
                  sj10 = sj10array[ij10];
                  {
                    IkReal evalcond[2];
                    IkReal x308 = ((1.0) * cj9);
                    evalcond[0] = (new_r20 + (((-1.0) * x308 * (IKsin(j10)))));
                    evalcond[1] = (new_r21 + (((-1.0) * x308 * (IKcos(j10)))));
                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                    {
                      continue;
                    }
                  }

                  {
                    IkReal j8eval[3];
                    j8eval[0] = cj9;
                    j8eval[1] = IKsign(cj9);
                    j8eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                    if (IKabs(j8eval[0]) < 0.0000010000000000 || IKabs(j8eval[1]) < 0.0000010000000000 ||
                        IKabs(j8eval[2]) < 0.0000010000000000)
                    {
                      {
                        IkReal j8eval[2];
                        j8eval[0] = cj9;
                        j8eval[1] = new_r11;
                        if (IKabs(j8eval[0]) < 0.0000010000000000 || IKabs(j8eval[1]) < 0.0000010000000000)
                        {
                          {
                            IkReal evalcond[5];
                            bool bgotonextstatement = true;
                            do
                            {
                              evalcond[0] = ((-3.14159265358979) +
                                             (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j9)))),
                                                     6.28318530717959)));
                              evalcond[1] = new_r12;
                              evalcond[2] = new_r02;
                              evalcond[3] = new_r20;
                              evalcond[4] = new_r21;
                              if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                  IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                  IKabs(evalcond[4]) < 0.0000050000000000)
                              {
                                bgotonextstatement = false;
                                {
                                  IkReal j8eval[3];
                                  sj9 = 1.0;
                                  cj9 = 0;
                                  j9 = 1.5707963267949;
                                  IkReal x309 = ((1.0) * sj10);
                                  IkReal x310 = (((new_r10 * new_r11)) + ((new_r00 * new_r01)));
                                  j8eval[0] = x310;
                                  j8eval[1] = IKsign(x310);
                                  j8eval[2] = ((IKabs(((((-1.0) * new_r00 * x309)) + (((-1.0) * new_r11 * x309))))) +
                                               (IKabs((((new_r01 * sj10)) + (((-1.0) * new_r10 * x309))))));
                                  if (IKabs(j8eval[0]) < 0.0000010000000000 || IKabs(j8eval[1]) < 0.0000010000000000 ||
                                      IKabs(j8eval[2]) < 0.0000010000000000)
                                  {
                                    {
                                      IkReal j8eval[3];
                                      sj9 = 1.0;
                                      cj9 = 0;
                                      j9 = 1.5707963267949;
                                      IkReal x311 = ((1.0) * sj10);
                                      IkReal x312 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                      j8eval[0] = x312;
                                      j8eval[1] = IKsign(x312);
                                      j8eval[2] =
                                          ((IKabs(((((-1.0) * cj10 * new_r11)) + (((-1.0) * new_r01 * x311))))) +
                                           (IKabs((((cj10 * new_r01)) + (((-1.0) * new_r11 * x311))))));
                                      if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                          IKabs(j8eval[1]) < 0.0000010000000000 ||
                                          IKabs(j8eval[2]) < 0.0000010000000000)
                                      {
                                        {
                                          IkReal j8eval[3];
                                          sj9 = 1.0;
                                          cj9 = 0;
                                          j9 = 1.5707963267949;
                                          IkReal x313 = (((cj10 * new_r01)) + ((new_r11 * sj10)));
                                          j8eval[0] = x313;
                                          j8eval[1] = IKsign(x313);
                                          j8eval[2] =
                                              ((IKabs(((-1.0) + (cj10 * cj10) + (new_r01 * new_r01)))) +
                                               (IKabs(((((-1.0) * cj10 * sj10)) + (((-1.0) * new_r01 * new_r11))))));
                                          if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                              IKabs(j8eval[1]) < 0.0000010000000000 ||
                                              IKabs(j8eval[2]) < 0.0000010000000000)
                                          {
                                            {
                                              IkReal evalcond[1];
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                IkReal x315 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                if (IKabs(x315) == 0)
                                                {
                                                  continue;
                                                }
                                                IkReal x314 = pow(x315, -0.5);
                                                CheckValue<IkReal> x316 = IKatan2WithCheck(
                                                    IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                if (!x316.valid)
                                                {
                                                  continue;
                                                }
                                                IkReal gconst0 = ((-1.0) * (x316.value));
                                                IkReal gconst1 = ((-1.0) * new_r01 * x314);
                                                IkReal gconst2 = (new_r11 * x314);
                                                CheckValue<IkReal> x317 = IKatan2WithCheck(
                                                    IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                if (!x317.valid)
                                                {
                                                  continue;
                                                }
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs((j10 + (x317.value))))),
                                                             6.28318530717959)));
                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j8eval[3];
                                                    CheckValue<IkReal> x320 = IKatan2WithCheck(
                                                        IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                    if (!x320.valid)
                                                    {
                                                      continue;
                                                    }
                                                    IkReal x318 = ((-1.0) * (x320.value));
                                                    IkReal x319 = x314;
                                                    sj9 = 1.0;
                                                    cj9 = 0;
                                                    j9 = 1.5707963267949;
                                                    sj10 = gconst1;
                                                    cj10 = gconst2;
                                                    j10 = x318;
                                                    IkReal gconst0 = x318;
                                                    IkReal gconst1 = ((-1.0) * new_r01 * x319);
                                                    IkReal gconst2 = (new_r11 * x319);
                                                    IkReal x321 = new_r01 * new_r01;
                                                    IkReal x322 = (new_r00 * new_r01);
                                                    IkReal x323 = (((new_r10 * new_r11)) + x322);
                                                    IkReal x324 = x314;
                                                    IkReal x325 = (new_r01 * x324);
                                                    j8eval[0] = x323;
                                                    j8eval[1] =
                                                        ((IKabs(((((-1.0) * x321 * x324)) + ((new_r10 * x325))))) +
                                                         (IKabs((((x322 * x324)) + ((new_r11 * x325))))));
                                                    j8eval[2] = IKsign(x323);
                                                    if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                        IKabs(j8eval[1]) < 0.0000010000000000 ||
                                                        IKabs(j8eval[2]) < 0.0000010000000000)
                                                    {
                                                      {
                                                        IkReal j8eval[2];
                                                        CheckValue<IkReal> x328 = IKatan2WithCheck(
                                                            IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x328.valid)
                                                        {
                                                          continue;
                                                        }
                                                        IkReal x326 = ((-1.0) * (x328.value));
                                                        IkReal x327 = x314;
                                                        sj9 = 1.0;
                                                        cj9 = 0;
                                                        j9 = 1.5707963267949;
                                                        sj10 = gconst1;
                                                        cj10 = gconst2;
                                                        j10 = x326;
                                                        IkReal gconst0 = x326;
                                                        IkReal gconst1 = ((-1.0) * new_r01 * x327);
                                                        IkReal gconst2 = (new_r11 * x327);
                                                        IkReal x329 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                        j8eval[0] = x329;
                                                        j8eval[1] = IKsign(x329);
                                                        if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                            IKabs(j8eval[1]) < 0.0000010000000000)
                                                        {
                                                          {
                                                            IkReal j8eval[1];
                                                            CheckValue<IkReal> x332 =
                                                                IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11),
                                                                                 IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x332.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x330 = ((-1.0) * (x332.value));
                                                            IkReal x331 = x314;
                                                            sj9 = 1.0;
                                                            cj9 = 0;
                                                            j9 = 1.5707963267949;
                                                            sj10 = gconst1;
                                                            cj10 = gconst2;
                                                            j10 = x330;
                                                            IkReal gconst0 = x330;
                                                            IkReal gconst1 = ((-1.0) * new_r01 * x331);
                                                            IkReal gconst2 = (new_r11 * x331);
                                                            IkReal x333 = new_r01 * new_r01;
                                                            IkReal x334 = new_r11 * new_r11;
                                                            IkReal x335 = ((1.0) * x333);
                                                            CheckValue<IkReal> x341 =
                                                                IKPowWithIntegerCheck((x333 + x334), -1);
                                                            if (!x341.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x336 = x341.value;
                                                            CheckValue<IkReal> x342 = IKPowWithIntegerCheck(
                                                                ((((-1.0) * x334)) + (((-1.0) * x335))), -1);
                                                            if (!x342.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x337 = x342.value;
                                                            IkReal x338 = ((1.0) * x337);
                                                            IkReal x339 = (new_r11 * x338);
                                                            IkReal x340 = (new_r01 * x338);
                                                            j8eval[0] = ((IKabs(((((-1.0) * x339 *
                                                                                   (new_r01 * new_r01 * new_r01))) +
                                                                                 (((-1.0) * new_r01 * x339)) +
                                                                                 (((-1.0) * new_r01 * x339 *
                                                                                   (new_r11 * new_r11)))))) +
                                                                         (IKabs((((x333 * x334 * x336)) +
                                                                                 ((x336 * (x334 * x334))) +
                                                                                 (((-1.0) * x335 * x336))))));
                                                            if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                            {
                                                              {
                                                                IkReal evalcond[2];
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r00)));
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j8eval[1];
                                                                      CheckValue<IkReal> x344 =
                                                                          IKatan2WithCheck(IkReal(new_r01), IkReal(0),
                                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x344.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      IkReal x343 = ((-1.0) * (x344.value));
                                                                      sj9 = 1.0;
                                                                      cj9 = 0;
                                                                      j9 = 1.5707963267949;
                                                                      sj10 = gconst1;
                                                                      cj10 = gconst2;
                                                                      j10 = x343;
                                                                      new_r11 = 0;
                                                                      new_r00 = 0;
                                                                      IkReal gconst0 = x343;
                                                                      IkReal x345 = new_r01 * new_r01;
                                                                      if (IKabs(x345) == 0)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      IkReal gconst1 =
                                                                          ((-1.0) * new_r01 * (pow(x345, -0.5)));
                                                                      IkReal gconst2 = 0;
                                                                      j8eval[0] = new_r01;
                                                                      if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                      {
                                                                        {
                                                                          IkReal j8eval[1];
                                                                          CheckValue<IkReal> x347 =
                                                                              IKatan2WithCheck(IkReal(new_r01),
                                                                                               IkReal(0),
                                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                                          if (!x347.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          IkReal x346 = ((-1.0) * (x347.value));
                                                                          sj9 = 1.0;
                                                                          cj9 = 0;
                                                                          j9 = 1.5707963267949;
                                                                          sj10 = gconst1;
                                                                          cj10 = gconst2;
                                                                          j10 = x346;
                                                                          new_r11 = 0;
                                                                          new_r00 = 0;
                                                                          IkReal gconst0 = x346;
                                                                          IkReal x348 = new_r01 * new_r01;
                                                                          if (IKabs(x348) == 0)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          IkReal gconst1 =
                                                                              ((-1.0) * new_r01 * (pow(x348, -0.5)));
                                                                          IkReal gconst2 = 0;
                                                                          j8eval[0] = new_r10;
                                                                          if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                          {
                                                                            {
                                                                              IkReal j8array[2], cj8array[2],
                                                                                  sj8array[2];
                                                                              bool j8valid[2] = { false };
                                                                              _nj8 = 2;
                                                                              CheckValue<IkReal> x349 =
                                                                                  IKPowWithIntegerCheck(gconst1, -1);
                                                                              if (!x349.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              cj8array[0] =
                                                                                  ((-1.0) * new_r01 * (x349.value));
                                                                              if (cj8array[0] >=
                                                                                      -1 - IKFAST_SINCOS_THRESH &&
                                                                                  cj8array[0] <=
                                                                                      1 + IKFAST_SINCOS_THRESH)
                                                                              {
                                                                                j8valid[0] = j8valid[1] = true;
                                                                                j8array[0] = IKacos(cj8array[0]);
                                                                                sj8array[0] = IKsin(j8array[0]);
                                                                                cj8array[1] = cj8array[0];
                                                                                j8array[1] = -j8array[0];
                                                                                sj8array[1] = -sj8array[0];
                                                                              }
                                                                              else if (isnan(cj8array[0]))
                                                                              {
                                                                                // probably any value will work
                                                                                j8valid[0] = true;
                                                                                cj8array[0] = 1;
                                                                                sj8array[0] = 0;
                                                                                j8array[0] = 0;
                                                                              }
                                                                              for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                              {
                                                                                if (!j8valid[ij8])
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                _ij8[0] = ij8;
                                                                                _ij8[1] = -1;
                                                                                for (int iij8 = ij8 + 1; iij8 < 2;
                                                                                     ++iij8)
                                                                                {
                                                                                  if (j8valid[iij8] &&
                                                                                      IKabs(cj8array[ij8] -
                                                                                            cj8array[iij8]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj8array[ij8] -
                                                                                            sj8array[iij8]) <
                                                                                          IKFAST_SOLUTION_THRESH)
                                                                                  {
                                                                                    j8valid[iij8] = false;
                                                                                    _ij8[1] = iij8;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j8 = j8array[ij8];
                                                                                cj8 = cj8array[ij8];
                                                                                sj8 = sj8array[ij8];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x350 = IKsin(j8);
                                                                                  IkReal x351 = IKcos(j8);
                                                                                  evalcond[0] = (new_r10 * x350);
                                                                                  evalcond[1] = (gconst1 * x350);
                                                                                  evalcond[2] =
                                                                                      ((-1.0) * new_r01 * x350);
                                                                                  evalcond[3] =
                                                                                      (((new_r01 * x351)) + gconst1);
                                                                                  evalcond[4] =
                                                                                      (gconst1 + ((new_r10 * x351)));
                                                                                  evalcond[5] =
                                                                                      (((gconst1 * x351)) + new_r10);
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 17;
                                                                                  vinfos[0].foffset = j2;
                                                                                  vinfos[0].indices[0] = _ij2[0];
                                                                                  vinfos[0].indices[1] = _ij2[1];
                                                                                  vinfos[0].maxsolutions = _nj2;
                                                                                  vinfos[1].jointtype = 17;
                                                                                  vinfos[1].foffset = j3;
                                                                                  vinfos[1].indices[0] = _ij3[0];
                                                                                  vinfos[1].indices[1] = _ij3[1];
                                                                                  vinfos[1].maxsolutions = _nj3;
                                                                                  vinfos[2].jointtype = 17;
                                                                                  vinfos[2].foffset = j4;
                                                                                  vinfos[2].indices[0] = _ij4[0];
                                                                                  vinfos[2].indices[1] = _ij4[1];
                                                                                  vinfos[2].maxsolutions = _nj4;
                                                                                  vinfos[3].jointtype = 17;
                                                                                  vinfos[3].foffset = j5;
                                                                                  vinfos[3].indices[0] = _ij5[0];
                                                                                  vinfos[3].indices[1] = _ij5[1];
                                                                                  vinfos[3].maxsolutions = _nj5;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j8;
                                                                                  vinfos[4].indices[0] = _ij8[0];
                                                                                  vinfos[4].indices[1] = _ij8[1];
                                                                                  vinfos[4].maxsolutions = _nj8;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j9;
                                                                                  vinfos[5].indices[0] = _ij9[0];
                                                                                  vinfos[5].indices[1] = _ij9[1];
                                                                                  vinfos[5].maxsolutions = _nj9;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j10;
                                                                                  vinfos[6].indices[0] = _ij10[0];
                                                                                  vinfos[6].indices[1] = _ij10[1];
                                                                                  vinfos[6].maxsolutions = _nj10;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            {
                                                                              IkReal j8array[2], cj8array[2],
                                                                                  sj8array[2];
                                                                              bool j8valid[2] = { false };
                                                                              _nj8 = 2;
                                                                              CheckValue<IkReal> x352 =
                                                                                  IKPowWithIntegerCheck(new_r10, -1);
                                                                              if (!x352.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              cj8array[0] =
                                                                                  ((-1.0) * gconst1 * (x352.value));
                                                                              if (cj8array[0] >=
                                                                                      -1 - IKFAST_SINCOS_THRESH &&
                                                                                  cj8array[0] <=
                                                                                      1 + IKFAST_SINCOS_THRESH)
                                                                              {
                                                                                j8valid[0] = j8valid[1] = true;
                                                                                j8array[0] = IKacos(cj8array[0]);
                                                                                sj8array[0] = IKsin(j8array[0]);
                                                                                cj8array[1] = cj8array[0];
                                                                                j8array[1] = -j8array[0];
                                                                                sj8array[1] = -sj8array[0];
                                                                              }
                                                                              else if (isnan(cj8array[0]))
                                                                              {
                                                                                // probably any value will work
                                                                                j8valid[0] = true;
                                                                                cj8array[0] = 1;
                                                                                sj8array[0] = 0;
                                                                                j8array[0] = 0;
                                                                              }
                                                                              for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                              {
                                                                                if (!j8valid[ij8])
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                _ij8[0] = ij8;
                                                                                _ij8[1] = -1;
                                                                                for (int iij8 = ij8 + 1; iij8 < 2;
                                                                                     ++iij8)
                                                                                {
                                                                                  if (j8valid[iij8] &&
                                                                                      IKabs(cj8array[ij8] -
                                                                                            cj8array[iij8]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj8array[ij8] -
                                                                                            sj8array[iij8]) <
                                                                                          IKFAST_SOLUTION_THRESH)
                                                                                  {
                                                                                    j8valid[iij8] = false;
                                                                                    _ij8[1] = iij8;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j8 = j8array[ij8];
                                                                                cj8 = cj8array[ij8];
                                                                                sj8 = sj8array[ij8];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x353 = IKsin(j8);
                                                                                  IkReal x354 = IKcos(j8);
                                                                                  IkReal x355 = (gconst1 * x354);
                                                                                  evalcond[0] = (new_r10 * x353);
                                                                                  evalcond[1] = (gconst1 * x353);
                                                                                  evalcond[2] =
                                                                                      ((-1.0) * new_r01 * x353);
                                                                                  evalcond[3] =
                                                                                      (((new_r01 * x354)) + gconst1);
                                                                                  evalcond[4] = (x355 + new_r01);
                                                                                  evalcond[5] = (x355 + new_r10);
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 17;
                                                                                  vinfos[0].foffset = j2;
                                                                                  vinfos[0].indices[0] = _ij2[0];
                                                                                  vinfos[0].indices[1] = _ij2[1];
                                                                                  vinfos[0].maxsolutions = _nj2;
                                                                                  vinfos[1].jointtype = 17;
                                                                                  vinfos[1].foffset = j3;
                                                                                  vinfos[1].indices[0] = _ij3[0];
                                                                                  vinfos[1].indices[1] = _ij3[1];
                                                                                  vinfos[1].maxsolutions = _nj3;
                                                                                  vinfos[2].jointtype = 17;
                                                                                  vinfos[2].foffset = j4;
                                                                                  vinfos[2].indices[0] = _ij4[0];
                                                                                  vinfos[2].indices[1] = _ij4[1];
                                                                                  vinfos[2].maxsolutions = _nj4;
                                                                                  vinfos[3].jointtype = 17;
                                                                                  vinfos[3].foffset = j5;
                                                                                  vinfos[3].indices[0] = _ij5[0];
                                                                                  vinfos[3].indices[1] = _ij5[1];
                                                                                  vinfos[3].maxsolutions = _nj5;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j8;
                                                                                  vinfos[4].indices[0] = _ij8[0];
                                                                                  vinfos[4].indices[1] = _ij8[1];
                                                                                  vinfos[4].maxsolutions = _nj8;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j9;
                                                                                  vinfos[5].indices[0] = _ij9[0];
                                                                                  vinfos[5].indices[1] = _ij9[1];
                                                                                  vinfos[5].maxsolutions = _nj9;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j10;
                                                                                  vinfos[6].indices[0] = _ij10[0];
                                                                                  vinfos[6].indices[1] = _ij10[1];
                                                                                  vinfos[6].maxsolutions = _nj10;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        {
                                                                          IkReal j8array[2], cj8array[2], sj8array[2];
                                                                          bool j8valid[2] = { false };
                                                                          _nj8 = 2;
                                                                          CheckValue<IkReal> x356 =
                                                                              IKPowWithIntegerCheck(new_r01, -1);
                                                                          if (!x356.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          cj8array[0] =
                                                                              ((-1.0) * gconst1 * (x356.value));
                                                                          if (cj8array[0] >= -1 - IKFAST_SINCOS_THRESH &&
                                                                              cj8array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                          {
                                                                            j8valid[0] = j8valid[1] = true;
                                                                            j8array[0] = IKacos(cj8array[0]);
                                                                            sj8array[0] = IKsin(j8array[0]);
                                                                            cj8array[1] = cj8array[0];
                                                                            j8array[1] = -j8array[0];
                                                                            sj8array[1] = -sj8array[0];
                                                                          }
                                                                          else if (isnan(cj8array[0]))
                                                                          {
                                                                            // probably any value will work
                                                                            j8valid[0] = true;
                                                                            cj8array[0] = 1;
                                                                            sj8array[0] = 0;
                                                                            j8array[0] = 0;
                                                                          }
                                                                          for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                          {
                                                                            if (!j8valid[ij8])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij8[0] = ij8;
                                                                            _ij8[1] = -1;
                                                                            for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                                            {
                                                                              if (j8valid[iij8] &&
                                                                                  IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j8valid[iij8] = false;
                                                                                _ij8[1] = iij8;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j8 = j8array[ij8];
                                                                            cj8 = cj8array[ij8];
                                                                            sj8 = sj8array[ij8];
                                                                            {
                                                                              IkReal evalcond[6];
                                                                              IkReal x357 = IKsin(j8);
                                                                              IkReal x358 = IKcos(j8);
                                                                              IkReal x359 = (gconst1 * x358);
                                                                              evalcond[0] = (new_r10 * x357);
                                                                              evalcond[1] = (gconst1 * x357);
                                                                              evalcond[2] = ((-1.0) * new_r01 * x357);
                                                                              evalcond[3] =
                                                                                  (gconst1 + ((new_r10 * x358)));
                                                                              evalcond[4] = (x359 + new_r01);
                                                                              evalcond[5] = (x359 + new_r10);
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 17;
                                                                              vinfos[0].foffset = j2;
                                                                              vinfos[0].indices[0] = _ij2[0];
                                                                              vinfos[0].indices[1] = _ij2[1];
                                                                              vinfos[0].maxsolutions = _nj2;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j3;
                                                                              vinfos[1].indices[0] = _ij3[0];
                                                                              vinfos[1].indices[1] = _ij3[1];
                                                                              vinfos[1].maxsolutions = _nj3;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j4;
                                                                              vinfos[2].indices[0] = _ij4[0];
                                                                              vinfos[2].indices[1] = _ij4[1];
                                                                              vinfos[2].maxsolutions = _nj4;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j5;
                                                                              vinfos[3].indices[0] = _ij5[0];
                                                                              vinfos[3].indices[1] = _ij5[1];
                                                                              vinfos[3].maxsolutions = _nj5;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j8;
                                                                              vinfos[4].indices[0] = _ij8[0];
                                                                              vinfos[4].indices[1] = _ij8[1];
                                                                              vinfos[4].maxsolutions = _nj8;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j9;
                                                                              vinfos[5].indices[0] = _ij9[0];
                                                                              vinfos[5].indices[1] = _ij9[1];
                                                                              vinfos[5].maxsolutions = _nj9;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j10;
                                                                              vinfos[6].indices[0] = _ij10[0];
                                                                              vinfos[6].indices[1] = _ij10[1];
                                                                              vinfos[6].maxsolutions = _nj10;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    evalcond[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                    evalcond[1] = gconst1;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[1]) < 0.0000050000000000)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j8eval[3];
                                                                        CheckValue<IkReal> x361 =
                                                                            IKatan2WithCheck(IkReal(new_r01),
                                                                                             IkReal(new_r11),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x361.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        IkReal x360 = ((-1.0) * (x361.value));
                                                                        sj9 = 1.0;
                                                                        cj9 = 0;
                                                                        j9 = 1.5707963267949;
                                                                        sj10 = gconst1;
                                                                        cj10 = gconst2;
                                                                        j10 = x360;
                                                                        new_r00 = 0;
                                                                        new_r10 = 0;
                                                                        new_r21 = 0;
                                                                        new_r22 = 0;
                                                                        IkReal gconst0 = x360;
                                                                        IkReal gconst1 = ((-1.0) * new_r01);
                                                                        IkReal gconst2 = new_r11;
                                                                        j8eval[0] = -1.0;
                                                                        j8eval[1] = ((IKabs(new_r01 * new_r01)) +
                                                                                     (IKabs((new_r01 * new_r11))));
                                                                        j8eval[2] = -1.0;
                                                                        if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                            IKabs(j8eval[1]) < 0.0000010000000000 ||
                                                                            IKabs(j8eval[2]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j8eval[3];
                                                                            CheckValue<IkReal> x363 = IKatan2WithCheck(
                                                                                IkReal(new_r01), IkReal(new_r11),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x363.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal x362 = ((-1.0) * (x363.value));
                                                                            sj9 = 1.0;
                                                                            cj9 = 0;
                                                                            j9 = 1.5707963267949;
                                                                            sj10 = gconst1;
                                                                            cj10 = gconst2;
                                                                            j10 = x362;
                                                                            new_r00 = 0;
                                                                            new_r10 = 0;
                                                                            new_r21 = 0;
                                                                            new_r22 = 0;
                                                                            IkReal gconst0 = x362;
                                                                            IkReal gconst1 = ((-1.0) * new_r01);
                                                                            IkReal gconst2 = new_r11;
                                                                            j8eval[0] = -1.0;
                                                                            j8eval[1] = -1.0;
                                                                            j8eval[2] =
                                                                                ((IKabs((new_r01 * new_r11))) +
                                                                                 (IKabs(((1.0) +
                                                                                         (((-1.0) *
                                                                                           (new_r01 * new_r01)))))));
                                                                            if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                                IKabs(j8eval[1]) < 0.0000010000000000 ||
                                                                                IKabs(j8eval[2]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal j8eval[3];
                                                                                CheckValue<IkReal> x365 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(new_r01),
                                                                                        IkReal(new_r11),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x365.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x364 = ((-1.0) * (x365.value));
                                                                                sj9 = 1.0;
                                                                                cj9 = 0;
                                                                                j9 = 1.5707963267949;
                                                                                sj10 = gconst1;
                                                                                cj10 = gconst2;
                                                                                j10 = x364;
                                                                                new_r00 = 0;
                                                                                new_r10 = 0;
                                                                                new_r21 = 0;
                                                                                new_r22 = 0;
                                                                                IkReal gconst0 = x364;
                                                                                IkReal gconst1 = ((-1.0) * new_r01);
                                                                                IkReal gconst2 = new_r11;
                                                                                j8eval[0] = 1.0;
                                                                                j8eval[1] =
                                                                                    ((((0.5) *
                                                                                       (IKabs(
                                                                                           ((-1.0) +
                                                                                            (((2.0) * (new_r01 *
                                                                                                       new_r01)))))))) +
                                                                                     (IKabs((new_r01 * new_r11))));
                                                                                j8eval[2] = 1.0;
                                                                                if (IKabs(j8eval[0]) <
                                                                                        0.0000010000000000 ||
                                                                                    IKabs(j8eval[1]) <
                                                                                        0.0000010000000000 ||
                                                                                    IKabs(j8eval[2]) <
                                                                                        0.0000010000000000)
                                                                                {
                                                                                  continue;  // 3 cases reached
                                                                                }
                                                                                else
                                                                                {
                                                                                  {
                                                                                    IkReal j8array[1], cj8array[1],
                                                                                        sj8array[1];
                                                                                    bool j8valid[1] = { false };
                                                                                    _nj8 = 1;
                                                                                    IkReal x366 = ((1.0) * new_r11);
                                                                                    CheckValue<IkReal> x367 =
                                                                                        IKPowWithIntegerCheck(
                                                                                            IKsign(
                                                                                                ((new_r01 * new_r01) +
                                                                                                 (new_r11 * new_r11))),
                                                                                            -1);
                                                                                    if (!x367.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x368 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(
                                                                                                (((gconst2 * new_r01)) +
                                                                                                 (((-1.0) * gconst1 *
                                                                                                   x366)))),
                                                                                            IkReal(((((-1.0) * gconst1 *
                                                                                                      new_r01)) +
                                                                                                    (((-1.0) * gconst2 *
                                                                                                      x366)))),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x368.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    j8array[0] = ((-1.5707963267949) +
                                                                                                  (((1.5707963267949) *
                                                                                                    (x367.value))) +
                                                                                                  (x368.value));
                                                                                    sj8array[0] = IKsin(j8array[0]);
                                                                                    cj8array[0] = IKcos(j8array[0]);
                                                                                    if (j8array[0] > IKPI)
                                                                                    {
                                                                                      j8array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j8array[0] < -IKPI)
                                                                                    {
                                                                                      j8array[0] += IK2PI;
                                                                                    }
                                                                                    j8valid[0] = true;
                                                                                    for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                    {
                                                                                      if (!j8valid[ij8])
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      _ij8[0] = ij8;
                                                                                      _ij8[1] = -1;
                                                                                      for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                           ++iij8)
                                                                                      {
                                                                                        if (j8valid[iij8] &&
                                                                                            IKabs(cj8array[ij8] -
                                                                                                  cj8array[iij8]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj8array[ij8] -
                                                                                                  sj8array[iij8]) <
                                                                                                IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                          j8valid[iij8] = false;
                                                                                          _ij8[1] = iij8;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j8 = j8array[ij8];
                                                                                      cj8 = cj8array[ij8];
                                                                                      sj8 = sj8array[ij8];
                                                                                      {
                                                                                        IkReal evalcond[6];
                                                                                        IkReal x369 = IKsin(j8);
                                                                                        IkReal x370 = IKcos(j8);
                                                                                        IkReal x371 = (gconst1 * x370);
                                                                                        IkReal x372 = (gconst1 * x369);
                                                                                        IkReal x373 = (gconst2 * x370);
                                                                                        IkReal x374 = ((1.0) * x369);
                                                                                        IkReal x375 = (gconst2 * x374);
                                                                                        evalcond[0] =
                                                                                            (gconst1 +
                                                                                             ((new_r01 * x370)) +
                                                                                             ((new_r11 * x369)));
                                                                                        evalcond[1] =
                                                                                            (x373 + x372 + new_r11);
                                                                                        evalcond[2] =
                                                                                            ((((-1.0) * x375)) + x371);
                                                                                        evalcond[3] =
                                                                                            (gconst2 +
                                                                                             (((-1.0) * new_r01 * x374)) +
                                                                                             ((new_r11 * x370)));
                                                                                        evalcond[4] =
                                                                                            ((((-1.0) * x375)) + x371 +
                                                                                             new_r01);
                                                                                        evalcond[5] =
                                                                                            ((((-1.0) * x373)) +
                                                                                             (((-1.0) * x372)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[4]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[5]) >
                                                                                                IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 17;
                                                                                        vinfos[0].foffset = j2;
                                                                                        vinfos[0].indices[0] = _ij2[0];
                                                                                        vinfos[0].indices[1] = _ij2[1];
                                                                                        vinfos[0].maxsolutions = _nj2;
                                                                                        vinfos[1].jointtype = 17;
                                                                                        vinfos[1].foffset = j3;
                                                                                        vinfos[1].indices[0] = _ij3[0];
                                                                                        vinfos[1].indices[1] = _ij3[1];
                                                                                        vinfos[1].maxsolutions = _nj3;
                                                                                        vinfos[2].jointtype = 17;
                                                                                        vinfos[2].foffset = j4;
                                                                                        vinfos[2].indices[0] = _ij4[0];
                                                                                        vinfos[2].indices[1] = _ij4[1];
                                                                                        vinfos[2].maxsolutions = _nj4;
                                                                                        vinfos[3].jointtype = 17;
                                                                                        vinfos[3].foffset = j5;
                                                                                        vinfos[3].indices[0] = _ij5[0];
                                                                                        vinfos[3].indices[1] = _ij5[1];
                                                                                        vinfos[3].maxsolutions = _nj5;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j8;
                                                                                        vinfos[4].indices[0] = _ij8[0];
                                                                                        vinfos[4].indices[1] = _ij8[1];
                                                                                        vinfos[4].maxsolutions = _nj8;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j9;
                                                                                        vinfos[5].indices[0] = _ij9[0];
                                                                                        vinfos[5].indices[1] = _ij9[1];
                                                                                        vinfos[5].maxsolutions = _nj9;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j10;
                                                                                        vinfos[6].indices[0] = _ij10[0];
                                                                                        vinfos[6].indices[1] = _ij10[1];
                                                                                        vinfos[6].maxsolutions = _nj10;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j8array[1], cj8array[1],
                                                                                    sj8array[1];
                                                                                bool j8valid[1] = { false };
                                                                                _nj8 = 1;
                                                                                CheckValue<IkReal> x376 =
                                                                                    IKPowWithIntegerCheck(
                                                                                        IKsign(((((-1.0) * (gconst2 *
                                                                                                            gconst2))) +
                                                                                                (((-1.0) * (gconst1 *
                                                                                                            gconst1))))),
                                                                                        -1);
                                                                                if (!x376.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                CheckValue<IkReal> x377 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal((gconst1 * new_r11)),
                                                                                        IkReal((gconst2 * new_r11)),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x377.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                j8array[0] = ((-1.5707963267949) +
                                                                                              (((1.5707963267949) *
                                                                                                (x376.value))) +
                                                                                              (x377.value));
                                                                                sj8array[0] = IKsin(j8array[0]);
                                                                                cj8array[0] = IKcos(j8array[0]);
                                                                                if (j8array[0] > IKPI)
                                                                                {
                                                                                  j8array[0] -= IK2PI;
                                                                                }
                                                                                else if (j8array[0] < -IKPI)
                                                                                {
                                                                                  j8array[0] += IK2PI;
                                                                                }
                                                                                j8valid[0] = true;
                                                                                for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                {
                                                                                  if (!j8valid[ij8])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij8[0] = ij8;
                                                                                  _ij8[1] = -1;
                                                                                  for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                       ++iij8)
                                                                                  {
                                                                                    if (j8valid[iij8] &&
                                                                                        IKabs(cj8array[ij8] -
                                                                                              cj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj8array[ij8] -
                                                                                              sj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j8valid[iij8] = false;
                                                                                      _ij8[1] = iij8;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j8 = j8array[ij8];
                                                                                  cj8 = cj8array[ij8];
                                                                                  sj8 = sj8array[ij8];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x378 = IKsin(j8);
                                                                                    IkReal x379 = IKcos(j8);
                                                                                    IkReal x380 = (gconst1 * x379);
                                                                                    IkReal x381 = (gconst1 * x378);
                                                                                    IkReal x382 = (gconst2 * x379);
                                                                                    IkReal x383 = ((1.0) * x378);
                                                                                    IkReal x384 = (gconst2 * x383);
                                                                                    evalcond[0] =
                                                                                        (gconst1 + ((new_r01 * x379)) +
                                                                                         ((new_r11 * x378)));
                                                                                    evalcond[1] =
                                                                                        (x382 + x381 + new_r11);
                                                                                    evalcond[2] =
                                                                                        (x380 + (((-1.0) * x384)));
                                                                                    evalcond[3] =
                                                                                        (gconst2 +
                                                                                         (((-1.0) * new_r01 * x383)) +
                                                                                         ((new_r11 * x379)));
                                                                                    evalcond[4] =
                                                                                        (x380 + (((-1.0) * x384)) +
                                                                                         new_r01);
                                                                                    evalcond[5] = ((((-1.0) * x381)) +
                                                                                                   (((-1.0) * x382)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j2;
                                                                                    vinfos[0].indices[0] = _ij2[0];
                                                                                    vinfos[0].indices[1] = _ij2[1];
                                                                                    vinfos[0].maxsolutions = _nj2;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j3;
                                                                                    vinfos[1].indices[0] = _ij3[0];
                                                                                    vinfos[1].indices[1] = _ij3[1];
                                                                                    vinfos[1].maxsolutions = _nj3;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j4;
                                                                                    vinfos[2].indices[0] = _ij4[0];
                                                                                    vinfos[2].indices[1] = _ij4[1];
                                                                                    vinfos[2].maxsolutions = _nj4;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j5;
                                                                                    vinfos[3].indices[0] = _ij5[0];
                                                                                    vinfos[3].indices[1] = _ij5[1];
                                                                                    vinfos[3].maxsolutions = _nj5;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j8;
                                                                                    vinfos[4].indices[0] = _ij8[0];
                                                                                    vinfos[4].indices[1] = _ij8[1];
                                                                                    vinfos[4].maxsolutions = _nj8;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j9;
                                                                                    vinfos[5].indices[0] = _ij9[0];
                                                                                    vinfos[5].indices[1] = _ij9[1];
                                                                                    vinfos[5].maxsolutions = _nj9;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j10;
                                                                                    vinfos[6].indices[0] = _ij10[0];
                                                                                    vinfos[6].indices[1] = _ij10[1];
                                                                                    vinfos[6].maxsolutions = _nj10;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j8array[1], cj8array[1], sj8array[1];
                                                                            bool j8valid[1] = { false };
                                                                            _nj8 = 1;
                                                                            CheckValue<IkReal> x385 =
                                                                                IKPowWithIntegerCheck(
                                                                                    IKsign((((gconst1 * new_r01)) +
                                                                                            (((-1.0) * gconst2 *
                                                                                              new_r11)))),
                                                                                    -1);
                                                                            if (!x385.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x386 = IKatan2WithCheck(
                                                                                IkReal((gconst1 * gconst2)),
                                                                                IkReal(((-1.0) * (gconst1 * gconst1))),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x386.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            j8array[0] =
                                                                                ((-1.5707963267949) +
                                                                                 (((1.5707963267949) * (x385.value))) +
                                                                                 (x386.value));
                                                                            sj8array[0] = IKsin(j8array[0]);
                                                                            cj8array[0] = IKcos(j8array[0]);
                                                                            if (j8array[0] > IKPI)
                                                                            {
                                                                              j8array[0] -= IK2PI;
                                                                            }
                                                                            else if (j8array[0] < -IKPI)
                                                                            {
                                                                              j8array[0] += IK2PI;
                                                                            }
                                                                            j8valid[0] = true;
                                                                            for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                            {
                                                                              if (!j8valid[ij8])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij8[0] = ij8;
                                                                              _ij8[1] = -1;
                                                                              for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                              {
                                                                                if (j8valid[iij8] &&
                                                                                    IKabs(cj8array[ij8] -
                                                                                          cj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj8array[ij8] -
                                                                                          sj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j8valid[iij8] = false;
                                                                                  _ij8[1] = iij8;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j8 = j8array[ij8];
                                                                              cj8 = cj8array[ij8];
                                                                              sj8 = sj8array[ij8];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x387 = IKsin(j8);
                                                                                IkReal x388 = IKcos(j8);
                                                                                IkReal x389 = (gconst1 * x388);
                                                                                IkReal x390 = (gconst1 * x387);
                                                                                IkReal x391 = (gconst2 * x388);
                                                                                IkReal x392 = ((1.0) * x387);
                                                                                IkReal x393 = (gconst2 * x392);
                                                                                evalcond[0] =
                                                                                    (((new_r01 * x388)) + gconst1 +
                                                                                     ((new_r11 * x387)));
                                                                                evalcond[1] = (x391 + x390 + new_r11);
                                                                                evalcond[2] =
                                                                                    ((((-1.0) * x393)) + x389);
                                                                                evalcond[3] =
                                                                                    ((((-1.0) * new_r01 * x392)) +
                                                                                     gconst2 + ((new_r11 * x388)));
                                                                                evalcond[4] = ((((-1.0) * x393)) +
                                                                                               x389 + new_r01);
                                                                                evalcond[5] = ((((-1.0) * x390)) +
                                                                                               (((-1.0) * x391)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j2;
                                                                                vinfos[0].indices[0] = _ij2[0];
                                                                                vinfos[0].indices[1] = _ij2[1];
                                                                                vinfos[0].maxsolutions = _nj2;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j3;
                                                                                vinfos[1].indices[0] = _ij3[0];
                                                                                vinfos[1].indices[1] = _ij3[1];
                                                                                vinfos[1].maxsolutions = _nj3;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j4;
                                                                                vinfos[2].indices[0] = _ij4[0];
                                                                                vinfos[2].indices[1] = _ij4[1];
                                                                                vinfos[2].maxsolutions = _nj4;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j5;
                                                                                vinfos[3].indices[0] = _ij5[0];
                                                                                vinfos[3].indices[1] = _ij5[1];
                                                                                vinfos[3].maxsolutions = _nj5;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j8;
                                                                                vinfos[4].indices[0] = _ij8[0];
                                                                                vinfos[4].indices[1] = _ij8[1];
                                                                                vinfos[4].maxsolutions = _nj8;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j9;
                                                                                vinfos[5].indices[0] = _ij9[0];
                                                                                vinfos[5].indices[1] = _ij9[1];
                                                                                vinfos[5].maxsolutions = _nj9;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j10;
                                                                                vinfos[6].indices[0] = _ij10[0];
                                                                                vinfos[6].indices[1] = _ij10[1];
                                                                                vinfos[6].maxsolutions = _nj10;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement)
                                                                  {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      evalcond[0] =
                                                                          ((IKabs(new_r10)) + (IKabs(new_r01)));
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j8array[2], cj8array[2], sj8array[2];
                                                                          bool j8valid[2] = { false };
                                                                          _nj8 = 2;
                                                                          CheckValue<IkReal> x394 =
                                                                              IKPowWithIntegerCheck(gconst2, -1);
                                                                          if (!x394.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          cj8array[0] = (new_r00 * (x394.value));
                                                                          if (cj8array[0] >= -1 - IKFAST_SINCOS_THRESH &&
                                                                              cj8array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                          {
                                                                            j8valid[0] = j8valid[1] = true;
                                                                            j8array[0] = IKacos(cj8array[0]);
                                                                            sj8array[0] = IKsin(j8array[0]);
                                                                            cj8array[1] = cj8array[0];
                                                                            j8array[1] = -j8array[0];
                                                                            sj8array[1] = -sj8array[0];
                                                                          }
                                                                          else if (isnan(cj8array[0]))
                                                                          {
                                                                            // probably any value will work
                                                                            j8valid[0] = true;
                                                                            cj8array[0] = 1;
                                                                            sj8array[0] = 0;
                                                                            j8array[0] = 0;
                                                                          }
                                                                          for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                          {
                                                                            if (!j8valid[ij8])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij8[0] = ij8;
                                                                            _ij8[1] = -1;
                                                                            for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                                            {
                                                                              if (j8valid[iij8] &&
                                                                                  IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j8valid[iij8] = false;
                                                                                _ij8[1] = iij8;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j8 = j8array[ij8];
                                                                            cj8 = cj8array[ij8];
                                                                            sj8 = sj8array[ij8];
                                                                            {
                                                                              IkReal evalcond[6];
                                                                              IkReal x395 = IKsin(j8);
                                                                              IkReal x396 = IKcos(j8);
                                                                              IkReal x397 = ((-1.0) * x395);
                                                                              evalcond[0] = (new_r11 * x395);
                                                                              evalcond[1] = (new_r00 * x397);
                                                                              evalcond[2] = (gconst2 * x397);
                                                                              evalcond[3] =
                                                                                  (((gconst2 * x396)) + new_r11);
                                                                              evalcond[4] =
                                                                                  (((new_r11 * x396)) + gconst2);
                                                                              evalcond[5] = ((((-1.0) * gconst2)) +
                                                                                             ((new_r00 * x396)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 17;
                                                                              vinfos[0].foffset = j2;
                                                                              vinfos[0].indices[0] = _ij2[0];
                                                                              vinfos[0].indices[1] = _ij2[1];
                                                                              vinfos[0].maxsolutions = _nj2;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j3;
                                                                              vinfos[1].indices[0] = _ij3[0];
                                                                              vinfos[1].indices[1] = _ij3[1];
                                                                              vinfos[1].maxsolutions = _nj3;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j4;
                                                                              vinfos[2].indices[0] = _ij4[0];
                                                                              vinfos[2].indices[1] = _ij4[1];
                                                                              vinfos[2].maxsolutions = _nj4;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j5;
                                                                              vinfos[3].indices[0] = _ij5[0];
                                                                              vinfos[3].indices[1] = _ij5[1];
                                                                              vinfos[3].maxsolutions = _nj5;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j8;
                                                                              vinfos[4].indices[0] = _ij8[0];
                                                                              vinfos[4].indices[1] = _ij8[1];
                                                                              vinfos[4].maxsolutions = _nj8;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j9;
                                                                              vinfos[5].indices[0] = _ij9[0];
                                                                              vinfos[5].indices[1] = _ij9[1];
                                                                              vinfos[5].maxsolutions = _nj9;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j10;
                                                                              vinfos[6].indices[0] = _ij10[0];
                                                                              vinfos[6].indices[1] = _ij10[1];
                                                                              vinfos[6].maxsolutions = _nj10;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                      bool bgotonextstatement = true;
                                                                      do
                                                                      {
                                                                        evalcond[0] =
                                                                            ((IKabs(new_r00)) + (IKabs(new_r01)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j8eval[1];
                                                                            CheckValue<IkReal> x399 = IKatan2WithCheck(
                                                                                IkReal(0), IkReal(new_r11),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x399.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal x398 = ((-1.0) * (x399.value));
                                                                            sj9 = 1.0;
                                                                            cj9 = 0;
                                                                            j9 = 1.5707963267949;
                                                                            sj10 = gconst1;
                                                                            cj10 = gconst2;
                                                                            j10 = x398;
                                                                            new_r00 = 0;
                                                                            new_r01 = 0;
                                                                            new_r12 = 0;
                                                                            new_r22 = 0;
                                                                            IkReal gconst0 = x398;
                                                                            IkReal gconst1 = 0;
                                                                            IkReal x400 =
                                                                                ((1.0) +
                                                                                 (((-1.0) * (new_r10 * new_r10))));
                                                                            if (IKabs(x400) == 0)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal gconst2 =
                                                                                (new_r11 * (pow(x400, -0.5)));
                                                                            j8eval[0] =
                                                                                ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                            if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal j8eval[1];
                                                                                CheckValue<IkReal> x402 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(0), IkReal(new_r11),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x402.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x401 = ((-1.0) * (x402.value));
                                                                                sj9 = 1.0;
                                                                                cj9 = 0;
                                                                                j9 = 1.5707963267949;
                                                                                sj10 = gconst1;
                                                                                cj10 = gconst2;
                                                                                j10 = x401;
                                                                                new_r00 = 0;
                                                                                new_r01 = 0;
                                                                                new_r12 = 0;
                                                                                new_r22 = 0;
                                                                                IkReal gconst0 = x401;
                                                                                IkReal gconst1 = 0;
                                                                                IkReal x403 =
                                                                                    ((1.0) +
                                                                                     (((-1.0) * (new_r10 * new_r10))));
                                                                                if (IKabs(x403) == 0)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal gconst2 =
                                                                                    (new_r11 * (pow(x403, -0.5)));
                                                                                j8eval[0] = new_r11;
                                                                                if (IKabs(j8eval[0]) <
                                                                                    0.0000010000000000)
                                                                                {
                                                                                  {
                                                                                    IkReal j8eval[1];
                                                                                    CheckValue<IkReal> x405 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(0), IkReal(new_r11),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x405.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal x404 =
                                                                                        ((-1.0) * (x405.value));
                                                                                    sj9 = 1.0;
                                                                                    cj9 = 0;
                                                                                    j9 = 1.5707963267949;
                                                                                    sj10 = gconst1;
                                                                                    cj10 = gconst2;
                                                                                    j10 = x404;
                                                                                    new_r00 = 0;
                                                                                    new_r01 = 0;
                                                                                    new_r12 = 0;
                                                                                    new_r22 = 0;
                                                                                    IkReal gconst0 = x404;
                                                                                    IkReal gconst1 = 0;
                                                                                    IkReal x406 =
                                                                                        ((1.0) +
                                                                                         (((-1.0) *
                                                                                           (new_r10 * new_r10))));
                                                                                    if (IKabs(x406) == 0)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal gconst2 =
                                                                                        (new_r11 * (pow(x406, -0.5)));
                                                                                    j8eval[0] = new_r10;
                                                                                    if (IKabs(j8eval[0]) <
                                                                                        0.0000010000000000)
                                                                                    {
                                                                                      continue;  // 3 cases reached
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      {
                                                                                        IkReal j8array[1], cj8array[1],
                                                                                            sj8array[1];
                                                                                        bool j8valid[1] = { false };
                                                                                        _nj8 = 1;
                                                                                        CheckValue<IkReal> x407 =
                                                                                            IKPowWithIntegerCheck(
                                                                                                new_r10, -1);
                                                                                        if (!x407.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x408 =
                                                                                            IKPowWithIntegerCheck(
                                                                                                gconst2, -1);
                                                                                        if (!x408.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        if (IKabs((gconst2 *
                                                                                                   (x407.value))) <
                                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                                            IKabs(((-1.0) * new_r11 *
                                                                                                   (x408.value))) <
                                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                                            IKabs(
                                                                                                IKsqr((gconst2 *
                                                                                                       (x407.value))) +
                                                                                                IKsqr(((-1.0) * new_r11 *
                                                                                                       (x408.value))) -
                                                                                                1) <=
                                                                                                IKFAST_SINCOS_THRESH)
                                                                                          continue;
                                                                                        j8array[0] = IKatan2(
                                                                                            (gconst2 * (x407.value)),
                                                                                            ((-1.0) * new_r11 *
                                                                                             (x408.value)));
                                                                                        sj8array[0] = IKsin(j8array[0]);
                                                                                        cj8array[0] = IKcos(j8array[0]);
                                                                                        if (j8array[0] > IKPI)
                                                                                        {
                                                                                          j8array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j8array[0] < -IKPI)
                                                                                        {
                                                                                          j8array[0] += IK2PI;
                                                                                        }
                                                                                        j8valid[0] = true;
                                                                                        for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                        {
                                                                                          if (!j8valid[ij8])
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          _ij8[0] = ij8;
                                                                                          _ij8[1] = -1;
                                                                                          for (int iij8 = ij8 + 1;
                                                                                               iij8 < 1; ++iij8)
                                                                                          {
                                                                                            if (j8valid[iij8] &&
                                                                                                IKabs(cj8array[ij8] -
                                                                                                      cj8array[iij8]) <
                                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                                IKabs(sj8array[ij8] -
                                                                                                      sj8array[iij8]) <
                                                                                                    IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                              j8valid[iij8] = false;
                                                                                              _ij8[1] = iij8;
                                                                                              break;
                                                                                            }
                                                                                          }
                                                                                          j8 = j8array[ij8];
                                                                                          cj8 = cj8array[ij8];
                                                                                          sj8 = sj8array[ij8];
                                                                                          {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x409 = IKsin(j8);
                                                                                            IkReal x410 = IKcos(j8);
                                                                                            IkReal x411 =
                                                                                                ((1.0) * gconst2);
                                                                                            IkReal x412 =
                                                                                                ((-1.0) * gconst2);
                                                                                            evalcond[0] =
                                                                                                (new_r11 * x409);
                                                                                            evalcond[1] =
                                                                                                (new_r10 * x410);
                                                                                            evalcond[2] = (x409 * x412);
                                                                                            evalcond[3] = (x410 * x412);
                                                                                            evalcond[4] =
                                                                                                (((gconst2 * x410)) +
                                                                                                 new_r11);
                                                                                            evalcond[5] =
                                                                                                (gconst2 +
                                                                                                 ((new_r11 * x410)));
                                                                                            evalcond[6] =
                                                                                                (new_r10 +
                                                                                                 (((-1.0) * x409 *
                                                                                                   x411)));
                                                                                            evalcond[7] =
                                                                                                (((new_r10 * x409)) +
                                                                                                 (((-1.0) * x411)));
                                                                                            if (IKabs(evalcond[0]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[1]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[2]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[3]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[4]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[5]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[6]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[7]) >
                                                                                                    IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                          }

                                                                                          {
                                                                                            std::vector<
                                                                                                IkSingleDOFSolutionBase<
                                                                                                    IkReal> >
                                                                                                vinfos(7);
                                                                                            vinfos[0].jointtype = 17;
                                                                                            vinfos[0].foffset = j2;
                                                                                            vinfos[0].indices[0] =
                                                                                                _ij2[0];
                                                                                            vinfos[0].indices[1] =
                                                                                                _ij2[1];
                                                                                            vinfos[0].maxsolutions =
                                                                                                _nj2;
                                                                                            vinfos[1].jointtype = 17;
                                                                                            vinfos[1].foffset = j3;
                                                                                            vinfos[1].indices[0] =
                                                                                                _ij3[0];
                                                                                            vinfos[1].indices[1] =
                                                                                                _ij3[1];
                                                                                            vinfos[1].maxsolutions =
                                                                                                _nj3;
                                                                                            vinfos[2].jointtype = 17;
                                                                                            vinfos[2].foffset = j4;
                                                                                            vinfos[2].indices[0] =
                                                                                                _ij4[0];
                                                                                            vinfos[2].indices[1] =
                                                                                                _ij4[1];
                                                                                            vinfos[2].maxsolutions =
                                                                                                _nj4;
                                                                                            vinfos[3].jointtype = 17;
                                                                                            vinfos[3].foffset = j5;
                                                                                            vinfos[3].indices[0] =
                                                                                                _ij5[0];
                                                                                            vinfos[3].indices[1] =
                                                                                                _ij5[1];
                                                                                            vinfos[3].maxsolutions =
                                                                                                _nj5;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j8;
                                                                                            vinfos[4].indices[0] =
                                                                                                _ij8[0];
                                                                                            vinfos[4].indices[1] =
                                                                                                _ij8[1];
                                                                                            vinfos[4].maxsolutions =
                                                                                                _nj8;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j9;
                                                                                            vinfos[5].indices[0] =
                                                                                                _ij9[0];
                                                                                            vinfos[5].indices[1] =
                                                                                                _ij9[1];
                                                                                            vinfos[5].maxsolutions =
                                                                                                _nj9;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j10;
                                                                                            vinfos[6].indices[0] =
                                                                                                _ij10[0];
                                                                                            vinfos[6].indices[1] =
                                                                                                _ij10[1];
                                                                                            vinfos[6].maxsolutions =
                                                                                                _nj10;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(
                                                                                                vinfos, vfree);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  {
                                                                                    IkReal j8array[1], cj8array[1],
                                                                                        sj8array[1];
                                                                                    bool j8valid[1] = { false };
                                                                                    _nj8 = 1;
                                                                                    CheckValue<IkReal> x413 =
                                                                                        IKPowWithIntegerCheck(gconst2,
                                                                                                              -1);
                                                                                    if (!x413.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x414 =
                                                                                        IKPowWithIntegerCheck(new_r11,
                                                                                                              -1);
                                                                                    if (!x414.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    if (IKabs((new_r10 * (x413.value))) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(((-1.0) * gconst2 *
                                                                                               (x414.value))) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(IKsqr((new_r10 *
                                                                                                     (x413.value))) +
                                                                                              IKsqr(((-1.0) * gconst2 *
                                                                                                     (x414.value))) -
                                                                                              1) <= IKFAST_SINCOS_THRESH)
                                                                                      continue;
                                                                                    j8array[0] = IKatan2(
                                                                                        (new_r10 * (x413.value)),
                                                                                        ((-1.0) * gconst2 *
                                                                                         (x414.value)));
                                                                                    sj8array[0] = IKsin(j8array[0]);
                                                                                    cj8array[0] = IKcos(j8array[0]);
                                                                                    if (j8array[0] > IKPI)
                                                                                    {
                                                                                      j8array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j8array[0] < -IKPI)
                                                                                    {
                                                                                      j8array[0] += IK2PI;
                                                                                    }
                                                                                    j8valid[0] = true;
                                                                                    for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                    {
                                                                                      if (!j8valid[ij8])
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      _ij8[0] = ij8;
                                                                                      _ij8[1] = -1;
                                                                                      for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                           ++iij8)
                                                                                      {
                                                                                        if (j8valid[iij8] &&
                                                                                            IKabs(cj8array[ij8] -
                                                                                                  cj8array[iij8]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj8array[ij8] -
                                                                                                  sj8array[iij8]) <
                                                                                                IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                          j8valid[iij8] = false;
                                                                                          _ij8[1] = iij8;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j8 = j8array[ij8];
                                                                                      cj8 = cj8array[ij8];
                                                                                      sj8 = sj8array[ij8];
                                                                                      {
                                                                                        IkReal evalcond[8];
                                                                                        IkReal x415 = IKsin(j8);
                                                                                        IkReal x416 = IKcos(j8);
                                                                                        IkReal x417 = ((1.0) * gconst2);
                                                                                        IkReal x418 =
                                                                                            ((-1.0) * gconst2);
                                                                                        evalcond[0] = (new_r11 * x415);
                                                                                        evalcond[1] = (new_r10 * x416);
                                                                                        evalcond[2] = (x415 * x418);
                                                                                        evalcond[3] = (x416 * x418);
                                                                                        evalcond[4] =
                                                                                            (((gconst2 * x416)) +
                                                                                             new_r11);
                                                                                        evalcond[5] =
                                                                                            (gconst2 +
                                                                                             ((new_r11 * x416)));
                                                                                        evalcond[6] =
                                                                                            ((((-1.0) * x415 * x417)) +
                                                                                             new_r10);
                                                                                        evalcond[7] =
                                                                                            (((new_r10 * x415)) +
                                                                                             (((-1.0) * x417)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[4]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[5]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[6]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[7]) >
                                                                                                IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 17;
                                                                                        vinfos[0].foffset = j2;
                                                                                        vinfos[0].indices[0] = _ij2[0];
                                                                                        vinfos[0].indices[1] = _ij2[1];
                                                                                        vinfos[0].maxsolutions = _nj2;
                                                                                        vinfos[1].jointtype = 17;
                                                                                        vinfos[1].foffset = j3;
                                                                                        vinfos[1].indices[0] = _ij3[0];
                                                                                        vinfos[1].indices[1] = _ij3[1];
                                                                                        vinfos[1].maxsolutions = _nj3;
                                                                                        vinfos[2].jointtype = 17;
                                                                                        vinfos[2].foffset = j4;
                                                                                        vinfos[2].indices[0] = _ij4[0];
                                                                                        vinfos[2].indices[1] = _ij4[1];
                                                                                        vinfos[2].maxsolutions = _nj4;
                                                                                        vinfos[3].jointtype = 17;
                                                                                        vinfos[3].foffset = j5;
                                                                                        vinfos[3].indices[0] = _ij5[0];
                                                                                        vinfos[3].indices[1] = _ij5[1];
                                                                                        vinfos[3].maxsolutions = _nj5;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j8;
                                                                                        vinfos[4].indices[0] = _ij8[0];
                                                                                        vinfos[4].indices[1] = _ij8[1];
                                                                                        vinfos[4].maxsolutions = _nj8;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j9;
                                                                                        vinfos[5].indices[0] = _ij9[0];
                                                                                        vinfos[5].indices[1] = _ij9[1];
                                                                                        vinfos[5].maxsolutions = _nj9;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j10;
                                                                                        vinfos[6].indices[0] = _ij10[0];
                                                                                        vinfos[6].indices[1] = _ij10[1];
                                                                                        vinfos[6].maxsolutions = _nj10;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j8array[1], cj8array[1],
                                                                                    sj8array[1];
                                                                                bool j8valid[1] = { false };
                                                                                _nj8 = 1;
                                                                                CheckValue<IkReal> x419 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(new_r10),
                                                                                        IkReal(((-1.0) * new_r11)),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x419.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                CheckValue<IkReal> x420 =
                                                                                    IKPowWithIntegerCheck(
                                                                                        IKsign(gconst2), -1);
                                                                                if (!x420.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                j8array[0] =
                                                                                    ((-1.5707963267949) + (x419.value) +
                                                                                     (((1.5707963267949) *
                                                                                       (x420.value))));
                                                                                sj8array[0] = IKsin(j8array[0]);
                                                                                cj8array[0] = IKcos(j8array[0]);
                                                                                if (j8array[0] > IKPI)
                                                                                {
                                                                                  j8array[0] -= IK2PI;
                                                                                }
                                                                                else if (j8array[0] < -IKPI)
                                                                                {
                                                                                  j8array[0] += IK2PI;
                                                                                }
                                                                                j8valid[0] = true;
                                                                                for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                {
                                                                                  if (!j8valid[ij8])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij8[0] = ij8;
                                                                                  _ij8[1] = -1;
                                                                                  for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                       ++iij8)
                                                                                  {
                                                                                    if (j8valid[iij8] &&
                                                                                        IKabs(cj8array[ij8] -
                                                                                              cj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj8array[ij8] -
                                                                                              sj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j8valid[iij8] = false;
                                                                                      _ij8[1] = iij8;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j8 = j8array[ij8];
                                                                                  cj8 = cj8array[ij8];
                                                                                  sj8 = sj8array[ij8];
                                                                                  {
                                                                                    IkReal evalcond[8];
                                                                                    IkReal x421 = IKsin(j8);
                                                                                    IkReal x422 = IKcos(j8);
                                                                                    IkReal x423 = ((1.0) * gconst2);
                                                                                    IkReal x424 = ((-1.0) * gconst2);
                                                                                    evalcond[0] = (new_r11 * x421);
                                                                                    evalcond[1] = (new_r10 * x422);
                                                                                    evalcond[2] = (x421 * x424);
                                                                                    evalcond[3] = (x422 * x424);
                                                                                    evalcond[4] =
                                                                                        (((gconst2 * x422)) + new_r11);
                                                                                    evalcond[5] =
                                                                                        (gconst2 + ((new_r11 * x422)));
                                                                                    evalcond[6] =
                                                                                        ((((-1.0) * x421 * x423)) +
                                                                                         new_r10);
                                                                                    evalcond[7] = ((((-1.0) * x423)) +
                                                                                                   ((new_r10 * x421)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[6]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[7]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j2;
                                                                                    vinfos[0].indices[0] = _ij2[0];
                                                                                    vinfos[0].indices[1] = _ij2[1];
                                                                                    vinfos[0].maxsolutions = _nj2;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j3;
                                                                                    vinfos[1].indices[0] = _ij3[0];
                                                                                    vinfos[1].indices[1] = _ij3[1];
                                                                                    vinfos[1].maxsolutions = _nj3;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j4;
                                                                                    vinfos[2].indices[0] = _ij4[0];
                                                                                    vinfos[2].indices[1] = _ij4[1];
                                                                                    vinfos[2].maxsolutions = _nj4;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j5;
                                                                                    vinfos[3].indices[0] = _ij5[0];
                                                                                    vinfos[3].indices[1] = _ij5[1];
                                                                                    vinfos[3].maxsolutions = _nj5;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j8;
                                                                                    vinfos[4].indices[0] = _ij8[0];
                                                                                    vinfos[4].indices[1] = _ij8[1];
                                                                                    vinfos[4].maxsolutions = _nj8;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j9;
                                                                                    vinfos[5].indices[0] = _ij9[0];
                                                                                    vinfos[5].indices[1] = _ij9[1];
                                                                                    vinfos[5].maxsolutions = _nj9;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j10;
                                                                                    vinfos[6].indices[0] = _ij10[0];
                                                                                    vinfos[6].indices[1] = _ij10[1];
                                                                                    vinfos[6].maxsolutions = _nj10;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement)
                                                                      {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                          evalcond[0] = IKabs(new_r01);
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                          {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j8eval[1];
                                                                              CheckValue<IkReal> x426 =
                                                                                  IKatan2WithCheck(
                                                                                      IkReal(0), IkReal(new_r11),
                                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x426.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal x425 = ((-1.0) * (x426.value));
                                                                              sj9 = 1.0;
                                                                              cj9 = 0;
                                                                              j9 = 1.5707963267949;
                                                                              sj10 = gconst1;
                                                                              cj10 = gconst2;
                                                                              j10 = x425;
                                                                              new_r01 = 0;
                                                                              IkReal gconst0 = x425;
                                                                              IkReal gconst1 = 0;
                                                                              IkReal x427 = new_r11 * new_r11;
                                                                              if (IKabs(x427) == 0)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal gconst2 =
                                                                                  (new_r11 * (pow(x427, -0.5)));
                                                                              j8eval[0] =
                                                                                  ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                              if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                              {
                                                                                {
                                                                                  IkReal j8eval[1];
                                                                                  CheckValue<IkReal> x429 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(0), IkReal(new_r11),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x429.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal x428 = ((-1.0) * (x429.value));
                                                                                  sj9 = 1.0;
                                                                                  cj9 = 0;
                                                                                  j9 = 1.5707963267949;
                                                                                  sj10 = gconst1;
                                                                                  cj10 = gconst2;
                                                                                  j10 = x428;
                                                                                  new_r01 = 0;
                                                                                  IkReal gconst0 = x428;
                                                                                  IkReal gconst1 = 0;
                                                                                  IkReal x430 = new_r11 * new_r11;
                                                                                  if (IKabs(x430) == 0)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal gconst2 =
                                                                                      (new_r11 * (pow(x430, -0.5)));
                                                                                  j8eval[0] = ((IKabs(new_r11)) +
                                                                                               (IKabs(new_r10)));
                                                                                  if (IKabs(j8eval[0]) <
                                                                                      0.0000010000000000)
                                                                                  {
                                                                                    {
                                                                                      IkReal j8eval[1];
                                                                                      CheckValue<IkReal> x432 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal(0),
                                                                                              IkReal(new_r11),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x432.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal x431 =
                                                                                          ((-1.0) * (x432.value));
                                                                                      sj9 = 1.0;
                                                                                      cj9 = 0;
                                                                                      j9 = 1.5707963267949;
                                                                                      sj10 = gconst1;
                                                                                      cj10 = gconst2;
                                                                                      j10 = x431;
                                                                                      new_r01 = 0;
                                                                                      IkReal gconst0 = x431;
                                                                                      IkReal gconst1 = 0;
                                                                                      IkReal x433 = new_r11 * new_r11;
                                                                                      if (IKabs(x433) == 0)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal gconst2 =
                                                                                          (new_r11 * (pow(x433, -0.5)));
                                                                                      j8eval[0] = new_r11;
                                                                                      if (IKabs(j8eval[0]) <
                                                                                          0.0000010000000000)
                                                                                      {
                                                                                        continue;  // 3 cases reached
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        {
                                                                                          IkReal j8array[1],
                                                                                              cj8array[1], sj8array[1];
                                                                                          bool j8valid[1] = { false };
                                                                                          _nj8 = 1;
                                                                                          CheckValue<IkReal> x434 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  gconst2, -1);
                                                                                          if (!x434.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          CheckValue<IkReal> x435 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  new_r11, -1);
                                                                                          if (!x435.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          if (IKabs((new_r10 *
                                                                                                     (x434.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(((-1.0) * gconst2 *
                                                                                                     (x435.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(
                                                                                                  IKsqr((new_r10 *
                                                                                                         (x434.value))) +
                                                                                                  IKsqr((
                                                                                                      (-1.0) * gconst2 *
                                                                                                      (x435.value))) -
                                                                                                  1) <=
                                                                                                  IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                          j8array[0] = IKatan2(
                                                                                              (new_r10 * (x434.value)),
                                                                                              ((-1.0) * gconst2 *
                                                                                               (x435.value)));
                                                                                          sj8array[0] =
                                                                                              IKsin(j8array[0]);
                                                                                          cj8array[0] =
                                                                                              IKcos(j8array[0]);
                                                                                          if (j8array[0] > IKPI)
                                                                                          {
                                                                                            j8array[0] -= IK2PI;
                                                                                          }
                                                                                          else if (j8array[0] < -IKPI)
                                                                                          {
                                                                                            j8array[0] += IK2PI;
                                                                                          }
                                                                                          j8valid[0] = true;
                                                                                          for (int ij8 = 0; ij8 < 1;
                                                                                               ++ij8)
                                                                                          {
                                                                                            if (!j8valid[ij8])
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            _ij8[0] = ij8;
                                                                                            _ij8[1] = -1;
                                                                                            for (int iij8 = ij8 + 1;
                                                                                                 iij8 < 1; ++iij8)
                                                                                            {
                                                                                              if (j8valid[iij8] &&
                                                                                                  IKabs(cj8array[ij8] -
                                                                                                        cj8array[iij8]) <
                                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                                  IKabs(sj8array[ij8] -
                                                                                                        sj8array[iij8]) <
                                                                                                      IKFAST_SOLUTION_THRESH)
                                                                                              {
                                                                                                j8valid[iij8] = false;
                                                                                                _ij8[1] = iij8;
                                                                                                break;
                                                                                              }
                                                                                            }
                                                                                            j8 = j8array[ij8];
                                                                                            cj8 = cj8array[ij8];
                                                                                            sj8 = sj8array[ij8];
                                                                                            {
                                                                                              IkReal evalcond[8];
                                                                                              IkReal x436 = IKsin(j8);
                                                                                              IkReal x437 = IKcos(j8);
                                                                                              IkReal x438 =
                                                                                                  (gconst2 * x437);
                                                                                              IkReal x439 =
                                                                                                  (gconst2 * x436);
                                                                                              evalcond[0] =
                                                                                                  (new_r11 * x436);
                                                                                              evalcond[1] =
                                                                                                  ((-1.0) * x439);
                                                                                              evalcond[2] =
                                                                                                  (x438 + new_r11);
                                                                                              evalcond[3] =
                                                                                                  (gconst2 +
                                                                                                   ((new_r11 * x437)));
                                                                                              evalcond[4] =
                                                                                                  ((((-1.0) * x439)) +
                                                                                                   new_r10);
                                                                                              evalcond[5] =
                                                                                                  ((((-1.0) * x438)) +
                                                                                                   new_r00);
                                                                                              evalcond[6] =
                                                                                                  (((new_r10 * x437)) +
                                                                                                   (((-1.0) * new_r00 *
                                                                                                     x436)));
                                                                                              evalcond[7] =
                                                                                                  (((new_r00 * x437)) +
                                                                                                   (((-1.0) * gconst2)) +
                                                                                                   ((new_r10 * x436)));
                                                                                              if (IKabs(evalcond[0]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[1]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[2]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[3]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[4]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[5]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[6]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[7]) >
                                                                                                      IKFAST_EVALCOND_THRESH)
                                                                                              {
                                                                                                continue;
                                                                                              }
                                                                                            }

                                                                                            {
                                                                                              std::vector<
                                                                                                  IkSingleDOFSolutionBase<
                                                                                                      IkReal> >
                                                                                                  vinfos(7);
                                                                                              vinfos[0].jointtype = 17;
                                                                                              vinfos[0].foffset = j2;
                                                                                              vinfos[0].indices[0] =
                                                                                                  _ij2[0];
                                                                                              vinfos[0].indices[1] =
                                                                                                  _ij2[1];
                                                                                              vinfos[0].maxsolutions =
                                                                                                  _nj2;
                                                                                              vinfos[1].jointtype = 17;
                                                                                              vinfos[1].foffset = j3;
                                                                                              vinfos[1].indices[0] =
                                                                                                  _ij3[0];
                                                                                              vinfos[1].indices[1] =
                                                                                                  _ij3[1];
                                                                                              vinfos[1].maxsolutions =
                                                                                                  _nj3;
                                                                                              vinfos[2].jointtype = 17;
                                                                                              vinfos[2].foffset = j4;
                                                                                              vinfos[2].indices[0] =
                                                                                                  _ij4[0];
                                                                                              vinfos[2].indices[1] =
                                                                                                  _ij4[1];
                                                                                              vinfos[2].maxsolutions =
                                                                                                  _nj4;
                                                                                              vinfos[3].jointtype = 17;
                                                                                              vinfos[3].foffset = j5;
                                                                                              vinfos[3].indices[0] =
                                                                                                  _ij5[0];
                                                                                              vinfos[3].indices[1] =
                                                                                                  _ij5[1];
                                                                                              vinfos[3].maxsolutions =
                                                                                                  _nj5;
                                                                                              vinfos[4].jointtype = 1;
                                                                                              vinfos[4].foffset = j8;
                                                                                              vinfos[4].indices[0] =
                                                                                                  _ij8[0];
                                                                                              vinfos[4].indices[1] =
                                                                                                  _ij8[1];
                                                                                              vinfos[4].maxsolutions =
                                                                                                  _nj8;
                                                                                              vinfos[5].jointtype = 1;
                                                                                              vinfos[5].foffset = j9;
                                                                                              vinfos[5].indices[0] =
                                                                                                  _ij9[0];
                                                                                              vinfos[5].indices[1] =
                                                                                                  _ij9[1];
                                                                                              vinfos[5].maxsolutions =
                                                                                                  _nj9;
                                                                                              vinfos[6].jointtype = 1;
                                                                                              vinfos[6].foffset = j10;
                                                                                              vinfos[6].indices[0] =
                                                                                                  _ij10[0];
                                                                                              vinfos[6].indices[1] =
                                                                                                  _ij10[1];
                                                                                              vinfos[6].maxsolutions =
                                                                                                  _nj10;
                                                                                              std::vector<int> vfree(0);
                                                                                              solutions.AddSolution(
                                                                                                  vinfos, vfree);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    {
                                                                                      IkReal j8array[1], cj8array[1],
                                                                                          sj8array[1];
                                                                                      bool j8valid[1] = { false };
                                                                                      _nj8 = 1;
                                                                                      CheckValue<IkReal> x440 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal(new_r10),
                                                                                              IkReal(((-1.0) * new_r11)),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x440.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      CheckValue<IkReal> x441 =
                                                                                          IKPowWithIntegerCheck(
                                                                                              IKsign(gconst2), -1);
                                                                                      if (!x441.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      j8array[0] =
                                                                                          ((-1.5707963267949) +
                                                                                           (x440.value) +
                                                                                           (((1.5707963267949) *
                                                                                             (x441.value))));
                                                                                      sj8array[0] = IKsin(j8array[0]);
                                                                                      cj8array[0] = IKcos(j8array[0]);
                                                                                      if (j8array[0] > IKPI)
                                                                                      {
                                                                                        j8array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j8array[0] < -IKPI)
                                                                                      {
                                                                                        j8array[0] += IK2PI;
                                                                                      }
                                                                                      j8valid[0] = true;
                                                                                      for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                      {
                                                                                        if (!j8valid[ij8])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij8[0] = ij8;
                                                                                        _ij8[1] = -1;
                                                                                        for (int iij8 = ij8 + 1;
                                                                                             iij8 < 1; ++iij8)
                                                                                        {
                                                                                          if (j8valid[iij8] &&
                                                                                              IKabs(cj8array[ij8] -
                                                                                                    cj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj8array[ij8] -
                                                                                                    sj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j8valid[iij8] = false;
                                                                                            _ij8[1] = iij8;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j8 = j8array[ij8];
                                                                                        cj8 = cj8array[ij8];
                                                                                        sj8 = sj8array[ij8];
                                                                                        {
                                                                                          IkReal evalcond[8];
                                                                                          IkReal x442 = IKsin(j8);
                                                                                          IkReal x443 = IKcos(j8);
                                                                                          IkReal x444 =
                                                                                              (gconst2 * x443);
                                                                                          IkReal x445 =
                                                                                              (gconst2 * x442);
                                                                                          evalcond[0] =
                                                                                              (new_r11 * x442);
                                                                                          evalcond[1] = ((-1.0) * x445);
                                                                                          evalcond[2] =
                                                                                              (x444 + new_r11);
                                                                                          evalcond[3] =
                                                                                              (gconst2 +
                                                                                               ((new_r11 * x443)));
                                                                                          evalcond[4] =
                                                                                              ((((-1.0) * x445)) +
                                                                                               new_r10);
                                                                                          evalcond[5] =
                                                                                              ((((-1.0) * x444)) +
                                                                                               new_r00);
                                                                                          evalcond[6] =
                                                                                              (((new_r10 * x443)) +
                                                                                               (((-1.0) * new_r00 *
                                                                                                 x442)));
                                                                                          evalcond[7] =
                                                                                              (((new_r00 * x443)) +
                                                                                               (((-1.0) * gconst2)) +
                                                                                               ((new_r10 * x442)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[6]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[7]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j2;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[0].maxsolutions = _nj2;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j3;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[1].maxsolutions = _nj3;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j4;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[2].maxsolutions = _nj4;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j5;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[3].maxsolutions = _nj5;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j8;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij8[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij8[1];
                                                                                          vinfos[4].maxsolutions = _nj8;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j9;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij9[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij9[1];
                                                                                          vinfos[5].maxsolutions = _nj9;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j10;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij10[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij10[1];
                                                                                          vinfos[6].maxsolutions =
                                                                                              _nj10;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                {
                                                                                  IkReal j8array[1], cj8array[1],
                                                                                      sj8array[1];
                                                                                  bool j8valid[1] = { false };
                                                                                  _nj8 = 1;
                                                                                  CheckValue<IkReal> x446 =
                                                                                      IKPowWithIntegerCheck(
                                                                                          IKsign(gconst2), -1);
                                                                                  if (!x446.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  CheckValue<IkReal> x447 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(new_r10),
                                                                                          IkReal(new_r00),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x447.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  j8array[0] = ((-1.5707963267949) +
                                                                                                (((1.5707963267949) *
                                                                                                  (x446.value))) +
                                                                                                (x447.value));
                                                                                  sj8array[0] = IKsin(j8array[0]);
                                                                                  cj8array[0] = IKcos(j8array[0]);
                                                                                  if (j8array[0] > IKPI)
                                                                                  {
                                                                                    j8array[0] -= IK2PI;
                                                                                  }
                                                                                  else if (j8array[0] < -IKPI)
                                                                                  {
                                                                                    j8array[0] += IK2PI;
                                                                                  }
                                                                                  j8valid[0] = true;
                                                                                  for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                  {
                                                                                    if (!j8valid[ij8])
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    _ij8[0] = ij8;
                                                                                    _ij8[1] = -1;
                                                                                    for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                         ++iij8)
                                                                                    {
                                                                                      if (j8valid[iij8] &&
                                                                                          IKabs(cj8array[ij8] -
                                                                                                cj8array[iij8]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj8array[ij8] -
                                                                                                sj8array[iij8]) <
                                                                                              IKFAST_SOLUTION_THRESH)
                                                                                      {
                                                                                        j8valid[iij8] = false;
                                                                                        _ij8[1] = iij8;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j8 = j8array[ij8];
                                                                                    cj8 = cj8array[ij8];
                                                                                    sj8 = sj8array[ij8];
                                                                                    {
                                                                                      IkReal evalcond[8];
                                                                                      IkReal x448 = IKsin(j8);
                                                                                      IkReal x449 = IKcos(j8);
                                                                                      IkReal x450 = (gconst2 * x449);
                                                                                      IkReal x451 = (gconst2 * x448);
                                                                                      evalcond[0] = (new_r11 * x448);
                                                                                      evalcond[1] = ((-1.0) * x451);
                                                                                      evalcond[2] = (x450 + new_r11);
                                                                                      evalcond[3] =
                                                                                          (gconst2 + ((new_r11 * x449)));
                                                                                      evalcond[4] =
                                                                                          ((((-1.0) * x451)) + new_r10);
                                                                                      evalcond[5] =
                                                                                          ((((-1.0) * x450)) + new_r00);
                                                                                      evalcond[6] =
                                                                                          (((new_r10 * x449)) +
                                                                                           (((-1.0) * new_r00 * x448)));
                                                                                      evalcond[7] =
                                                                                          (((new_r00 * x449)) +
                                                                                           (((-1.0) * gconst2)) +
                                                                                           ((new_r10 * x448)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[4]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[5]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[6]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[7]) >
                                                                                              IKFAST_EVALCOND_THRESH)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 17;
                                                                                      vinfos[0].foffset = j2;
                                                                                      vinfos[0].indices[0] = _ij2[0];
                                                                                      vinfos[0].indices[1] = _ij2[1];
                                                                                      vinfos[0].maxsolutions = _nj2;
                                                                                      vinfos[1].jointtype = 17;
                                                                                      vinfos[1].foffset = j3;
                                                                                      vinfos[1].indices[0] = _ij3[0];
                                                                                      vinfos[1].indices[1] = _ij3[1];
                                                                                      vinfos[1].maxsolutions = _nj3;
                                                                                      vinfos[2].jointtype = 17;
                                                                                      vinfos[2].foffset = j4;
                                                                                      vinfos[2].indices[0] = _ij4[0];
                                                                                      vinfos[2].indices[1] = _ij4[1];
                                                                                      vinfos[2].maxsolutions = _nj4;
                                                                                      vinfos[3].jointtype = 17;
                                                                                      vinfos[3].foffset = j5;
                                                                                      vinfos[3].indices[0] = _ij5[0];
                                                                                      vinfos[3].indices[1] = _ij5[1];
                                                                                      vinfos[3].maxsolutions = _nj5;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j8;
                                                                                      vinfos[4].indices[0] = _ij8[0];
                                                                                      vinfos[4].indices[1] = _ij8[1];
                                                                                      vinfos[4].maxsolutions = _nj8;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j9;
                                                                                      vinfos[5].indices[0] = _ij9[0];
                                                                                      vinfos[5].indices[1] = _ij9[1];
                                                                                      vinfos[5].maxsolutions = _nj9;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j10;
                                                                                      vinfos[6].indices[0] = _ij10[0];
                                                                                      vinfos[6].indices[1] = _ij10[1];
                                                                                      vinfos[6].maxsolutions = _nj10;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                          bool bgotonextstatement = true;
                                                                          do
                                                                          {
                                                                            if (1)
                                                                            {
                                                                              bgotonextstatement = false;
                                                                              continue;  // branch miss [j8]
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement) {}
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              {
                                                                IkReal j8array[1], cj8array[1], sj8array[1];
                                                                bool j8valid[1] = { false };
                                                                _nj8 = 1;
                                                                IkReal x452 = ((1.0) * new_r11);
                                                                CheckValue<IkReal> x453 = IKPowWithIntegerCheck(
                                                                    IKsign(((((-1.0) * gconst2 * x452)) +
                                                                            ((gconst1 * new_r01)))),
                                                                    -1);
                                                                if (!x453.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                CheckValue<IkReal> x454 = IKatan2WithCheck(
                                                                    IkReal(((((-1.0) * new_r01 * x452)) +
                                                                            ((gconst1 * gconst2)))),
                                                                    IkReal(((new_r11 * new_r11) +
                                                                            (((-1.0) * (gconst1 * gconst1))))),
                                                                    IKFAST_ATAN2_MAGTHRESH);
                                                                if (!x454.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                j8array[0] = ((-1.5707963267949) +
                                                                              (((1.5707963267949) * (x453.value))) +
                                                                              (x454.value));
                                                                sj8array[0] = IKsin(j8array[0]);
                                                                cj8array[0] = IKcos(j8array[0]);
                                                                if (j8array[0] > IKPI)
                                                                {
                                                                  j8array[0] -= IK2PI;
                                                                }
                                                                else if (j8array[0] < -IKPI)
                                                                {
                                                                  j8array[0] += IK2PI;
                                                                }
                                                                j8valid[0] = true;
                                                                for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                {
                                                                  if (!j8valid[ij8])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij8[0] = ij8;
                                                                  _ij8[1] = -1;
                                                                  for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                  {
                                                                    if (j8valid[iij8] &&
                                                                        IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j8valid[iij8] = false;
                                                                      _ij8[1] = iij8;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j8 = j8array[ij8];
                                                                  cj8 = cj8array[ij8];
                                                                  sj8 = sj8array[ij8];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x455 = IKsin(j8);
                                                                    IkReal x456 = IKcos(j8);
                                                                    IkReal x457 = (gconst1 * x456);
                                                                    IkReal x458 = (gconst1 * x455);
                                                                    IkReal x459 = (gconst2 * x456);
                                                                    IkReal x460 = ((1.0) * x455);
                                                                    IkReal x461 = (gconst2 * x460);
                                                                    evalcond[0] = (((new_r11 * x455)) +
                                                                                   ((new_r01 * x456)) + gconst1);
                                                                    evalcond[1] = (x458 + x459 + new_r11);
                                                                    evalcond[2] = (((new_r10 * x456)) + gconst1 +
                                                                                   (((-1.0) * new_r00 * x460)));
                                                                    evalcond[3] = (((new_r11 * x456)) + gconst2 +
                                                                                   (((-1.0) * new_r01 * x460)));
                                                                    evalcond[4] = ((((-1.0) * x461)) + x457 + new_r01);
                                                                    evalcond[5] = ((((-1.0) * x461)) + x457 + new_r10);
                                                                    evalcond[6] =
                                                                        (((new_r10 * x455)) + ((new_r00 * x456)) +
                                                                         (((-1.0) * gconst2)));
                                                                    evalcond[7] = ((((-1.0) * x459)) +
                                                                                   (((-1.0) * x458)) + new_r00);
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 17;
                                                                    vinfos[0].foffset = j2;
                                                                    vinfos[0].indices[0] = _ij2[0];
                                                                    vinfos[0].indices[1] = _ij2[1];
                                                                    vinfos[0].maxsolutions = _nj2;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j3;
                                                                    vinfos[1].indices[0] = _ij3[0];
                                                                    vinfos[1].indices[1] = _ij3[1];
                                                                    vinfos[1].maxsolutions = _nj3;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j4;
                                                                    vinfos[2].indices[0] = _ij4[0];
                                                                    vinfos[2].indices[1] = _ij4[1];
                                                                    vinfos[2].maxsolutions = _nj4;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j5;
                                                                    vinfos[3].indices[0] = _ij5[0];
                                                                    vinfos[3].indices[1] = _ij5[1];
                                                                    vinfos[3].maxsolutions = _nj5;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j8;
                                                                    vinfos[4].indices[0] = _ij8[0];
                                                                    vinfos[4].indices[1] = _ij8[1];
                                                                    vinfos[4].maxsolutions = _nj8;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j9;
                                                                    vinfos[5].indices[0] = _ij9[0];
                                                                    vinfos[5].indices[1] = _ij9[1];
                                                                    vinfos[5].maxsolutions = _nj9;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j10;
                                                                    vinfos[6].indices[0] = _ij10[0];
                                                                    vinfos[6].indices[1] = _ij10[1];
                                                                    vinfos[6].maxsolutions = _nj10;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        else
                                                        {
                                                          {
                                                            IkReal j8array[1], cj8array[1], sj8array[1];
                                                            bool j8valid[1] = { false };
                                                            _nj8 = 1;
                                                            IkReal x462 = ((1.0) * new_r11);
                                                            CheckValue<IkReal> x463 = IKatan2WithCheck(
                                                                IkReal((((gconst2 * new_r01)) +
                                                                        (((-1.0) * gconst1 * x462)))),
                                                                IkReal(((((-1.0) * gconst2 * x462)) +
                                                                        (((-1.0) * gconst1 * new_r01)))),
                                                                IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x463.valid)
                                                            {
                                                              continue;
                                                            }
                                                            CheckValue<IkReal> x464 = IKPowWithIntegerCheck(
                                                                IKsign(((new_r01 * new_r01) + (new_r11 * new_r11))), -1);
                                                            if (!x464.valid)
                                                            {
                                                              continue;
                                                            }
                                                            j8array[0] = ((-1.5707963267949) + (x463.value) +
                                                                          (((1.5707963267949) * (x464.value))));
                                                            sj8array[0] = IKsin(j8array[0]);
                                                            cj8array[0] = IKcos(j8array[0]);
                                                            if (j8array[0] > IKPI)
                                                            {
                                                              j8array[0] -= IK2PI;
                                                            }
                                                            else if (j8array[0] < -IKPI)
                                                            {
                                                              j8array[0] += IK2PI;
                                                            }
                                                            j8valid[0] = true;
                                                            for (int ij8 = 0; ij8 < 1; ++ij8)
                                                            {
                                                              if (!j8valid[ij8])
                                                              {
                                                                continue;
                                                              }
                                                              _ij8[0] = ij8;
                                                              _ij8[1] = -1;
                                                              for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                              {
                                                                if (j8valid[iij8] &&
                                                                    IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j8valid[iij8] = false;
                                                                  _ij8[1] = iij8;
                                                                  break;
                                                                }
                                                              }
                                                              j8 = j8array[ij8];
                                                              cj8 = cj8array[ij8];
                                                              sj8 = sj8array[ij8];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x465 = IKsin(j8);
                                                                IkReal x466 = IKcos(j8);
                                                                IkReal x467 = (gconst1 * x466);
                                                                IkReal x468 = (gconst1 * x465);
                                                                IkReal x469 = (gconst2 * x466);
                                                                IkReal x470 = ((1.0) * x465);
                                                                IkReal x471 = (gconst2 * x470);
                                                                evalcond[0] =
                                                                    (((new_r11 * x465)) + ((new_r01 * x466)) + gconst1);
                                                                evalcond[1] = (x469 + x468 + new_r11);
                                                                evalcond[2] = (((new_r10 * x466)) + gconst1 +
                                                                               (((-1.0) * new_r00 * x470)));
                                                                evalcond[3] = (((new_r11 * x466)) + gconst2 +
                                                                               (((-1.0) * new_r01 * x470)));
                                                                evalcond[4] = ((((-1.0) * x471)) + x467 + new_r01);
                                                                evalcond[5] = ((((-1.0) * x471)) + x467 + new_r10);
                                                                evalcond[6] = (((new_r10 * x465)) + ((new_r00 * x466)) +
                                                                               (((-1.0) * gconst2)));
                                                                evalcond[7] =
                                                                    ((((-1.0) * x469)) + (((-1.0) * x468)) + new_r00);
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j2;
                                                                vinfos[0].indices[0] = _ij2[0];
                                                                vinfos[0].indices[1] = _ij2[1];
                                                                vinfos[0].maxsolutions = _nj2;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j3;
                                                                vinfos[1].indices[0] = _ij3[0];
                                                                vinfos[1].indices[1] = _ij3[1];
                                                                vinfos[1].maxsolutions = _nj3;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j4;
                                                                vinfos[2].indices[0] = _ij4[0];
                                                                vinfos[2].indices[1] = _ij4[1];
                                                                vinfos[2].maxsolutions = _nj4;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j5;
                                                                vinfos[3].indices[0] = _ij5[0];
                                                                vinfos[3].indices[1] = _ij5[1];
                                                                vinfos[3].maxsolutions = _nj5;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j8;
                                                                vinfos[4].indices[0] = _ij8[0];
                                                                vinfos[4].indices[1] = _ij8[1];
                                                                vinfos[4].maxsolutions = _nj8;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j9;
                                                                vinfos[5].indices[0] = _ij9[0];
                                                                vinfos[5].indices[1] = _ij9[1];
                                                                vinfos[5].maxsolutions = _nj9;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j10;
                                                                vinfos[6].indices[0] = _ij10[0];
                                                                vinfos[6].indices[1] = _ij10[1];
                                                                vinfos[6].maxsolutions = _nj10;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    else
                                                    {
                                                      {
                                                        IkReal j8array[1], cj8array[1], sj8array[1];
                                                        bool j8valid[1] = { false };
                                                        _nj8 = 1;
                                                        IkReal x472 = ((1.0) * gconst1);
                                                        CheckValue<IkReal> x473 = IKPowWithIntegerCheck(
                                                            IKsign((((new_r10 * new_r11)) + ((new_r00 * new_r01)))), -1);
                                                        if (!x473.valid)
                                                        {
                                                          continue;
                                                        }
                                                        CheckValue<IkReal> x474 =
                                                            IKatan2WithCheck(IkReal((((gconst1 * new_r01)) +
                                                                                     (((-1.0) * new_r10 * x472)))),
                                                                             IkReal(((((-1.0) * new_r00 * x472)) +
                                                                                     (((-1.0) * new_r11 * x472)))),
                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x474.valid)
                                                        {
                                                          continue;
                                                        }
                                                        j8array[0] =
                                                            ((-1.5707963267949) + (((1.5707963267949) * (x473.value))) +
                                                             (x474.value));
                                                        sj8array[0] = IKsin(j8array[0]);
                                                        cj8array[0] = IKcos(j8array[0]);
                                                        if (j8array[0] > IKPI)
                                                        {
                                                          j8array[0] -= IK2PI;
                                                        }
                                                        else if (j8array[0] < -IKPI)
                                                        {
                                                          j8array[0] += IK2PI;
                                                        }
                                                        j8valid[0] = true;
                                                        for (int ij8 = 0; ij8 < 1; ++ij8)
                                                        {
                                                          if (!j8valid[ij8])
                                                          {
                                                            continue;
                                                          }
                                                          _ij8[0] = ij8;
                                                          _ij8[1] = -1;
                                                          for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                          {
                                                            if (j8valid[iij8] &&
                                                                IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j8valid[iij8] = false;
                                                              _ij8[1] = iij8;
                                                              break;
                                                            }
                                                          }
                                                          j8 = j8array[ij8];
                                                          cj8 = cj8array[ij8];
                                                          sj8 = sj8array[ij8];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x475 = IKsin(j8);
                                                            IkReal x476 = IKcos(j8);
                                                            IkReal x477 = (gconst1 * x476);
                                                            IkReal x478 = (gconst1 * x475);
                                                            IkReal x479 = (gconst2 * x476);
                                                            IkReal x480 = ((1.0) * x475);
                                                            IkReal x481 = (gconst2 * x480);
                                                            evalcond[0] =
                                                                (((new_r01 * x476)) + gconst1 + ((new_r11 * x475)));
                                                            evalcond[1] = (x478 + x479 + new_r11);
                                                            evalcond[2] = ((((-1.0) * new_r00 * x480)) +
                                                                           ((new_r10 * x476)) + gconst1);
                                                            evalcond[3] = ((((-1.0) * new_r01 * x480)) + gconst2 +
                                                                           ((new_r11 * x476)));
                                                            evalcond[4] = ((((-1.0) * x481)) + x477 + new_r01);
                                                            evalcond[5] = ((((-1.0) * x481)) + x477 + new_r10);
                                                            evalcond[6] = (((new_r10 * x475)) + ((new_r00 * x476)) +
                                                                           (((-1.0) * gconst2)));
                                                            evalcond[7] =
                                                                ((((-1.0) * x478)) + (((-1.0) * x479)) + new_r00);
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 17;
                                                            vinfos[0].foffset = j2;
                                                            vinfos[0].indices[0] = _ij2[0];
                                                            vinfos[0].indices[1] = _ij2[1];
                                                            vinfos[0].maxsolutions = _nj2;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j3;
                                                            vinfos[1].indices[0] = _ij3[0];
                                                            vinfos[1].indices[1] = _ij3[1];
                                                            vinfos[1].maxsolutions = _nj3;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j4;
                                                            vinfos[2].indices[0] = _ij4[0];
                                                            vinfos[2].indices[1] = _ij4[1];
                                                            vinfos[2].maxsolutions = _nj4;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j5;
                                                            vinfos[3].indices[0] = _ij5[0];
                                                            vinfos[3].indices[1] = _ij5[1];
                                                            vinfos[3].maxsolutions = _nj5;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j8;
                                                            vinfos[4].indices[0] = _ij8[0];
                                                            vinfos[4].indices[1] = _ij8[1];
                                                            vinfos[4].maxsolutions = _nj8;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j9;
                                                            vinfos[5].indices[0] = _ij9[0];
                                                            vinfos[5].indices[1] = _ij9[1];
                                                            vinfos[5].maxsolutions = _nj9;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j10;
                                                            vinfos[6].indices[0] = _ij10[0];
                                                            vinfos[6].indices[1] = _ij10[1];
                                                            vinfos[6].maxsolutions = _nj10;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  IkReal x483 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                  if (IKabs(x483) == 0)
                                                  {
                                                    continue;
                                                  }
                                                  IkReal x482 = pow(x483, -0.5);
                                                  CheckValue<IkReal> x484 = IKatan2WithCheck(
                                                      IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x484.valid)
                                                  {
                                                    continue;
                                                  }
                                                  IkReal gconst3 = ((3.14159265358979) + (((-1.0) * (x484.value))));
                                                  IkReal gconst4 = ((1.0) * new_r01 * x482);
                                                  IkReal gconst5 = ((-1.0) * new_r11 * x482);
                                                  CheckValue<IkReal> x485 = IKatan2WithCheck(
                                                      IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x485.valid)
                                                  {
                                                    continue;
                                                  }
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) +
                                                                (IKabs(((-3.14159265358979) + j10 + (x485.value))))),
                                                               6.28318530717959)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j8eval[3];
                                                      CheckValue<IkReal> x488 = IKatan2WithCheck(
                                                          IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x488.valid)
                                                      {
                                                        continue;
                                                      }
                                                      IkReal x486 = ((1.0) * (x488.value));
                                                      IkReal x487 = x482;
                                                      sj9 = 1.0;
                                                      cj9 = 0;
                                                      j9 = 1.5707963267949;
                                                      sj10 = gconst4;
                                                      cj10 = gconst5;
                                                      j10 = ((3.14159265) + (((-1.0) * x486)));
                                                      IkReal gconst3 = ((3.14159265358979) + (((-1.0) * x486)));
                                                      IkReal gconst4 = ((1.0) * new_r01 * x487);
                                                      IkReal gconst5 = ((-1.0) * new_r11 * x487);
                                                      IkReal x489 = new_r01 * new_r01;
                                                      IkReal x490 = (((new_r10 * new_r11)) + ((new_r00 * new_r01)));
                                                      IkReal x491 = x482;
                                                      IkReal x492 = ((1.0) * new_r01 * x491);
                                                      j8eval[0] = x490;
                                                      j8eval[1] = IKsign(x490);
                                                      j8eval[2] =
                                                          ((IKabs(((((-1.0) * new_r00 * x492)) +
                                                                   (((-1.0) * new_r11 * x492))))) +
                                                           (IKabs(((((-1.0) * new_r10 * x492)) + ((x489 * x491))))));
                                                      if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                          IKabs(j8eval[1]) < 0.0000010000000000 ||
                                                          IKabs(j8eval[2]) < 0.0000010000000000)
                                                      {
                                                        {
                                                          IkReal j8eval[2];
                                                          CheckValue<IkReal> x495 = IKatan2WithCheck(
                                                              IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x495.valid)
                                                          {
                                                            continue;
                                                          }
                                                          IkReal x493 = ((1.0) * (x495.value));
                                                          IkReal x494 = x482;
                                                          sj9 = 1.0;
                                                          cj9 = 0;
                                                          j9 = 1.5707963267949;
                                                          sj10 = gconst4;
                                                          cj10 = gconst5;
                                                          j10 = ((3.14159265) + (((-1.0) * x493)));
                                                          IkReal gconst3 = ((3.14159265358979) + (((-1.0) * x493)));
                                                          IkReal gconst4 = ((1.0) * new_r01 * x494);
                                                          IkReal gconst5 = ((-1.0) * new_r11 * x494);
                                                          IkReal x496 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                          j8eval[0] = x496;
                                                          j8eval[1] = IKsign(x496);
                                                          if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                              IKabs(j8eval[1]) < 0.0000010000000000)
                                                          {
                                                            {
                                                              IkReal j8eval[1];
                                                              CheckValue<IkReal> x499 =
                                                                  IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11),
                                                                                   IKFAST_ATAN2_MAGTHRESH);
                                                              if (!x499.valid)
                                                              {
                                                                continue;
                                                              }
                                                              IkReal x497 = ((1.0) * (x499.value));
                                                              IkReal x498 = x482;
                                                              sj9 = 1.0;
                                                              cj9 = 0;
                                                              j9 = 1.5707963267949;
                                                              sj10 = gconst4;
                                                              cj10 = gconst5;
                                                              j10 = ((3.14159265) + (((-1.0) * x497)));
                                                              IkReal gconst3 = ((3.14159265358979) + (((-1.0) * x497)));
                                                              IkReal gconst4 = ((1.0) * new_r01 * x498);
                                                              IkReal gconst5 = ((-1.0) * new_r11 * x498);
                                                              IkReal x500 = new_r01 * new_r01;
                                                              IkReal x501 = new_r11 * new_r11;
                                                              IkReal x502 = ((1.0) * x500);
                                                              CheckValue<IkReal> x508 =
                                                                  IKPowWithIntegerCheck((x500 + x501), -1);
                                                              if (!x508.valid)
                                                              {
                                                                continue;
                                                              }
                                                              IkReal x503 = x508.value;
                                                              CheckValue<IkReal> x509 = IKPowWithIntegerCheck(
                                                                  ((((-1.0) * x502)) + (((-1.0) * x501))), -1);
                                                              if (!x509.valid)
                                                              {
                                                                continue;
                                                              }
                                                              IkReal x504 = x509.value;
                                                              IkReal x505 = ((1.0) * x504);
                                                              IkReal x506 = (new_r11 * x505);
                                                              IkReal x507 = (new_r01 * x505);
                                                              j8eval[0] = ((IKabs((((x500 * x501 * x503)) +
                                                                                   ((x503 * (x501 * x501))) +
                                                                                   (((-1.0) * x502 * x503))))) +
                                                                           (IKabs(((((-1.0) * new_r01 * x506)) +
                                                                                   (((-1.0) * x506 *
                                                                                     (new_r01 * new_r01 * new_r01))) +
                                                                                   (((-1.0) * new_r01 * x506 *
                                                                                     (new_r11 * new_r11)))))));
                                                              if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                              {
                                                                {
                                                                  IkReal evalcond[2];
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r00)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j8eval[1];
                                                                        CheckValue<IkReal> x511 =
                                                                            IKatan2WithCheck(IkReal(new_r01), IkReal(0),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x511.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        IkReal x510 = ((1.0) * (x511.value));
                                                                        sj9 = 1.0;
                                                                        cj9 = 0;
                                                                        j9 = 1.5707963267949;
                                                                        sj10 = gconst4;
                                                                        cj10 = gconst5;
                                                                        j10 = ((3.14159265) + (((-1.0) * x510)));
                                                                        new_r11 = 0;
                                                                        new_r00 = 0;
                                                                        IkReal gconst3 =
                                                                            ((3.14159265358979) + (((-1.0) * x510)));
                                                                        IkReal x512 = new_r01 * new_r01;
                                                                        if (IKabs(x512) == 0)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        IkReal gconst4 =
                                                                            ((1.0) * new_r01 * (pow(x512, -0.5)));
                                                                        IkReal gconst5 = 0;
                                                                        j8eval[0] = new_r01;
                                                                        if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j8eval[1];
                                                                            CheckValue<IkReal> x514 = IKatan2WithCheck(
                                                                                IkReal(new_r01), IkReal(0),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x514.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal x513 = ((1.0) * (x514.value));
                                                                            sj9 = 1.0;
                                                                            cj9 = 0;
                                                                            j9 = 1.5707963267949;
                                                                            sj10 = gconst4;
                                                                            cj10 = gconst5;
                                                                            j10 = ((3.14159265) + (((-1.0) * x513)));
                                                                            new_r11 = 0;
                                                                            new_r00 = 0;
                                                                            IkReal gconst3 = ((3.14159265358979) +
                                                                                              (((-1.0) * x513)));
                                                                            IkReal x515 = new_r01 * new_r01;
                                                                            if (IKabs(x515) == 0)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal gconst4 =
                                                                                ((1.0) * new_r01 * (pow(x515, -0.5)));
                                                                            IkReal gconst5 = 0;
                                                                            j8eval[0] = new_r10;
                                                                            if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal j8array[2], cj8array[2],
                                                                                    sj8array[2];
                                                                                bool j8valid[2] = { false };
                                                                                _nj8 = 2;
                                                                                CheckValue<IkReal> x516 =
                                                                                    IKPowWithIntegerCheck(gconst4, -1);
                                                                                if (!x516.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                cj8array[0] =
                                                                                    ((-1.0) * new_r01 * (x516.value));
                                                                                if (cj8array[0] >=
                                                                                        -1 - IKFAST_SINCOS_THRESH &&
                                                                                    cj8array[0] <=
                                                                                        1 + IKFAST_SINCOS_THRESH)
                                                                                {
                                                                                  j8valid[0] = j8valid[1] = true;
                                                                                  j8array[0] = IKacos(cj8array[0]);
                                                                                  sj8array[0] = IKsin(j8array[0]);
                                                                                  cj8array[1] = cj8array[0];
                                                                                  j8array[1] = -j8array[0];
                                                                                  sj8array[1] = -sj8array[0];
                                                                                }
                                                                                else if (isnan(cj8array[0]))
                                                                                {
                                                                                  // probably any value will work
                                                                                  j8valid[0] = true;
                                                                                  cj8array[0] = 1;
                                                                                  sj8array[0] = 0;
                                                                                  j8array[0] = 0;
                                                                                }
                                                                                for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                                {
                                                                                  if (!j8valid[ij8])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij8[0] = ij8;
                                                                                  _ij8[1] = -1;
                                                                                  for (int iij8 = ij8 + 1; iij8 < 2;
                                                                                       ++iij8)
                                                                                  {
                                                                                    if (j8valid[iij8] &&
                                                                                        IKabs(cj8array[ij8] -
                                                                                              cj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj8array[ij8] -
                                                                                              sj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j8valid[iij8] = false;
                                                                                      _ij8[1] = iij8;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j8 = j8array[ij8];
                                                                                  cj8 = cj8array[ij8];
                                                                                  sj8 = sj8array[ij8];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x517 = IKsin(j8);
                                                                                    IkReal x518 = IKcos(j8);
                                                                                    evalcond[0] = (new_r10 * x517);
                                                                                    evalcond[1] = (gconst4 * x517);
                                                                                    evalcond[2] =
                                                                                        ((-1.0) * new_r01 * x517);
                                                                                    evalcond[3] =
                                                                                        (((new_r01 * x518)) + gconst4);
                                                                                    evalcond[4] =
                                                                                        (((new_r10 * x518)) + gconst4);
                                                                                    evalcond[5] =
                                                                                        (new_r10 + ((gconst4 * x518)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j2;
                                                                                    vinfos[0].indices[0] = _ij2[0];
                                                                                    vinfos[0].indices[1] = _ij2[1];
                                                                                    vinfos[0].maxsolutions = _nj2;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j3;
                                                                                    vinfos[1].indices[0] = _ij3[0];
                                                                                    vinfos[1].indices[1] = _ij3[1];
                                                                                    vinfos[1].maxsolutions = _nj3;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j4;
                                                                                    vinfos[2].indices[0] = _ij4[0];
                                                                                    vinfos[2].indices[1] = _ij4[1];
                                                                                    vinfos[2].maxsolutions = _nj4;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j5;
                                                                                    vinfos[3].indices[0] = _ij5[0];
                                                                                    vinfos[3].indices[1] = _ij5[1];
                                                                                    vinfos[3].maxsolutions = _nj5;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j8;
                                                                                    vinfos[4].indices[0] = _ij8[0];
                                                                                    vinfos[4].indices[1] = _ij8[1];
                                                                                    vinfos[4].maxsolutions = _nj8;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j9;
                                                                                    vinfos[5].indices[0] = _ij9[0];
                                                                                    vinfos[5].indices[1] = _ij9[1];
                                                                                    vinfos[5].maxsolutions = _nj9;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j10;
                                                                                    vinfos[6].indices[0] = _ij10[0];
                                                                                    vinfos[6].indices[1] = _ij10[1];
                                                                                    vinfos[6].maxsolutions = _nj10;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j8array[2], cj8array[2],
                                                                                    sj8array[2];
                                                                                bool j8valid[2] = { false };
                                                                                _nj8 = 2;
                                                                                CheckValue<IkReal> x519 =
                                                                                    IKPowWithIntegerCheck(new_r10, -1);
                                                                                if (!x519.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                cj8array[0] =
                                                                                    ((-1.0) * gconst4 * (x519.value));
                                                                                if (cj8array[0] >=
                                                                                        -1 - IKFAST_SINCOS_THRESH &&
                                                                                    cj8array[0] <=
                                                                                        1 + IKFAST_SINCOS_THRESH)
                                                                                {
                                                                                  j8valid[0] = j8valid[1] = true;
                                                                                  j8array[0] = IKacos(cj8array[0]);
                                                                                  sj8array[0] = IKsin(j8array[0]);
                                                                                  cj8array[1] = cj8array[0];
                                                                                  j8array[1] = -j8array[0];
                                                                                  sj8array[1] = -sj8array[0];
                                                                                }
                                                                                else if (isnan(cj8array[0]))
                                                                                {
                                                                                  // probably any value will work
                                                                                  j8valid[0] = true;
                                                                                  cj8array[0] = 1;
                                                                                  sj8array[0] = 0;
                                                                                  j8array[0] = 0;
                                                                                }
                                                                                for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                                {
                                                                                  if (!j8valid[ij8])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij8[0] = ij8;
                                                                                  _ij8[1] = -1;
                                                                                  for (int iij8 = ij8 + 1; iij8 < 2;
                                                                                       ++iij8)
                                                                                  {
                                                                                    if (j8valid[iij8] &&
                                                                                        IKabs(cj8array[ij8] -
                                                                                              cj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj8array[ij8] -
                                                                                              sj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j8valid[iij8] = false;
                                                                                      _ij8[1] = iij8;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j8 = j8array[ij8];
                                                                                  cj8 = cj8array[ij8];
                                                                                  sj8 = sj8array[ij8];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x520 = IKsin(j8);
                                                                                    IkReal x521 = IKcos(j8);
                                                                                    IkReal x522 = (gconst4 * x521);
                                                                                    evalcond[0] = (new_r10 * x520);
                                                                                    evalcond[1] = (gconst4 * x520);
                                                                                    evalcond[2] =
                                                                                        ((-1.0) * new_r01 * x520);
                                                                                    evalcond[3] =
                                                                                        (((new_r01 * x521)) + gconst4);
                                                                                    evalcond[4] = (x522 + new_r01);
                                                                                    evalcond[5] = (x522 + new_r10);
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j2;
                                                                                    vinfos[0].indices[0] = _ij2[0];
                                                                                    vinfos[0].indices[1] = _ij2[1];
                                                                                    vinfos[0].maxsolutions = _nj2;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j3;
                                                                                    vinfos[1].indices[0] = _ij3[0];
                                                                                    vinfos[1].indices[1] = _ij3[1];
                                                                                    vinfos[1].maxsolutions = _nj3;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j4;
                                                                                    vinfos[2].indices[0] = _ij4[0];
                                                                                    vinfos[2].indices[1] = _ij4[1];
                                                                                    vinfos[2].maxsolutions = _nj4;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j5;
                                                                                    vinfos[3].indices[0] = _ij5[0];
                                                                                    vinfos[3].indices[1] = _ij5[1];
                                                                                    vinfos[3].maxsolutions = _nj5;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j8;
                                                                                    vinfos[4].indices[0] = _ij8[0];
                                                                                    vinfos[4].indices[1] = _ij8[1];
                                                                                    vinfos[4].maxsolutions = _nj8;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j9;
                                                                                    vinfos[5].indices[0] = _ij9[0];
                                                                                    vinfos[5].indices[1] = _ij9[1];
                                                                                    vinfos[5].maxsolutions = _nj9;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j10;
                                                                                    vinfos[6].indices[0] = _ij10[0];
                                                                                    vinfos[6].indices[1] = _ij10[1];
                                                                                    vinfos[6].maxsolutions = _nj10;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j8array[2], cj8array[2], sj8array[2];
                                                                            bool j8valid[2] = { false };
                                                                            _nj8 = 2;
                                                                            CheckValue<IkReal> x523 =
                                                                                IKPowWithIntegerCheck(new_r01, -1);
                                                                            if (!x523.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            cj8array[0] =
                                                                                ((-1.0) * gconst4 * (x523.value));
                                                                            if (cj8array[0] >=
                                                                                    -1 - IKFAST_SINCOS_THRESH &&
                                                                                cj8array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                            {
                                                                              j8valid[0] = j8valid[1] = true;
                                                                              j8array[0] = IKacos(cj8array[0]);
                                                                              sj8array[0] = IKsin(j8array[0]);
                                                                              cj8array[1] = cj8array[0];
                                                                              j8array[1] = -j8array[0];
                                                                              sj8array[1] = -sj8array[0];
                                                                            }
                                                                            else if (isnan(cj8array[0]))
                                                                            {
                                                                              // probably any value will work
                                                                              j8valid[0] = true;
                                                                              cj8array[0] = 1;
                                                                              sj8array[0] = 0;
                                                                              j8array[0] = 0;
                                                                            }
                                                                            for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                            {
                                                                              if (!j8valid[ij8])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij8[0] = ij8;
                                                                              _ij8[1] = -1;
                                                                              for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                                              {
                                                                                if (j8valid[iij8] &&
                                                                                    IKabs(cj8array[ij8] -
                                                                                          cj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj8array[ij8] -
                                                                                          sj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j8valid[iij8] = false;
                                                                                  _ij8[1] = iij8;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j8 = j8array[ij8];
                                                                              cj8 = cj8array[ij8];
                                                                              sj8 = sj8array[ij8];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x524 = IKsin(j8);
                                                                                IkReal x525 = IKcos(j8);
                                                                                IkReal x526 = (gconst4 * x525);
                                                                                evalcond[0] = (new_r10 * x524);
                                                                                evalcond[1] = (gconst4 * x524);
                                                                                evalcond[2] = ((-1.0) * new_r01 * x524);
                                                                                evalcond[3] =
                                                                                    (gconst4 + ((new_r10 * x525)));
                                                                                evalcond[4] = (x526 + new_r01);
                                                                                evalcond[5] = (x526 + new_r10);
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j2;
                                                                                vinfos[0].indices[0] = _ij2[0];
                                                                                vinfos[0].indices[1] = _ij2[1];
                                                                                vinfos[0].maxsolutions = _nj2;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j3;
                                                                                vinfos[1].indices[0] = _ij3[0];
                                                                                vinfos[1].indices[1] = _ij3[1];
                                                                                vinfos[1].maxsolutions = _nj3;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j4;
                                                                                vinfos[2].indices[0] = _ij4[0];
                                                                                vinfos[2].indices[1] = _ij4[1];
                                                                                vinfos[2].maxsolutions = _nj4;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j5;
                                                                                vinfos[3].indices[0] = _ij5[0];
                                                                                vinfos[3].indices[1] = _ij5[1];
                                                                                vinfos[3].maxsolutions = _nj5;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j8;
                                                                                vinfos[4].indices[0] = _ij8[0];
                                                                                vinfos[4].indices[1] = _ij8[1];
                                                                                vinfos[4].maxsolutions = _nj8;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j9;
                                                                                vinfos[5].indices[0] = _ij9[0];
                                                                                vinfos[5].indices[1] = _ij9[1];
                                                                                vinfos[5].maxsolutions = _nj9;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j10;
                                                                                vinfos[6].indices[0] = _ij10[0];
                                                                                vinfos[6].indices[1] = _ij10[1];
                                                                                vinfos[6].maxsolutions = _nj10;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement)
                                                                  {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      evalcond[0] =
                                                                          ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                      evalcond[1] = gconst4;
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[1]) < 0.0000050000000000)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j8eval[4];
                                                                          CheckValue<IkReal> x528 =
                                                                              IKatan2WithCheck(IkReal(new_r01),
                                                                                               IkReal(new_r11),
                                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                                          if (!x528.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          IkReal x527 = ((1.0) * (x528.value));
                                                                          sj9 = 1.0;
                                                                          cj9 = 0;
                                                                          j9 = 1.5707963267949;
                                                                          sj10 = gconst4;
                                                                          cj10 = gconst5;
                                                                          j10 = ((3.14159265) + (((-1.0) * x527)));
                                                                          new_r00 = 0;
                                                                          new_r10 = 0;
                                                                          new_r21 = 0;
                                                                          new_r22 = 0;
                                                                          IkReal gconst3 =
                                                                              ((3.14159265358979) + (((-1.0) * x527)));
                                                                          IkReal gconst4 = ((1.0) * new_r01);
                                                                          IkReal gconst5 = ((-1.0) * new_r11);
                                                                          j8eval[0] = 1.0;
                                                                          j8eval[1] = 1.0;
                                                                          j8eval[2] = new_r01;
                                                                          j8eval[3] = 1.0;
                                                                          if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                              IKabs(j8eval[1]) < 0.0000010000000000 ||
                                                                              IKabs(j8eval[2]) < 0.0000010000000000 ||
                                                                              IKabs(j8eval[3]) < 0.0000010000000000)
                                                                          {
                                                                            {
                                                                              IkReal j8eval[3];
                                                                              CheckValue<IkReal> x530 =
                                                                                  IKatan2WithCheck(
                                                                                      IkReal(new_r01), IkReal(new_r11),
                                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x530.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal x529 = ((1.0) * (x530.value));
                                                                              sj9 = 1.0;
                                                                              cj9 = 0;
                                                                              j9 = 1.5707963267949;
                                                                              sj10 = gconst4;
                                                                              cj10 = gconst5;
                                                                              j10 = ((3.14159265) + (((-1.0) * x529)));
                                                                              new_r00 = 0;
                                                                              new_r10 = 0;
                                                                              new_r21 = 0;
                                                                              new_r22 = 0;
                                                                              IkReal gconst3 = ((3.14159265358979) +
                                                                                                (((-1.0) * x529)));
                                                                              IkReal gconst4 = ((1.0) * new_r01);
                                                                              IkReal gconst5 = ((-1.0) * new_r11);
                                                                              j8eval[0] = -1.0;
                                                                              j8eval[1] =
                                                                                  ((IKabs(((-1.0) +
                                                                                           (new_r01 * new_r01)))) +
                                                                                   (IKabs(((1.0) * new_r01 * new_r11))));
                                                                              j8eval[2] = -1.0;
                                                                              if (IKabs(j8eval[0]) <
                                                                                      0.0000010000000000 ||
                                                                                  IKabs(j8eval[1]) <
                                                                                      0.0000010000000000 ||
                                                                                  IKabs(j8eval[2]) < 0.0000010000000000)
                                                                              {
                                                                                {
                                                                                  IkReal j8eval[3];
                                                                                  CheckValue<IkReal> x532 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(new_r01),
                                                                                          IkReal(new_r11),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x532.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal x531 = ((1.0) * (x532.value));
                                                                                  sj9 = 1.0;
                                                                                  cj9 = 0;
                                                                                  j9 = 1.5707963267949;
                                                                                  sj10 = gconst4;
                                                                                  cj10 = gconst5;
                                                                                  j10 = ((3.14159265) +
                                                                                         (((-1.0) * x531)));
                                                                                  new_r00 = 0;
                                                                                  new_r10 = 0;
                                                                                  new_r21 = 0;
                                                                                  new_r22 = 0;
                                                                                  IkReal gconst3 = ((3.14159265358979) +
                                                                                                    (((-1.0) * x531)));
                                                                                  IkReal gconst4 = ((1.0) * new_r01);
                                                                                  IkReal gconst5 = ((-1.0) * new_r11);
                                                                                  j8eval[0] = 1.0;
                                                                                  j8eval[1] =
                                                                                      ((IKabs(((2.0) * new_r01 *
                                                                                               new_r11))) +
                                                                                       (IKabs(((1.0) + (((-2.0) *
                                                                                                         (new_r01 *
                                                                                                          new_r01)))))));
                                                                                  j8eval[2] = 1.0;
                                                                                  if (IKabs(j8eval[0]) <
                                                                                          0.0000010000000000 ||
                                                                                      IKabs(j8eval[1]) <
                                                                                          0.0000010000000000 ||
                                                                                      IKabs(j8eval[2]) <
                                                                                          0.0000010000000000)
                                                                                  {
                                                                                    continue;  // 3 cases reached
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    {
                                                                                      IkReal j8array[1], cj8array[1],
                                                                                          sj8array[1];
                                                                                      bool j8valid[1] = { false };
                                                                                      _nj8 = 1;
                                                                                      IkReal x533 = ((1.0) * new_r11);
                                                                                      CheckValue<IkReal> x534 =
                                                                                          IKPowWithIntegerCheck(
                                                                                              IKsign((
                                                                                                  (new_r01 * new_r01) +
                                                                                                  (new_r11 * new_r11))),
                                                                                              -1);
                                                                                      if (!x534.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      CheckValue<IkReal> x535 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal((
                                                                                                  ((gconst5 * new_r01)) +
                                                                                                  (((-1.0) * gconst4 *
                                                                                                    x533)))),
                                                                                              IkReal(
                                                                                                  ((((-1.0) * gconst4 *
                                                                                                     new_r01)) +
                                                                                                   (((-1.0) * gconst5 *
                                                                                                     x533)))),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x535.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      j8array[0] =
                                                                                          ((-1.5707963267949) +
                                                                                           (((1.5707963267949) *
                                                                                             (x534.value))) +
                                                                                           (x535.value));
                                                                                      sj8array[0] = IKsin(j8array[0]);
                                                                                      cj8array[0] = IKcos(j8array[0]);
                                                                                      if (j8array[0] > IKPI)
                                                                                      {
                                                                                        j8array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j8array[0] < -IKPI)
                                                                                      {
                                                                                        j8array[0] += IK2PI;
                                                                                      }
                                                                                      j8valid[0] = true;
                                                                                      for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                      {
                                                                                        if (!j8valid[ij8])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij8[0] = ij8;
                                                                                        _ij8[1] = -1;
                                                                                        for (int iij8 = ij8 + 1;
                                                                                             iij8 < 1; ++iij8)
                                                                                        {
                                                                                          if (j8valid[iij8] &&
                                                                                              IKabs(cj8array[ij8] -
                                                                                                    cj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj8array[ij8] -
                                                                                                    sj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j8valid[iij8] = false;
                                                                                            _ij8[1] = iij8;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j8 = j8array[ij8];
                                                                                        cj8 = cj8array[ij8];
                                                                                        sj8 = sj8array[ij8];
                                                                                        {
                                                                                          IkReal evalcond[6];
                                                                                          IkReal x536 = IKcos(j8);
                                                                                          IkReal x537 = IKsin(j8);
                                                                                          IkReal x538 =
                                                                                              (gconst4 * x536);
                                                                                          IkReal x539 = ((1.0) * x537);
                                                                                          IkReal x540 =
                                                                                              (gconst5 * x536);
                                                                                          IkReal x541 =
                                                                                              (gconst5 * x539);
                                                                                          evalcond[0] =
                                                                                              (((new_r01 * x536)) +
                                                                                               gconst4 +
                                                                                               ((new_r11 * x537)));
                                                                                          evalcond[1] =
                                                                                              (((gconst4 * x537)) +
                                                                                               x540 + new_r11);
                                                                                          evalcond[2] =
                                                                                              ((((-1.0) * x541)) + x538);
                                                                                          evalcond[3] =
                                                                                              (gconst5 +
                                                                                               ((new_r11 * x536)) +
                                                                                               (((-1.0) * new_r01 *
                                                                                                 x539)));
                                                                                          evalcond[4] =
                                                                                              ((((-1.0) * x541)) +
                                                                                               x538 + new_r01);
                                                                                          evalcond[5] =
                                                                                              ((((-1.0) * x540)) +
                                                                                               (((-1.0) * gconst4 *
                                                                                                 x539)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j2;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[0].maxsolutions = _nj2;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j3;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[1].maxsolutions = _nj3;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j4;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[2].maxsolutions = _nj4;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j5;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[3].maxsolutions = _nj5;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j8;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij8[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij8[1];
                                                                                          vinfos[4].maxsolutions = _nj8;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j9;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij9[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij9[1];
                                                                                          vinfos[5].maxsolutions = _nj9;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j10;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij10[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij10[1];
                                                                                          vinfos[6].maxsolutions =
                                                                                              _nj10;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                {
                                                                                  IkReal j8array[1], cj8array[1],
                                                                                      sj8array[1];
                                                                                  bool j8valid[1] = { false };
                                                                                  _nj8 = 1;
                                                                                  CheckValue<IkReal> x542 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal((gconst4 * new_r11)),
                                                                                          IkReal((gconst5 * new_r11)),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x542.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  CheckValue<IkReal> x543 =
                                                                                      IKPowWithIntegerCheck(
                                                                                          IKsign(
                                                                                              ((((-1.0) *
                                                                                                 (gconst4 * gconst4))) +
                                                                                               (((-1.0) * (gconst5 *
                                                                                                           gconst5))))),
                                                                                          -1);
                                                                                  if (!x543.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  j8array[0] = ((-1.5707963267949) +
                                                                                                (x542.value) +
                                                                                                (((1.5707963267949) *
                                                                                                  (x543.value))));
                                                                                  sj8array[0] = IKsin(j8array[0]);
                                                                                  cj8array[0] = IKcos(j8array[0]);
                                                                                  if (j8array[0] > IKPI)
                                                                                  {
                                                                                    j8array[0] -= IK2PI;
                                                                                  }
                                                                                  else if (j8array[0] < -IKPI)
                                                                                  {
                                                                                    j8array[0] += IK2PI;
                                                                                  }
                                                                                  j8valid[0] = true;
                                                                                  for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                  {
                                                                                    if (!j8valid[ij8])
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    _ij8[0] = ij8;
                                                                                    _ij8[1] = -1;
                                                                                    for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                         ++iij8)
                                                                                    {
                                                                                      if (j8valid[iij8] &&
                                                                                          IKabs(cj8array[ij8] -
                                                                                                cj8array[iij8]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj8array[ij8] -
                                                                                                sj8array[iij8]) <
                                                                                              IKFAST_SOLUTION_THRESH)
                                                                                      {
                                                                                        j8valid[iij8] = false;
                                                                                        _ij8[1] = iij8;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j8 = j8array[ij8];
                                                                                    cj8 = cj8array[ij8];
                                                                                    sj8 = sj8array[ij8];
                                                                                    {
                                                                                      IkReal evalcond[6];
                                                                                      IkReal x544 = IKcos(j8);
                                                                                      IkReal x545 = IKsin(j8);
                                                                                      IkReal x546 = (gconst4 * x544);
                                                                                      IkReal x547 = ((1.0) * x545);
                                                                                      IkReal x548 = (gconst5 * x544);
                                                                                      IkReal x549 = (gconst5 * x547);
                                                                                      evalcond[0] =
                                                                                          (gconst4 + ((new_r11 * x545)) +
                                                                                           ((new_r01 * x544)));
                                                                                      evalcond[1] =
                                                                                          (((gconst4 * x545)) + x548 +
                                                                                           new_r11);
                                                                                      evalcond[2] =
                                                                                          ((((-1.0) * x549)) + x546);
                                                                                      evalcond[3] =
                                                                                          (gconst5 + ((new_r11 * x544)) +
                                                                                           (((-1.0) * new_r01 * x547)));
                                                                                      evalcond[4] = ((((-1.0) * x549)) +
                                                                                                     x546 + new_r01);
                                                                                      evalcond[5] =
                                                                                          ((((-1.0) * x548)) +
                                                                                           (((-1.0) * gconst4 * x547)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[4]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[5]) >
                                                                                              IKFAST_EVALCOND_THRESH)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 17;
                                                                                      vinfos[0].foffset = j2;
                                                                                      vinfos[0].indices[0] = _ij2[0];
                                                                                      vinfos[0].indices[1] = _ij2[1];
                                                                                      vinfos[0].maxsolutions = _nj2;
                                                                                      vinfos[1].jointtype = 17;
                                                                                      vinfos[1].foffset = j3;
                                                                                      vinfos[1].indices[0] = _ij3[0];
                                                                                      vinfos[1].indices[1] = _ij3[1];
                                                                                      vinfos[1].maxsolutions = _nj3;
                                                                                      vinfos[2].jointtype = 17;
                                                                                      vinfos[2].foffset = j4;
                                                                                      vinfos[2].indices[0] = _ij4[0];
                                                                                      vinfos[2].indices[1] = _ij4[1];
                                                                                      vinfos[2].maxsolutions = _nj4;
                                                                                      vinfos[3].jointtype = 17;
                                                                                      vinfos[3].foffset = j5;
                                                                                      vinfos[3].indices[0] = _ij5[0];
                                                                                      vinfos[3].indices[1] = _ij5[1];
                                                                                      vinfos[3].maxsolutions = _nj5;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j8;
                                                                                      vinfos[4].indices[0] = _ij8[0];
                                                                                      vinfos[4].indices[1] = _ij8[1];
                                                                                      vinfos[4].maxsolutions = _nj8;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j9;
                                                                                      vinfos[5].indices[0] = _ij9[0];
                                                                                      vinfos[5].indices[1] = _ij9[1];
                                                                                      vinfos[5].maxsolutions = _nj9;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j10;
                                                                                      vinfos[6].indices[0] = _ij10[0];
                                                                                      vinfos[6].indices[1] = _ij10[1];
                                                                                      vinfos[6].maxsolutions = _nj10;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            {
                                                                              IkReal j8array[1], cj8array[1],
                                                                                  sj8array[1];
                                                                              bool j8valid[1] = { false };
                                                                              _nj8 = 1;
                                                                              CheckValue<IkReal> x550 = IKatan2WithCheck(
                                                                                  IkReal((gconst4 * gconst5)),
                                                                                  IkReal(((-1.0) * (gconst4 * gconst4))),
                                                                                  IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x550.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              CheckValue<IkReal> x551 =
                                                                                  IKPowWithIntegerCheck(
                                                                                      IKsign((((gconst4 * new_r01)) +
                                                                                              (((-1.0) * gconst5 *
                                                                                                new_r11)))),
                                                                                      -1);
                                                                              if (!x551.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              j8array[0] =
                                                                                  ((-1.5707963267949) + (x550.value) +
                                                                                   (((1.5707963267949) * (x551.value))));
                                                                              sj8array[0] = IKsin(j8array[0]);
                                                                              cj8array[0] = IKcos(j8array[0]);
                                                                              if (j8array[0] > IKPI)
                                                                              {
                                                                                j8array[0] -= IK2PI;
                                                                              }
                                                                              else if (j8array[0] < -IKPI)
                                                                              {
                                                                                j8array[0] += IK2PI;
                                                                              }
                                                                              j8valid[0] = true;
                                                                              for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                              {
                                                                                if (!j8valid[ij8])
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                _ij8[0] = ij8;
                                                                                _ij8[1] = -1;
                                                                                for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                     ++iij8)
                                                                                {
                                                                                  if (j8valid[iij8] &&
                                                                                      IKabs(cj8array[ij8] -
                                                                                            cj8array[iij8]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj8array[ij8] -
                                                                                            sj8array[iij8]) <
                                                                                          IKFAST_SOLUTION_THRESH)
                                                                                  {
                                                                                    j8valid[iij8] = false;
                                                                                    _ij8[1] = iij8;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j8 = j8array[ij8];
                                                                                cj8 = cj8array[ij8];
                                                                                sj8 = sj8array[ij8];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x552 = IKcos(j8);
                                                                                  IkReal x553 = IKsin(j8);
                                                                                  IkReal x554 = (gconst4 * x552);
                                                                                  IkReal x555 = ((1.0) * x553);
                                                                                  IkReal x556 = (gconst5 * x552);
                                                                                  IkReal x557 = (gconst5 * x555);
                                                                                  evalcond[0] =
                                                                                      (((new_r11 * x553)) + gconst4 +
                                                                                       ((new_r01 * x552)));
                                                                                  evalcond[1] = (((gconst4 * x553)) +
                                                                                                 x556 + new_r11);
                                                                                  evalcond[2] =
                                                                                      ((((-1.0) * x557)) + x554);
                                                                                  evalcond[3] =
                                                                                      (((new_r11 * x552)) + gconst5 +
                                                                                       (((-1.0) * new_r01 * x555)));
                                                                                  evalcond[4] = ((((-1.0) * x557)) +
                                                                                                 x554 + new_r01);
                                                                                  evalcond[5] =
                                                                                      ((((-1.0) * gconst4 * x555)) +
                                                                                       (((-1.0) * x556)));
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 17;
                                                                                  vinfos[0].foffset = j2;
                                                                                  vinfos[0].indices[0] = _ij2[0];
                                                                                  vinfos[0].indices[1] = _ij2[1];
                                                                                  vinfos[0].maxsolutions = _nj2;
                                                                                  vinfos[1].jointtype = 17;
                                                                                  vinfos[1].foffset = j3;
                                                                                  vinfos[1].indices[0] = _ij3[0];
                                                                                  vinfos[1].indices[1] = _ij3[1];
                                                                                  vinfos[1].maxsolutions = _nj3;
                                                                                  vinfos[2].jointtype = 17;
                                                                                  vinfos[2].foffset = j4;
                                                                                  vinfos[2].indices[0] = _ij4[0];
                                                                                  vinfos[2].indices[1] = _ij4[1];
                                                                                  vinfos[2].maxsolutions = _nj4;
                                                                                  vinfos[3].jointtype = 17;
                                                                                  vinfos[3].foffset = j5;
                                                                                  vinfos[3].indices[0] = _ij5[0];
                                                                                  vinfos[3].indices[1] = _ij5[1];
                                                                                  vinfos[3].maxsolutions = _nj5;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j8;
                                                                                  vinfos[4].indices[0] = _ij8[0];
                                                                                  vinfos[4].indices[1] = _ij8[1];
                                                                                  vinfos[4].maxsolutions = _nj8;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j9;
                                                                                  vinfos[5].indices[0] = _ij9[0];
                                                                                  vinfos[5].indices[1] = _ij9[1];
                                                                                  vinfos[5].maxsolutions = _nj9;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j10;
                                                                                  vinfos[6].indices[0] = _ij10[0];
                                                                                  vinfos[6].indices[1] = _ij10[1];
                                                                                  vinfos[6].maxsolutions = _nj10;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                      bool bgotonextstatement = true;
                                                                      do
                                                                      {
                                                                        evalcond[0] =
                                                                            ((IKabs(new_r10)) + (IKabs(new_r01)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j8array[2], cj8array[2], sj8array[2];
                                                                            bool j8valid[2] = { false };
                                                                            _nj8 = 2;
                                                                            CheckValue<IkReal> x558 =
                                                                                IKPowWithIntegerCheck(gconst5, -1);
                                                                            if (!x558.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            cj8array[0] = (new_r00 * (x558.value));
                                                                            if (cj8array[0] >=
                                                                                    -1 - IKFAST_SINCOS_THRESH &&
                                                                                cj8array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                            {
                                                                              j8valid[0] = j8valid[1] = true;
                                                                              j8array[0] = IKacos(cj8array[0]);
                                                                              sj8array[0] = IKsin(j8array[0]);
                                                                              cj8array[1] = cj8array[0];
                                                                              j8array[1] = -j8array[0];
                                                                              sj8array[1] = -sj8array[0];
                                                                            }
                                                                            else if (isnan(cj8array[0]))
                                                                            {
                                                                              // probably any value will work
                                                                              j8valid[0] = true;
                                                                              cj8array[0] = 1;
                                                                              sj8array[0] = 0;
                                                                              j8array[0] = 0;
                                                                            }
                                                                            for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                            {
                                                                              if (!j8valid[ij8])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij8[0] = ij8;
                                                                              _ij8[1] = -1;
                                                                              for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                                              {
                                                                                if (j8valid[iij8] &&
                                                                                    IKabs(cj8array[ij8] -
                                                                                          cj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj8array[ij8] -
                                                                                          sj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j8valid[iij8] = false;
                                                                                  _ij8[1] = iij8;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j8 = j8array[ij8];
                                                                              cj8 = cj8array[ij8];
                                                                              sj8 = sj8array[ij8];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x559 = IKsin(j8);
                                                                                IkReal x560 = IKcos(j8);
                                                                                IkReal x561 = ((-1.0) * x559);
                                                                                evalcond[0] = (new_r11 * x559);
                                                                                evalcond[1] = (new_r00 * x561);
                                                                                evalcond[2] = (gconst5 * x561);
                                                                                evalcond[3] =
                                                                                    (((gconst5 * x560)) + new_r11);
                                                                                evalcond[4] =
                                                                                    (gconst5 + ((new_r11 * x560)));
                                                                                evalcond[5] = (((new_r00 * x560)) +
                                                                                               (((-1.0) * gconst5)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j2;
                                                                                vinfos[0].indices[0] = _ij2[0];
                                                                                vinfos[0].indices[1] = _ij2[1];
                                                                                vinfos[0].maxsolutions = _nj2;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j3;
                                                                                vinfos[1].indices[0] = _ij3[0];
                                                                                vinfos[1].indices[1] = _ij3[1];
                                                                                vinfos[1].maxsolutions = _nj3;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j4;
                                                                                vinfos[2].indices[0] = _ij4[0];
                                                                                vinfos[2].indices[1] = _ij4[1];
                                                                                vinfos[2].maxsolutions = _nj4;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j5;
                                                                                vinfos[3].indices[0] = _ij5[0];
                                                                                vinfos[3].indices[1] = _ij5[1];
                                                                                vinfos[3].maxsolutions = _nj5;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j8;
                                                                                vinfos[4].indices[0] = _ij8[0];
                                                                                vinfos[4].indices[1] = _ij8[1];
                                                                                vinfos[4].maxsolutions = _nj8;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j9;
                                                                                vinfos[5].indices[0] = _ij9[0];
                                                                                vinfos[5].indices[1] = _ij9[1];
                                                                                vinfos[5].maxsolutions = _nj9;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j10;
                                                                                vinfos[6].indices[0] = _ij10[0];
                                                                                vinfos[6].indices[1] = _ij10[1];
                                                                                vinfos[6].maxsolutions = _nj10;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement)
                                                                      {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                          evalcond[0] =
                                                                              ((IKabs(new_r00)) + (IKabs(new_r01)));
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                          {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j8eval[1];
                                                                              CheckValue<IkReal> x563 =
                                                                                  IKatan2WithCheck(
                                                                                      IkReal(0), IkReal(new_r11),
                                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x563.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal x562 = ((1.0) * (x563.value));
                                                                              sj9 = 1.0;
                                                                              cj9 = 0;
                                                                              j9 = 1.5707963267949;
                                                                              sj10 = gconst4;
                                                                              cj10 = gconst5;
                                                                              j10 = ((3.14159265) + (((-1.0) * x562)));
                                                                              new_r00 = 0;
                                                                              new_r01 = 0;
                                                                              new_r12 = 0;
                                                                              new_r22 = 0;
                                                                              IkReal gconst3 = ((3.14159265358979) +
                                                                                                (((-1.0) * x562)));
                                                                              IkReal gconst4 = 0;
                                                                              IkReal x564 =
                                                                                  ((1.0) +
                                                                                   (((-1.0) * (new_r10 * new_r10))));
                                                                              if (IKabs(x564) == 0)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal gconst5 = ((-1.0) * new_r11 *
                                                                                                (pow(x564, -0.5)));
                                                                              j8eval[0] =
                                                                                  ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                              if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                              {
                                                                                {
                                                                                  IkReal j8eval[1];
                                                                                  CheckValue<IkReal> x566 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(0), IkReal(new_r11),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x566.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal x565 = ((1.0) * (x566.value));
                                                                                  sj9 = 1.0;
                                                                                  cj9 = 0;
                                                                                  j9 = 1.5707963267949;
                                                                                  sj10 = gconst4;
                                                                                  cj10 = gconst5;
                                                                                  j10 = ((3.14159265) +
                                                                                         (((-1.0) * x565)));
                                                                                  new_r00 = 0;
                                                                                  new_r01 = 0;
                                                                                  new_r12 = 0;
                                                                                  new_r22 = 0;
                                                                                  IkReal gconst3 = ((3.14159265358979) +
                                                                                                    (((-1.0) * x565)));
                                                                                  IkReal gconst4 = 0;
                                                                                  IkReal x567 =
                                                                                      ((1.0) + (((-1.0) *
                                                                                                 (new_r10 * new_r10))));
                                                                                  if (IKabs(x567) == 0)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal gconst5 = ((-1.0) * new_r11 *
                                                                                                    (pow(x567, -0.5)));
                                                                                  j8eval[0] = new_r11;
                                                                                  if (IKabs(j8eval[0]) <
                                                                                      0.0000010000000000)
                                                                                  {
                                                                                    {
                                                                                      IkReal j8eval[1];
                                                                                      CheckValue<IkReal> x569 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal(0),
                                                                                              IkReal(new_r11),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x569.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal x568 =
                                                                                          ((1.0) * (x569.value));
                                                                                      sj9 = 1.0;
                                                                                      cj9 = 0;
                                                                                      j9 = 1.5707963267949;
                                                                                      sj10 = gconst4;
                                                                                      cj10 = gconst5;
                                                                                      j10 = ((3.14159265) +
                                                                                             (((-1.0) * x568)));
                                                                                      new_r00 = 0;
                                                                                      new_r01 = 0;
                                                                                      new_r12 = 0;
                                                                                      new_r22 = 0;
                                                                                      IkReal gconst3 =
                                                                                          ((3.14159265358979) +
                                                                                           (((-1.0) * x568)));
                                                                                      IkReal gconst4 = 0;
                                                                                      IkReal x570 =
                                                                                          ((1.0) +
                                                                                           (((-1.0) *
                                                                                             (new_r10 * new_r10))));
                                                                                      if (IKabs(x570) == 0)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal gconst5 =
                                                                                          ((-1.0) * new_r11 *
                                                                                           (pow(x570, -0.5)));
                                                                                      j8eval[0] = new_r10;
                                                                                      if (IKabs(j8eval[0]) <
                                                                                          0.0000010000000000)
                                                                                      {
                                                                                        continue;  // 3 cases reached
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        {
                                                                                          IkReal j8array[1],
                                                                                              cj8array[1], sj8array[1];
                                                                                          bool j8valid[1] = { false };
                                                                                          _nj8 = 1;
                                                                                          CheckValue<IkReal> x571 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  new_r10, -1);
                                                                                          if (!x571.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          CheckValue<IkReal> x572 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  gconst5, -1);
                                                                                          if (!x572.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          if (IKabs((gconst5 *
                                                                                                     (x571.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(((-1.0) * new_r11 *
                                                                                                     (x572.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(
                                                                                                  IKsqr((gconst5 *
                                                                                                         (x571.value))) +
                                                                                                  IKsqr((
                                                                                                      (-1.0) * new_r11 *
                                                                                                      (x572.value))) -
                                                                                                  1) <=
                                                                                                  IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                          j8array[0] = IKatan2(
                                                                                              (gconst5 * (x571.value)),
                                                                                              ((-1.0) * new_r11 *
                                                                                               (x572.value)));
                                                                                          sj8array[0] =
                                                                                              IKsin(j8array[0]);
                                                                                          cj8array[0] =
                                                                                              IKcos(j8array[0]);
                                                                                          if (j8array[0] > IKPI)
                                                                                          {
                                                                                            j8array[0] -= IK2PI;
                                                                                          }
                                                                                          else if (j8array[0] < -IKPI)
                                                                                          {
                                                                                            j8array[0] += IK2PI;
                                                                                          }
                                                                                          j8valid[0] = true;
                                                                                          for (int ij8 = 0; ij8 < 1;
                                                                                               ++ij8)
                                                                                          {
                                                                                            if (!j8valid[ij8])
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            _ij8[0] = ij8;
                                                                                            _ij8[1] = -1;
                                                                                            for (int iij8 = ij8 + 1;
                                                                                                 iij8 < 1; ++iij8)
                                                                                            {
                                                                                              if (j8valid[iij8] &&
                                                                                                  IKabs(cj8array[ij8] -
                                                                                                        cj8array[iij8]) <
                                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                                  IKabs(sj8array[ij8] -
                                                                                                        sj8array[iij8]) <
                                                                                                      IKFAST_SOLUTION_THRESH)
                                                                                              {
                                                                                                j8valid[iij8] = false;
                                                                                                _ij8[1] = iij8;
                                                                                                break;
                                                                                              }
                                                                                            }
                                                                                            j8 = j8array[ij8];
                                                                                            cj8 = cj8array[ij8];
                                                                                            sj8 = sj8array[ij8];
                                                                                            {
                                                                                              IkReal evalcond[8];
                                                                                              IkReal x573 = IKsin(j8);
                                                                                              IkReal x574 = IKcos(j8);
                                                                                              IkReal x575 =
                                                                                                  ((1.0) * gconst5);
                                                                                              IkReal x576 =
                                                                                                  ((-1.0) * gconst5);
                                                                                              evalcond[0] =
                                                                                                  (new_r11 * x573);
                                                                                              evalcond[1] =
                                                                                                  (new_r10 * x574);
                                                                                              evalcond[2] =
                                                                                                  (x573 * x576);
                                                                                              evalcond[3] =
                                                                                                  (x574 * x576);
                                                                                              evalcond[4] =
                                                                                                  (((gconst5 * x574)) +
                                                                                                   new_r11);
                                                                                              evalcond[5] =
                                                                                                  (((new_r11 * x574)) +
                                                                                                   gconst5);
                                                                                              evalcond[6] =
                                                                                                  ((((-1.0) * x573 *
                                                                                                     x575)) +
                                                                                                   new_r10);
                                                                                              evalcond[7] =
                                                                                                  (((new_r10 * x573)) +
                                                                                                   (((-1.0) * x575)));
                                                                                              if (IKabs(evalcond[0]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[1]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[2]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[3]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[4]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[5]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[6]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[7]) >
                                                                                                      IKFAST_EVALCOND_THRESH)
                                                                                              {
                                                                                                continue;
                                                                                              }
                                                                                            }

                                                                                            {
                                                                                              std::vector<
                                                                                                  IkSingleDOFSolutionBase<
                                                                                                      IkReal> >
                                                                                                  vinfos(7);
                                                                                              vinfos[0].jointtype = 17;
                                                                                              vinfos[0].foffset = j2;
                                                                                              vinfos[0].indices[0] =
                                                                                                  _ij2[0];
                                                                                              vinfos[0].indices[1] =
                                                                                                  _ij2[1];
                                                                                              vinfos[0].maxsolutions =
                                                                                                  _nj2;
                                                                                              vinfos[1].jointtype = 17;
                                                                                              vinfos[1].foffset = j3;
                                                                                              vinfos[1].indices[0] =
                                                                                                  _ij3[0];
                                                                                              vinfos[1].indices[1] =
                                                                                                  _ij3[1];
                                                                                              vinfos[1].maxsolutions =
                                                                                                  _nj3;
                                                                                              vinfos[2].jointtype = 17;
                                                                                              vinfos[2].foffset = j4;
                                                                                              vinfos[2].indices[0] =
                                                                                                  _ij4[0];
                                                                                              vinfos[2].indices[1] =
                                                                                                  _ij4[1];
                                                                                              vinfos[2].maxsolutions =
                                                                                                  _nj4;
                                                                                              vinfos[3].jointtype = 17;
                                                                                              vinfos[3].foffset = j5;
                                                                                              vinfos[3].indices[0] =
                                                                                                  _ij5[0];
                                                                                              vinfos[3].indices[1] =
                                                                                                  _ij5[1];
                                                                                              vinfos[3].maxsolutions =
                                                                                                  _nj5;
                                                                                              vinfos[4].jointtype = 1;
                                                                                              vinfos[4].foffset = j8;
                                                                                              vinfos[4].indices[0] =
                                                                                                  _ij8[0];
                                                                                              vinfos[4].indices[1] =
                                                                                                  _ij8[1];
                                                                                              vinfos[4].maxsolutions =
                                                                                                  _nj8;
                                                                                              vinfos[5].jointtype = 1;
                                                                                              vinfos[5].foffset = j9;
                                                                                              vinfos[5].indices[0] =
                                                                                                  _ij9[0];
                                                                                              vinfos[5].indices[1] =
                                                                                                  _ij9[1];
                                                                                              vinfos[5].maxsolutions =
                                                                                                  _nj9;
                                                                                              vinfos[6].jointtype = 1;
                                                                                              vinfos[6].foffset = j10;
                                                                                              vinfos[6].indices[0] =
                                                                                                  _ij10[0];
                                                                                              vinfos[6].indices[1] =
                                                                                                  _ij10[1];
                                                                                              vinfos[6].maxsolutions =
                                                                                                  _nj10;
                                                                                              std::vector<int> vfree(0);
                                                                                              solutions.AddSolution(
                                                                                                  vinfos, vfree);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    {
                                                                                      IkReal j8array[1], cj8array[1],
                                                                                          sj8array[1];
                                                                                      bool j8valid[1] = { false };
                                                                                      _nj8 = 1;
                                                                                      CheckValue<IkReal> x577 =
                                                                                          IKPowWithIntegerCheck(gconst5,
                                                                                                                -1);
                                                                                      if (!x577.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      CheckValue<IkReal> x578 =
                                                                                          IKPowWithIntegerCheck(new_r11,
                                                                                                                -1);
                                                                                      if (!x578.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      if (IKabs((new_r10 *
                                                                                                 (x577.value))) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(((-1.0) * gconst5 *
                                                                                                 (x578.value))) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(IKsqr((new_r10 *
                                                                                                       (x577.value))) +
                                                                                                IKsqr(((-1.0) * gconst5 *
                                                                                                       (x578.value))) -
                                                                                                1) <=
                                                                                              IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                      j8array[0] = IKatan2(
                                                                                          (new_r10 * (x577.value)),
                                                                                          ((-1.0) * gconst5 *
                                                                                           (x578.value)));
                                                                                      sj8array[0] = IKsin(j8array[0]);
                                                                                      cj8array[0] = IKcos(j8array[0]);
                                                                                      if (j8array[0] > IKPI)
                                                                                      {
                                                                                        j8array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j8array[0] < -IKPI)
                                                                                      {
                                                                                        j8array[0] += IK2PI;
                                                                                      }
                                                                                      j8valid[0] = true;
                                                                                      for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                      {
                                                                                        if (!j8valid[ij8])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij8[0] = ij8;
                                                                                        _ij8[1] = -1;
                                                                                        for (int iij8 = ij8 + 1;
                                                                                             iij8 < 1; ++iij8)
                                                                                        {
                                                                                          if (j8valid[iij8] &&
                                                                                              IKabs(cj8array[ij8] -
                                                                                                    cj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj8array[ij8] -
                                                                                                    sj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j8valid[iij8] = false;
                                                                                            _ij8[1] = iij8;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j8 = j8array[ij8];
                                                                                        cj8 = cj8array[ij8];
                                                                                        sj8 = sj8array[ij8];
                                                                                        {
                                                                                          IkReal evalcond[8];
                                                                                          IkReal x579 = IKsin(j8);
                                                                                          IkReal x580 = IKcos(j8);
                                                                                          IkReal x581 =
                                                                                              ((1.0) * gconst5);
                                                                                          IkReal x582 =
                                                                                              ((-1.0) * gconst5);
                                                                                          evalcond[0] =
                                                                                              (new_r11 * x579);
                                                                                          evalcond[1] =
                                                                                              (new_r10 * x580);
                                                                                          evalcond[2] = (x579 * x582);
                                                                                          evalcond[3] = (x580 * x582);
                                                                                          evalcond[4] =
                                                                                              (((gconst5 * x580)) +
                                                                                               new_r11);
                                                                                          evalcond[5] =
                                                                                              (gconst5 +
                                                                                               ((new_r11 * x580)));
                                                                                          evalcond[6] =
                                                                                              ((((-1.0) * x579 * x581)) +
                                                                                               new_r10);
                                                                                          evalcond[7] =
                                                                                              (((new_r10 * x579)) +
                                                                                               (((-1.0) * x581)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[6]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[7]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j2;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[0].maxsolutions = _nj2;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j3;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[1].maxsolutions = _nj3;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j4;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[2].maxsolutions = _nj4;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j5;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[3].maxsolutions = _nj5;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j8;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij8[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij8[1];
                                                                                          vinfos[4].maxsolutions = _nj8;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j9;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij9[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij9[1];
                                                                                          vinfos[5].maxsolutions = _nj9;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j10;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij10[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij10[1];
                                                                                          vinfos[6].maxsolutions =
                                                                                              _nj10;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                {
                                                                                  IkReal j8array[1], cj8array[1],
                                                                                      sj8array[1];
                                                                                  bool j8valid[1] = { false };
                                                                                  _nj8 = 1;
                                                                                  CheckValue<IkReal> x583 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(new_r10),
                                                                                          IkReal(((-1.0) * new_r11)),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x583.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  CheckValue<IkReal> x584 =
                                                                                      IKPowWithIntegerCheck(
                                                                                          IKsign(gconst5), -1);
                                                                                  if (!x584.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  j8array[0] = ((-1.5707963267949) +
                                                                                                (x583.value) +
                                                                                                (((1.5707963267949) *
                                                                                                  (x584.value))));
                                                                                  sj8array[0] = IKsin(j8array[0]);
                                                                                  cj8array[0] = IKcos(j8array[0]);
                                                                                  if (j8array[0] > IKPI)
                                                                                  {
                                                                                    j8array[0] -= IK2PI;
                                                                                  }
                                                                                  else if (j8array[0] < -IKPI)
                                                                                  {
                                                                                    j8array[0] += IK2PI;
                                                                                  }
                                                                                  j8valid[0] = true;
                                                                                  for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                  {
                                                                                    if (!j8valid[ij8])
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    _ij8[0] = ij8;
                                                                                    _ij8[1] = -1;
                                                                                    for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                         ++iij8)
                                                                                    {
                                                                                      if (j8valid[iij8] &&
                                                                                          IKabs(cj8array[ij8] -
                                                                                                cj8array[iij8]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj8array[ij8] -
                                                                                                sj8array[iij8]) <
                                                                                              IKFAST_SOLUTION_THRESH)
                                                                                      {
                                                                                        j8valid[iij8] = false;
                                                                                        _ij8[1] = iij8;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j8 = j8array[ij8];
                                                                                    cj8 = cj8array[ij8];
                                                                                    sj8 = sj8array[ij8];
                                                                                    {
                                                                                      IkReal evalcond[8];
                                                                                      IkReal x585 = IKsin(j8);
                                                                                      IkReal x586 = IKcos(j8);
                                                                                      IkReal x587 = ((1.0) * gconst5);
                                                                                      IkReal x588 = ((-1.0) * gconst5);
                                                                                      evalcond[0] = (new_r11 * x585);
                                                                                      evalcond[1] = (new_r10 * x586);
                                                                                      evalcond[2] = (x585 * x588);
                                                                                      evalcond[3] = (x586 * x588);
                                                                                      evalcond[4] =
                                                                                          (((gconst5 * x586)) + new_r11);
                                                                                      evalcond[5] =
                                                                                          (gconst5 + ((new_r11 * x586)));
                                                                                      evalcond[6] =
                                                                                          ((((-1.0) * x585 * x587)) +
                                                                                           new_r10);
                                                                                      evalcond[7] =
                                                                                          ((((-1.0) * x587)) +
                                                                                           ((new_r10 * x585)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[4]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[5]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[6]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[7]) >
                                                                                              IKFAST_EVALCOND_THRESH)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 17;
                                                                                      vinfos[0].foffset = j2;
                                                                                      vinfos[0].indices[0] = _ij2[0];
                                                                                      vinfos[0].indices[1] = _ij2[1];
                                                                                      vinfos[0].maxsolutions = _nj2;
                                                                                      vinfos[1].jointtype = 17;
                                                                                      vinfos[1].foffset = j3;
                                                                                      vinfos[1].indices[0] = _ij3[0];
                                                                                      vinfos[1].indices[1] = _ij3[1];
                                                                                      vinfos[1].maxsolutions = _nj3;
                                                                                      vinfos[2].jointtype = 17;
                                                                                      vinfos[2].foffset = j4;
                                                                                      vinfos[2].indices[0] = _ij4[0];
                                                                                      vinfos[2].indices[1] = _ij4[1];
                                                                                      vinfos[2].maxsolutions = _nj4;
                                                                                      vinfos[3].jointtype = 17;
                                                                                      vinfos[3].foffset = j5;
                                                                                      vinfos[3].indices[0] = _ij5[0];
                                                                                      vinfos[3].indices[1] = _ij5[1];
                                                                                      vinfos[3].maxsolutions = _nj5;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j8;
                                                                                      vinfos[4].indices[0] = _ij8[0];
                                                                                      vinfos[4].indices[1] = _ij8[1];
                                                                                      vinfos[4].maxsolutions = _nj8;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j9;
                                                                                      vinfos[5].indices[0] = _ij9[0];
                                                                                      vinfos[5].indices[1] = _ij9[1];
                                                                                      vinfos[5].maxsolutions = _nj9;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j10;
                                                                                      vinfos[6].indices[0] = _ij10[0];
                                                                                      vinfos[6].indices[1] = _ij10[1];
                                                                                      vinfos[6].maxsolutions = _nj10;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                          bool bgotonextstatement = true;
                                                                          do
                                                                          {
                                                                            evalcond[0] = IKabs(new_r01);
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                              bgotonextstatement = false;
                                                                              {
                                                                                IkReal j8eval[1];
                                                                                CheckValue<IkReal> x590 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(0), IkReal(new_r11),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x590.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x589 = ((1.0) * (x590.value));
                                                                                sj9 = 1.0;
                                                                                cj9 = 0;
                                                                                j9 = 1.5707963267949;
                                                                                sj10 = gconst4;
                                                                                cj10 = gconst5;
                                                                                j10 =
                                                                                    ((3.14159265) + (((-1.0) * x589)));
                                                                                new_r01 = 0;
                                                                                IkReal gconst3 = ((3.14159265358979) +
                                                                                                  (((-1.0) * x589)));
                                                                                IkReal gconst4 = 0;
                                                                                IkReal x591 = new_r11 * new_r11;
                                                                                if (IKabs(x591) == 0)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal gconst5 = ((-1.0) * new_r11 *
                                                                                                  (pow(x591, -0.5)));
                                                                                j8eval[0] = ((IKabs(new_r10)) +
                                                                                             (IKabs(new_r00)));
                                                                                if (IKabs(j8eval[0]) <
                                                                                    0.0000010000000000)
                                                                                {
                                                                                  {
                                                                                    IkReal j8eval[1];
                                                                                    CheckValue<IkReal> x593 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(0), IkReal(new_r11),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x593.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal x592 =
                                                                                        ((1.0) * (x593.value));
                                                                                    sj9 = 1.0;
                                                                                    cj9 = 0;
                                                                                    j9 = 1.5707963267949;
                                                                                    sj10 = gconst4;
                                                                                    cj10 = gconst5;
                                                                                    j10 = ((3.14159265) +
                                                                                           (((-1.0) * x592)));
                                                                                    new_r01 = 0;
                                                                                    IkReal gconst3 =
                                                                                        ((3.14159265358979) +
                                                                                         (((-1.0) * x592)));
                                                                                    IkReal gconst4 = 0;
                                                                                    IkReal x594 = new_r11 * new_r11;
                                                                                    if (IKabs(x594) == 0)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal gconst5 =
                                                                                        ((-1.0) * new_r11 *
                                                                                         (pow(x594, -0.5)));
                                                                                    j8eval[0] = ((IKabs(new_r11)) +
                                                                                                 (IKabs(new_r10)));
                                                                                    if (IKabs(j8eval[0]) <
                                                                                        0.0000010000000000)
                                                                                    {
                                                                                      {
                                                                                        IkReal j8eval[1];
                                                                                        CheckValue<IkReal> x596 =
                                                                                            IKatan2WithCheck(
                                                                                                IkReal(0),
                                                                                                IkReal(new_r11),
                                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x596.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        IkReal x595 =
                                                                                            ((1.0) * (x596.value));
                                                                                        sj9 = 1.0;
                                                                                        cj9 = 0;
                                                                                        j9 = 1.5707963267949;
                                                                                        sj10 = gconst4;
                                                                                        cj10 = gconst5;
                                                                                        j10 = ((3.14159265) +
                                                                                               (((-1.0) * x595)));
                                                                                        new_r01 = 0;
                                                                                        IkReal gconst3 =
                                                                                            ((3.14159265358979) +
                                                                                             (((-1.0) * x595)));
                                                                                        IkReal gconst4 = 0;
                                                                                        IkReal x597 = new_r11 * new_r11;
                                                                                        if (IKabs(x597) == 0)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        IkReal gconst5 =
                                                                                            ((-1.0) * new_r11 *
                                                                                             (pow(x597, -0.5)));
                                                                                        j8eval[0] = new_r11;
                                                                                        if (IKabs(j8eval[0]) <
                                                                                            0.0000010000000000)
                                                                                        {
                                                                                          continue;  // 3 cases reached
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          {
                                                                                            IkReal j8array[1],
                                                                                                cj8array[1],
                                                                                                sj8array[1];
                                                                                            bool j8valid[1] = { false };
                                                                                            _nj8 = 1;
                                                                                            CheckValue<IkReal> x598 =
                                                                                                IKPowWithIntegerCheck(
                                                                                                    gconst5, -1);
                                                                                            if (!x598.valid)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x599 =
                                                                                                IKPowWithIntegerCheck(
                                                                                                    new_r11, -1);
                                                                                            if (!x599.valid)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            if (IKabs((new_r10 *
                                                                                                       (x598.value))) <
                                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                                IKabs(((-1.0) * gconst5 *
                                                                                                       (x599.value))) <
                                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                                IKabs(
                                                                                                    IKsqr((
                                                                                                        new_r10 *
                                                                                                        (x598.value))) +
                                                                                                    IKsqr((
                                                                                                        (-1.0) * gconst5 *
                                                                                                        (x599.value))) -
                                                                                                    1) <=
                                                                                                    IKFAST_SINCOS_THRESH)
                                                                                              continue;
                                                                                            j8array[0] = IKatan2(
                                                                                                (new_r10 * (x598.value)),
                                                                                                ((-1.0) * gconst5 *
                                                                                                 (x599.value)));
                                                                                            sj8array[0] =
                                                                                                IKsin(j8array[0]);
                                                                                            cj8array[0] =
                                                                                                IKcos(j8array[0]);
                                                                                            if (j8array[0] > IKPI)
                                                                                            {
                                                                                              j8array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j8array[0] < -IKPI)
                                                                                            {
                                                                                              j8array[0] += IK2PI;
                                                                                            }
                                                                                            j8valid[0] = true;
                                                                                            for (int ij8 = 0; ij8 < 1;
                                                                                                 ++ij8)
                                                                                            {
                                                                                              if (!j8valid[ij8])
                                                                                              {
                                                                                                continue;
                                                                                              }
                                                                                              _ij8[0] = ij8;
                                                                                              _ij8[1] = -1;
                                                                                              for (int iij8 = ij8 + 1;
                                                                                                   iij8 < 1; ++iij8)
                                                                                              {
                                                                                                if (j8valid[iij8] &&
                                                                                                    IKabs(
                                                                                                        cj8array[ij8] -
                                                                                                        cj8array[iij8]) <
                                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                                    IKabs(
                                                                                                        sj8array[ij8] -
                                                                                                        sj8array[iij8]) <
                                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                  j8valid[iij8] = false;
                                                                                                  _ij8[1] = iij8;
                                                                                                  break;
                                                                                                }
                                                                                              }
                                                                                              j8 = j8array[ij8];
                                                                                              cj8 = cj8array[ij8];
                                                                                              sj8 = sj8array[ij8];
                                                                                              {
                                                                                                IkReal evalcond[8];
                                                                                                IkReal x600 = IKsin(j8);
                                                                                                IkReal x601 = IKcos(j8);
                                                                                                IkReal x602 =
                                                                                                    ((1.0) * gconst5);
                                                                                                evalcond[0] =
                                                                                                    (new_r11 * x600);
                                                                                                evalcond[1] =
                                                                                                    ((-1.0) * gconst5 *
                                                                                                     x600);
                                                                                                evalcond[2] =
                                                                                                    (((gconst5 * x601)) +
                                                                                                     new_r11);
                                                                                                evalcond[3] =
                                                                                                    (gconst5 +
                                                                                                     ((new_r11 * x601)));
                                                                                                evalcond[4] =
                                                                                                    ((((-1.0) * x600 *
                                                                                                       x602)) +
                                                                                                     new_r10);
                                                                                                evalcond[5] =
                                                                                                    (new_r00 +
                                                                                                     (((-1.0) * x601 *
                                                                                                       x602)));
                                                                                                evalcond[6] =
                                                                                                    ((((-1.0) *
                                                                                                       new_r00 * x600)) +
                                                                                                     ((new_r10 * x601)));
                                                                                                evalcond[7] =
                                                                                                    (((new_r10 * x600)) +
                                                                                                     ((new_r00 * x601)) +
                                                                                                     (((-1.0) * x602)));
                                                                                                if (IKabs(evalcond[0]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[1]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[2]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[3]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[4]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[5]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[6]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[7]) >
                                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                  continue;
                                                                                                }
                                                                                              }

                                                                                              {
                                                                                                std::vector<
                                                                                                    IkSingleDOFSolutionBase<
                                                                                                        IkReal> >
                                                                                                    vinfos(7);
                                                                                                vinfos[0].jointtype =
                                                                                                    17;
                                                                                                vinfos[0].foffset = j2;
                                                                                                vinfos[0].indices[0] =
                                                                                                    _ij2[0];
                                                                                                vinfos[0].indices[1] =
                                                                                                    _ij2[1];
                                                                                                vinfos[0].maxsolutions =
                                                                                                    _nj2;
                                                                                                vinfos[1].jointtype =
                                                                                                    17;
                                                                                                vinfos[1].foffset = j3;
                                                                                                vinfos[1].indices[0] =
                                                                                                    _ij3[0];
                                                                                                vinfos[1].indices[1] =
                                                                                                    _ij3[1];
                                                                                                vinfos[1].maxsolutions =
                                                                                                    _nj3;
                                                                                                vinfos[2].jointtype =
                                                                                                    17;
                                                                                                vinfos[2].foffset = j4;
                                                                                                vinfos[2].indices[0] =
                                                                                                    _ij4[0];
                                                                                                vinfos[2].indices[1] =
                                                                                                    _ij4[1];
                                                                                                vinfos[2].maxsolutions =
                                                                                                    _nj4;
                                                                                                vinfos[3].jointtype =
                                                                                                    17;
                                                                                                vinfos[3].foffset = j5;
                                                                                                vinfos[3].indices[0] =
                                                                                                    _ij5[0];
                                                                                                vinfos[3].indices[1] =
                                                                                                    _ij5[1];
                                                                                                vinfos[3].maxsolutions =
                                                                                                    _nj5;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j8;
                                                                                                vinfos[4].indices[0] =
                                                                                                    _ij8[0];
                                                                                                vinfos[4].indices[1] =
                                                                                                    _ij8[1];
                                                                                                vinfos[4].maxsolutions =
                                                                                                    _nj8;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j9;
                                                                                                vinfos[5].indices[0] =
                                                                                                    _ij9[0];
                                                                                                vinfos[5].indices[1] =
                                                                                                    _ij9[1];
                                                                                                vinfos[5].maxsolutions =
                                                                                                    _nj9;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j10;
                                                                                                vinfos[6].indices[0] =
                                                                                                    _ij10[0];
                                                                                                vinfos[6].indices[1] =
                                                                                                    _ij10[1];
                                                                                                vinfos[6].maxsolutions =
                                                                                                    _nj10;
                                                                                                std::vector<int> vfree(
                                                                                                    0);
                                                                                                solutions.AddSolution(
                                                                                                    vinfos, vfree);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      {
                                                                                        IkReal j8array[1], cj8array[1],
                                                                                            sj8array[1];
                                                                                        bool j8valid[1] = { false };
                                                                                        _nj8 = 1;
                                                                                        CheckValue<IkReal> x603 =
                                                                                            IKatan2WithCheck(
                                                                                                IkReal(new_r10),
                                                                                                IkReal(
                                                                                                    ((-1.0) * new_r11)),
                                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x603.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x604 =
                                                                                            IKPowWithIntegerCheck(
                                                                                                IKsign(gconst5), -1);
                                                                                        if (!x604.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        j8array[0] =
                                                                                            ((-1.5707963267949) +
                                                                                             (x603.value) +
                                                                                             (((1.5707963267949) *
                                                                                               (x604.value))));
                                                                                        sj8array[0] = IKsin(j8array[0]);
                                                                                        cj8array[0] = IKcos(j8array[0]);
                                                                                        if (j8array[0] > IKPI)
                                                                                        {
                                                                                          j8array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j8array[0] < -IKPI)
                                                                                        {
                                                                                          j8array[0] += IK2PI;
                                                                                        }
                                                                                        j8valid[0] = true;
                                                                                        for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                        {
                                                                                          if (!j8valid[ij8])
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          _ij8[0] = ij8;
                                                                                          _ij8[1] = -1;
                                                                                          for (int iij8 = ij8 + 1;
                                                                                               iij8 < 1; ++iij8)
                                                                                          {
                                                                                            if (j8valid[iij8] &&
                                                                                                IKabs(cj8array[ij8] -
                                                                                                      cj8array[iij8]) <
                                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                                IKabs(sj8array[ij8] -
                                                                                                      sj8array[iij8]) <
                                                                                                    IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                              j8valid[iij8] = false;
                                                                                              _ij8[1] = iij8;
                                                                                              break;
                                                                                            }
                                                                                          }
                                                                                          j8 = j8array[ij8];
                                                                                          cj8 = cj8array[ij8];
                                                                                          sj8 = sj8array[ij8];
                                                                                          {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x605 = IKsin(j8);
                                                                                            IkReal x606 = IKcos(j8);
                                                                                            IkReal x607 =
                                                                                                ((1.0) * gconst5);
                                                                                            evalcond[0] =
                                                                                                (new_r11 * x605);
                                                                                            evalcond[1] =
                                                                                                ((-1.0) * gconst5 *
                                                                                                 x605);
                                                                                            evalcond[2] =
                                                                                                (((gconst5 * x606)) +
                                                                                                 new_r11);
                                                                                            evalcond[3] =
                                                                                                (gconst5 +
                                                                                                 ((new_r11 * x606)));
                                                                                            evalcond[4] =
                                                                                                ((((-1.0) * x605 *
                                                                                                   x607)) +
                                                                                                 new_r10);
                                                                                            evalcond[5] =
                                                                                                (new_r00 +
                                                                                                 (((-1.0) * x606 *
                                                                                                   x607)));
                                                                                            evalcond[6] =
                                                                                                ((((-1.0) * new_r00 *
                                                                                                   x605)) +
                                                                                                 ((new_r10 * x606)));
                                                                                            evalcond[7] =
                                                                                                (((new_r10 * x605)) +
                                                                                                 ((new_r00 * x606)) +
                                                                                                 (((-1.0) * x607)));
                                                                                            if (IKabs(evalcond[0]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[1]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[2]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[3]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[4]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[5]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[6]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[7]) >
                                                                                                    IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                          }

                                                                                          {
                                                                                            std::vector<
                                                                                                IkSingleDOFSolutionBase<
                                                                                                    IkReal> >
                                                                                                vinfos(7);
                                                                                            vinfos[0].jointtype = 17;
                                                                                            vinfos[0].foffset = j2;
                                                                                            vinfos[0].indices[0] =
                                                                                                _ij2[0];
                                                                                            vinfos[0].indices[1] =
                                                                                                _ij2[1];
                                                                                            vinfos[0].maxsolutions =
                                                                                                _nj2;
                                                                                            vinfos[1].jointtype = 17;
                                                                                            vinfos[1].foffset = j3;
                                                                                            vinfos[1].indices[0] =
                                                                                                _ij3[0];
                                                                                            vinfos[1].indices[1] =
                                                                                                _ij3[1];
                                                                                            vinfos[1].maxsolutions =
                                                                                                _nj3;
                                                                                            vinfos[2].jointtype = 17;
                                                                                            vinfos[2].foffset = j4;
                                                                                            vinfos[2].indices[0] =
                                                                                                _ij4[0];
                                                                                            vinfos[2].indices[1] =
                                                                                                _ij4[1];
                                                                                            vinfos[2].maxsolutions =
                                                                                                _nj4;
                                                                                            vinfos[3].jointtype = 17;
                                                                                            vinfos[3].foffset = j5;
                                                                                            vinfos[3].indices[0] =
                                                                                                _ij5[0];
                                                                                            vinfos[3].indices[1] =
                                                                                                _ij5[1];
                                                                                            vinfos[3].maxsolutions =
                                                                                                _nj5;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j8;
                                                                                            vinfos[4].indices[0] =
                                                                                                _ij8[0];
                                                                                            vinfos[4].indices[1] =
                                                                                                _ij8[1];
                                                                                            vinfos[4].maxsolutions =
                                                                                                _nj8;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j9;
                                                                                            vinfos[5].indices[0] =
                                                                                                _ij9[0];
                                                                                            vinfos[5].indices[1] =
                                                                                                _ij9[1];
                                                                                            vinfos[5].maxsolutions =
                                                                                                _nj9;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j10;
                                                                                            vinfos[6].indices[0] =
                                                                                                _ij10[0];
                                                                                            vinfos[6].indices[1] =
                                                                                                _ij10[1];
                                                                                            vinfos[6].maxsolutions =
                                                                                                _nj10;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(
                                                                                                vinfos, vfree);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  {
                                                                                    IkReal j8array[1], cj8array[1],
                                                                                        sj8array[1];
                                                                                    bool j8valid[1] = { false };
                                                                                    _nj8 = 1;
                                                                                    CheckValue<IkReal> x608 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(new_r10),
                                                                                            IkReal(new_r00),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x608.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x609 =
                                                                                        IKPowWithIntegerCheck(
                                                                                            IKsign(gconst5), -1);
                                                                                    if (!x609.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    j8array[0] = ((-1.5707963267949) +
                                                                                                  (x608.value) +
                                                                                                  (((1.5707963267949) *
                                                                                                    (x609.value))));
                                                                                    sj8array[0] = IKsin(j8array[0]);
                                                                                    cj8array[0] = IKcos(j8array[0]);
                                                                                    if (j8array[0] > IKPI)
                                                                                    {
                                                                                      j8array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j8array[0] < -IKPI)
                                                                                    {
                                                                                      j8array[0] += IK2PI;
                                                                                    }
                                                                                    j8valid[0] = true;
                                                                                    for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                    {
                                                                                      if (!j8valid[ij8])
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      _ij8[0] = ij8;
                                                                                      _ij8[1] = -1;
                                                                                      for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                           ++iij8)
                                                                                      {
                                                                                        if (j8valid[iij8] &&
                                                                                            IKabs(cj8array[ij8] -
                                                                                                  cj8array[iij8]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj8array[ij8] -
                                                                                                  sj8array[iij8]) <
                                                                                                IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                          j8valid[iij8] = false;
                                                                                          _ij8[1] = iij8;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j8 = j8array[ij8];
                                                                                      cj8 = cj8array[ij8];
                                                                                      sj8 = sj8array[ij8];
                                                                                      {
                                                                                        IkReal evalcond[8];
                                                                                        IkReal x610 = IKsin(j8);
                                                                                        IkReal x611 = IKcos(j8);
                                                                                        IkReal x612 = ((1.0) * gconst5);
                                                                                        evalcond[0] = (new_r11 * x610);
                                                                                        evalcond[1] =
                                                                                            ((-1.0) * gconst5 * x610);
                                                                                        evalcond[2] =
                                                                                            (((gconst5 * x611)) +
                                                                                             new_r11);
                                                                                        evalcond[3] =
                                                                                            (gconst5 +
                                                                                             ((new_r11 * x611)));
                                                                                        evalcond[4] =
                                                                                            ((((-1.0) * x610 * x612)) +
                                                                                             new_r10);
                                                                                        evalcond[5] =
                                                                                            ((((-1.0) * x611 * x612)) +
                                                                                             new_r00);
                                                                                        evalcond[6] =
                                                                                            (((new_r10 * x611)) +
                                                                                             (((-1.0) * new_r00 *
                                                                                               x610)));
                                                                                        evalcond[7] =
                                                                                            (((new_r10 * x610)) +
                                                                                             (((-1.0) * x612)) +
                                                                                             ((new_r00 * x611)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[4]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[5]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[6]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[7]) >
                                                                                                IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 17;
                                                                                        vinfos[0].foffset = j2;
                                                                                        vinfos[0].indices[0] = _ij2[0];
                                                                                        vinfos[0].indices[1] = _ij2[1];
                                                                                        vinfos[0].maxsolutions = _nj2;
                                                                                        vinfos[1].jointtype = 17;
                                                                                        vinfos[1].foffset = j3;
                                                                                        vinfos[1].indices[0] = _ij3[0];
                                                                                        vinfos[1].indices[1] = _ij3[1];
                                                                                        vinfos[1].maxsolutions = _nj3;
                                                                                        vinfos[2].jointtype = 17;
                                                                                        vinfos[2].foffset = j4;
                                                                                        vinfos[2].indices[0] = _ij4[0];
                                                                                        vinfos[2].indices[1] = _ij4[1];
                                                                                        vinfos[2].maxsolutions = _nj4;
                                                                                        vinfos[3].jointtype = 17;
                                                                                        vinfos[3].foffset = j5;
                                                                                        vinfos[3].indices[0] = _ij5[0];
                                                                                        vinfos[3].indices[1] = _ij5[1];
                                                                                        vinfos[3].maxsolutions = _nj5;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j8;
                                                                                        vinfos[4].indices[0] = _ij8[0];
                                                                                        vinfos[4].indices[1] = _ij8[1];
                                                                                        vinfos[4].maxsolutions = _nj8;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j9;
                                                                                        vinfos[5].indices[0] = _ij9[0];
                                                                                        vinfos[5].indices[1] = _ij9[1];
                                                                                        vinfos[5].maxsolutions = _nj9;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j10;
                                                                                        vinfos[6].indices[0] = _ij10[0];
                                                                                        vinfos[6].indices[1] = _ij10[1];
                                                                                        vinfos[6].maxsolutions = _nj10;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement)
                                                                          {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                              if (1)
                                                                              {
                                                                                bgotonextstatement = false;
                                                                                continue;  // branch miss [j8]
                                                                              }
                                                                            } while (0);
                                                                            if (bgotonextstatement) {}
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              else
                                                              {
                                                                {
                                                                  IkReal j8array[1], cj8array[1], sj8array[1];
                                                                  bool j8valid[1] = { false };
                                                                  _nj8 = 1;
                                                                  IkReal x613 = ((1.0) * new_r11);
                                                                  CheckValue<IkReal> x614 = IKPowWithIntegerCheck(
                                                                      IKsign((((gconst4 * new_r01)) +
                                                                              (((-1.0) * gconst5 * x613)))),
                                                                      -1);
                                                                  if (!x614.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  CheckValue<IkReal> x615 = IKatan2WithCheck(
                                                                      IkReal((((gconst4 * gconst5)) +
                                                                              (((-1.0) * new_r01 * x613)))),
                                                                      IkReal(((new_r11 * new_r11) +
                                                                              (((-1.0) * (gconst4 * gconst4))))),
                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                  if (!x615.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  j8array[0] = ((-1.5707963267949) +
                                                                                (((1.5707963267949) * (x614.value))) +
                                                                                (x615.value));
                                                                  sj8array[0] = IKsin(j8array[0]);
                                                                  cj8array[0] = IKcos(j8array[0]);
                                                                  if (j8array[0] > IKPI)
                                                                  {
                                                                    j8array[0] -= IK2PI;
                                                                  }
                                                                  else if (j8array[0] < -IKPI)
                                                                  {
                                                                    j8array[0] += IK2PI;
                                                                  }
                                                                  j8valid[0] = true;
                                                                  for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                  {
                                                                    if (!j8valid[ij8])
                                                                    {
                                                                      continue;
                                                                    }
                                                                    _ij8[0] = ij8;
                                                                    _ij8[1] = -1;
                                                                    for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                    {
                                                                      if (j8valid[iij8] &&
                                                                          IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                              IKFAST_SOLUTION_THRESH)
                                                                      {
                                                                        j8valid[iij8] = false;
                                                                        _ij8[1] = iij8;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j8 = j8array[ij8];
                                                                    cj8 = cj8array[ij8];
                                                                    sj8 = sj8array[ij8];
                                                                    {
                                                                      IkReal evalcond[8];
                                                                      IkReal x616 = IKcos(j8);
                                                                      IkReal x617 = IKsin(j8);
                                                                      IkReal x618 = ((1.0) * gconst5);
                                                                      IkReal x619 = (gconst4 * x616);
                                                                      IkReal x620 = (gconst4 * x617);
                                                                      IkReal x621 = ((1.0) * x617);
                                                                      IkReal x622 = (x617 * x618);
                                                                      evalcond[0] = (gconst4 + ((new_r11 * x617)) +
                                                                                     ((new_r01 * x616)));
                                                                      evalcond[1] =
                                                                          (((gconst5 * x616)) + x620 + new_r11);
                                                                      evalcond[2] = ((((-1.0) * new_r00 * x621)) +
                                                                                     gconst4 + ((new_r10 * x616)));
                                                                      evalcond[3] = ((((-1.0) * new_r01 * x621)) +
                                                                                     gconst5 + ((new_r11 * x616)));
                                                                      evalcond[4] =
                                                                          ((((-1.0) * x622)) + x619 + new_r01);
                                                                      evalcond[5] =
                                                                          ((((-1.0) * x622)) + x619 + new_r10);
                                                                      evalcond[6] =
                                                                          (((new_r10 * x617)) + (((-1.0) * x618)) +
                                                                           ((new_r00 * x616)));
                                                                      evalcond[7] = ((((-1.0) * x620)) + new_r00 +
                                                                                     (((-1.0) * x616 * x618)));
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                      {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 17;
                                                                      vinfos[0].foffset = j2;
                                                                      vinfos[0].indices[0] = _ij2[0];
                                                                      vinfos[0].indices[1] = _ij2[1];
                                                                      vinfos[0].maxsolutions = _nj2;
                                                                      vinfos[1].jointtype = 17;
                                                                      vinfos[1].foffset = j3;
                                                                      vinfos[1].indices[0] = _ij3[0];
                                                                      vinfos[1].indices[1] = _ij3[1];
                                                                      vinfos[1].maxsolutions = _nj3;
                                                                      vinfos[2].jointtype = 17;
                                                                      vinfos[2].foffset = j4;
                                                                      vinfos[2].indices[0] = _ij4[0];
                                                                      vinfos[2].indices[1] = _ij4[1];
                                                                      vinfos[2].maxsolutions = _nj4;
                                                                      vinfos[3].jointtype = 17;
                                                                      vinfos[3].foffset = j5;
                                                                      vinfos[3].indices[0] = _ij5[0];
                                                                      vinfos[3].indices[1] = _ij5[1];
                                                                      vinfos[3].maxsolutions = _nj5;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j8;
                                                                      vinfos[4].indices[0] = _ij8[0];
                                                                      vinfos[4].indices[1] = _ij8[1];
                                                                      vinfos[4].maxsolutions = _nj8;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j9;
                                                                      vinfos[5].indices[0] = _ij9[0];
                                                                      vinfos[5].indices[1] = _ij9[1];
                                                                      vinfos[5].maxsolutions = _nj9;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j10;
                                                                      vinfos[6].indices[0] = _ij10[0];
                                                                      vinfos[6].indices[1] = _ij10[1];
                                                                      vinfos[6].maxsolutions = _nj10;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          else
                                                          {
                                                            {
                                                              IkReal j8array[1], cj8array[1], sj8array[1];
                                                              bool j8valid[1] = { false };
                                                              _nj8 = 1;
                                                              IkReal x623 = ((1.0) * new_r11);
                                                              CheckValue<IkReal> x624 = IKatan2WithCheck(
                                                                  IkReal((((gconst5 * new_r01)) +
                                                                          (((-1.0) * gconst4 * x623)))),
                                                                  IkReal(((((-1.0) * gconst5 * x623)) +
                                                                          (((-1.0) * gconst4 * new_r01)))),
                                                                  IKFAST_ATAN2_MAGTHRESH);
                                                              if (!x624.valid)
                                                              {
                                                                continue;
                                                              }
                                                              CheckValue<IkReal> x625 = IKPowWithIntegerCheck(
                                                                  IKsign(((new_r01 * new_r01) + (new_r11 * new_r11))),
                                                                  -1);
                                                              if (!x625.valid)
                                                              {
                                                                continue;
                                                              }
                                                              j8array[0] = ((-1.5707963267949) + (x624.value) +
                                                                            (((1.5707963267949) * (x625.value))));
                                                              sj8array[0] = IKsin(j8array[0]);
                                                              cj8array[0] = IKcos(j8array[0]);
                                                              if (j8array[0] > IKPI)
                                                              {
                                                                j8array[0] -= IK2PI;
                                                              }
                                                              else if (j8array[0] < -IKPI)
                                                              {
                                                                j8array[0] += IK2PI;
                                                              }
                                                              j8valid[0] = true;
                                                              for (int ij8 = 0; ij8 < 1; ++ij8)
                                                              {
                                                                if (!j8valid[ij8])
                                                                {
                                                                  continue;
                                                                }
                                                                _ij8[0] = ij8;
                                                                _ij8[1] = -1;
                                                                for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                {
                                                                  if (j8valid[iij8] &&
                                                                      IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                          IKFAST_SOLUTION_THRESH)
                                                                  {
                                                                    j8valid[iij8] = false;
                                                                    _ij8[1] = iij8;
                                                                    break;
                                                                  }
                                                                }
                                                                j8 = j8array[ij8];
                                                                cj8 = cj8array[ij8];
                                                                sj8 = sj8array[ij8];
                                                                {
                                                                  IkReal evalcond[8];
                                                                  IkReal x626 = IKcos(j8);
                                                                  IkReal x627 = IKsin(j8);
                                                                  IkReal x628 = ((1.0) * gconst5);
                                                                  IkReal x629 = (gconst4 * x626);
                                                                  IkReal x630 = (gconst4 * x627);
                                                                  IkReal x631 = ((1.0) * x627);
                                                                  IkReal x632 = (x627 * x628);
                                                                  evalcond[0] = (gconst4 + ((new_r01 * x626)) +
                                                                                 ((new_r11 * x627)));
                                                                  evalcond[1] = (((gconst5 * x626)) + x630 + new_r11);
                                                                  evalcond[2] = ((((-1.0) * new_r00 * x631)) + gconst4 +
                                                                                 ((new_r10 * x626)));
                                                                  evalcond[3] = ((((-1.0) * new_r01 * x631)) + gconst5 +
                                                                                 ((new_r11 * x626)));
                                                                  evalcond[4] = ((((-1.0) * x632)) + x629 + new_r01);
                                                                  evalcond[5] = ((((-1.0) * x632)) + x629 + new_r10);
                                                                  evalcond[6] =
                                                                      ((((-1.0) * x628)) + ((new_r00 * x626)) +
                                                                       ((new_r10 * x627)));
                                                                  evalcond[7] = ((((-1.0) * x626 * x628)) +
                                                                                 (((-1.0) * x630)) + new_r00);
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                  {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 17;
                                                                  vinfos[0].foffset = j2;
                                                                  vinfos[0].indices[0] = _ij2[0];
                                                                  vinfos[0].indices[1] = _ij2[1];
                                                                  vinfos[0].maxsolutions = _nj2;
                                                                  vinfos[1].jointtype = 17;
                                                                  vinfos[1].foffset = j3;
                                                                  vinfos[1].indices[0] = _ij3[0];
                                                                  vinfos[1].indices[1] = _ij3[1];
                                                                  vinfos[1].maxsolutions = _nj3;
                                                                  vinfos[2].jointtype = 17;
                                                                  vinfos[2].foffset = j4;
                                                                  vinfos[2].indices[0] = _ij4[0];
                                                                  vinfos[2].indices[1] = _ij4[1];
                                                                  vinfos[2].maxsolutions = _nj4;
                                                                  vinfos[3].jointtype = 17;
                                                                  vinfos[3].foffset = j5;
                                                                  vinfos[3].indices[0] = _ij5[0];
                                                                  vinfos[3].indices[1] = _ij5[1];
                                                                  vinfos[3].maxsolutions = _nj5;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j8;
                                                                  vinfos[4].indices[0] = _ij8[0];
                                                                  vinfos[4].indices[1] = _ij8[1];
                                                                  vinfos[4].maxsolutions = _nj8;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j9;
                                                                  vinfos[5].indices[0] = _ij9[0];
                                                                  vinfos[5].indices[1] = _ij9[1];
                                                                  vinfos[5].maxsolutions = _nj9;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j10;
                                                                  vinfos[6].indices[0] = _ij10[0];
                                                                  vinfos[6].indices[1] = _ij10[1];
                                                                  vinfos[6].maxsolutions = _nj10;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        {
                                                          IkReal j8array[1], cj8array[1], sj8array[1];
                                                          bool j8valid[1] = { false };
                                                          _nj8 = 1;
                                                          IkReal x633 = ((1.0) * gconst4);
                                                          CheckValue<IkReal> x634 =
                                                              IKatan2WithCheck(IkReal((((gconst4 * new_r01)) +
                                                                                       (((-1.0) * new_r10 * x633)))),
                                                                               IkReal(((((-1.0) * new_r00 * x633)) +
                                                                                       (((-1.0) * new_r11 * x633)))),
                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x634.valid)
                                                          {
                                                            continue;
                                                          }
                                                          CheckValue<IkReal> x635 = IKPowWithIntegerCheck(
                                                              IKsign((((new_r10 * new_r11)) + ((new_r00 * new_r01)))),
                                                              -1);
                                                          if (!x635.valid)
                                                          {
                                                            continue;
                                                          }
                                                          j8array[0] = ((-1.5707963267949) + (x634.value) +
                                                                        (((1.5707963267949) * (x635.value))));
                                                          sj8array[0] = IKsin(j8array[0]);
                                                          cj8array[0] = IKcos(j8array[0]);
                                                          if (j8array[0] > IKPI)
                                                          {
                                                            j8array[0] -= IK2PI;
                                                          }
                                                          else if (j8array[0] < -IKPI)
                                                          {
                                                            j8array[0] += IK2PI;
                                                          }
                                                          j8valid[0] = true;
                                                          for (int ij8 = 0; ij8 < 1; ++ij8)
                                                          {
                                                            if (!j8valid[ij8])
                                                            {
                                                              continue;
                                                            }
                                                            _ij8[0] = ij8;
                                                            _ij8[1] = -1;
                                                            for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                            {
                                                              if (j8valid[iij8] &&
                                                                  IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j8valid[iij8] = false;
                                                                _ij8[1] = iij8;
                                                                break;
                                                              }
                                                            }
                                                            j8 = j8array[ij8];
                                                            cj8 = cj8array[ij8];
                                                            sj8 = sj8array[ij8];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x636 = IKcos(j8);
                                                              IkReal x637 = IKsin(j8);
                                                              IkReal x638 = ((1.0) * gconst5);
                                                              IkReal x639 = (gconst4 * x636);
                                                              IkReal x640 = (gconst4 * x637);
                                                              IkReal x641 = ((1.0) * x637);
                                                              IkReal x642 = (x637 * x638);
                                                              evalcond[0] =
                                                                  (gconst4 + ((new_r01 * x636)) + ((new_r11 * x637)));
                                                              evalcond[1] = (((gconst5 * x636)) + x640 + new_r11);
                                                              evalcond[2] = (gconst4 + (((-1.0) * new_r00 * x641)) +
                                                                             ((new_r10 * x636)));
                                                              evalcond[3] = (gconst5 + (((-1.0) * new_r01 * x641)) +
                                                                             ((new_r11 * x636)));
                                                              evalcond[4] = ((((-1.0) * x642)) + x639 + new_r01);
                                                              evalcond[5] = ((((-1.0) * x642)) + x639 + new_r10);
                                                              evalcond[6] = ((((-1.0) * x638)) + ((new_r00 * x636)) +
                                                                             ((new_r10 * x637)));
                                                              evalcond[7] = ((((-1.0) * x640)) +
                                                                             (((-1.0) * x636 * x638)) + new_r00);
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 17;
                                                              vinfos[0].foffset = j2;
                                                              vinfos[0].indices[0] = _ij2[0];
                                                              vinfos[0].indices[1] = _ij2[1];
                                                              vinfos[0].maxsolutions = _nj2;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j3;
                                                              vinfos[1].indices[0] = _ij3[0];
                                                              vinfos[1].indices[1] = _ij3[1];
                                                              vinfos[1].maxsolutions = _nj3;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j4;
                                                              vinfos[2].indices[0] = _ij4[0];
                                                              vinfos[2].indices[1] = _ij4[1];
                                                              vinfos[2].maxsolutions = _nj4;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j5;
                                                              vinfos[3].indices[0] = _ij5[0];
                                                              vinfos[3].indices[1] = _ij5[1];
                                                              vinfos[3].maxsolutions = _nj5;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j8;
                                                              vinfos[4].indices[0] = _ij8[0];
                                                              vinfos[4].indices[1] = _ij8[1];
                                                              vinfos[4].maxsolutions = _nj8;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j9;
                                                              vinfos[5].indices[0] = _ij9[0];
                                                              vinfos[5].indices[1] = _ij9[1];
                                                              vinfos[5].maxsolutions = _nj9;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j10;
                                                              vinfos[6].indices[0] = _ij10[0];
                                                              vinfos[6].indices[1] = _ij10[1];
                                                              vinfos[6].maxsolutions = _nj10;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    evalcond[0] = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                    {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j8eval[1];
                                                        sj9 = 1.0;
                                                        cj9 = 0;
                                                        j9 = 1.5707963267949;
                                                        new_r01 = 0;
                                                        new_r11 = 0;
                                                        j8eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                        if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                        {
                                                          continue;  // 3 cases reached
                                                        }
                                                        else
                                                        {
                                                          {
                                                            IkReal j8array[2], cj8array[2], sj8array[2];
                                                            bool j8valid[2] = { false };
                                                            _nj8 = 2;
                                                            CheckValue<IkReal> x644 =
                                                                IKatan2WithCheck(IkReal(new_r00), IkReal(new_r10),
                                                                                 IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x644.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x643 = x644.value;
                                                            j8array[0] = ((-1.0) * x643);
                                                            sj8array[0] = IKsin(j8array[0]);
                                                            cj8array[0] = IKcos(j8array[0]);
                                                            j8array[1] = ((3.14159265358979) + (((-1.0) * x643)));
                                                            sj8array[1] = IKsin(j8array[1]);
                                                            cj8array[1] = IKcos(j8array[1]);
                                                            if (j8array[0] > IKPI)
                                                            {
                                                              j8array[0] -= IK2PI;
                                                            }
                                                            else if (j8array[0] < -IKPI)
                                                            {
                                                              j8array[0] += IK2PI;
                                                            }
                                                            j8valid[0] = true;
                                                            if (j8array[1] > IKPI)
                                                            {
                                                              j8array[1] -= IK2PI;
                                                            }
                                                            else if (j8array[1] < -IKPI)
                                                            {
                                                              j8array[1] += IK2PI;
                                                            }
                                                            j8valid[1] = true;
                                                            for (int ij8 = 0; ij8 < 2; ++ij8)
                                                            {
                                                              if (!j8valid[ij8])
                                                              {
                                                                continue;
                                                              }
                                                              _ij8[0] = ij8;
                                                              _ij8[1] = -1;
                                                              for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                              {
                                                                if (j8valid[iij8] &&
                                                                    IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j8valid[iij8] = false;
                                                                  _ij8[1] = iij8;
                                                                  break;
                                                                }
                                                              }
                                                              j8 = j8array[ij8];
                                                              cj8 = cj8array[ij8];
                                                              sj8 = sj8array[ij8];
                                                              {
                                                                IkReal evalcond[1];
                                                                evalcond[0] = (((new_r10 * (IKcos(j8)))) +
                                                                               (((-1.0) * new_r00 * (IKsin(j8)))));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j2;
                                                                vinfos[0].indices[0] = _ij2[0];
                                                                vinfos[0].indices[1] = _ij2[1];
                                                                vinfos[0].maxsolutions = _nj2;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j3;
                                                                vinfos[1].indices[0] = _ij3[0];
                                                                vinfos[1].indices[1] = _ij3[1];
                                                                vinfos[1].maxsolutions = _nj3;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j4;
                                                                vinfos[2].indices[0] = _ij4[0];
                                                                vinfos[2].indices[1] = _ij4[1];
                                                                vinfos[2].maxsolutions = _nj4;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j5;
                                                                vinfos[3].indices[0] = _ij5[0];
                                                                vinfos[3].indices[1] = _ij5[1];
                                                                vinfos[3].maxsolutions = _nj5;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j8;
                                                                vinfos[4].indices[0] = _ij8[0];
                                                                vinfos[4].indices[1] = _ij8[1];
                                                                vinfos[4].maxsolutions = _nj8;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j9;
                                                                vinfos[5].indices[0] = _ij9[0];
                                                                vinfos[5].indices[1] = _ij9[1];
                                                                vinfos[5].maxsolutions = _nj9;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j10;
                                                                vinfos[6].indices[0] = _ij10[0];
                                                                vinfos[6].indices[1] = _ij10[1];
                                                                vinfos[6].maxsolutions = _nj10;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement)
                                                  {
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) + (IKabs(j10))),
                                                                             6.28318530717959)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j8array[1], cj8array[1], sj8array[1];
                                                          bool j8valid[1] = { false };
                                                          _nj8 = 1;
                                                          if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j8array[0] = IKatan2(new_r01, ((-1.0) * new_r11));
                                                          sj8array[0] = IKsin(j8array[0]);
                                                          cj8array[0] = IKcos(j8array[0]);
                                                          if (j8array[0] > IKPI)
                                                          {
                                                            j8array[0] -= IK2PI;
                                                          }
                                                          else if (j8array[0] < -IKPI)
                                                          {
                                                            j8array[0] += IK2PI;
                                                          }
                                                          j8valid[0] = true;
                                                          for (int ij8 = 0; ij8 < 1; ++ij8)
                                                          {
                                                            if (!j8valid[ij8])
                                                            {
                                                              continue;
                                                            }
                                                            _ij8[0] = ij8;
                                                            _ij8[1] = -1;
                                                            for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                            {
                                                              if (j8valid[iij8] &&
                                                                  IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j8valid[iij8] = false;
                                                                _ij8[1] = iij8;
                                                                break;
                                                              }
                                                            }
                                                            j8 = j8array[ij8];
                                                            cj8 = cj8array[ij8];
                                                            sj8 = sj8array[ij8];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x645 = IKcos(j8);
                                                              IkReal x646 = IKsin(j8);
                                                              IkReal x647 = ((1.0) * x646);
                                                              evalcond[0] = (x645 + new_r11);
                                                              evalcond[1] = ((((-1.0) * x647)) + new_r01);
                                                              evalcond[2] = ((((-1.0) * x647)) + new_r10);
                                                              evalcond[3] = ((((-1.0) * x645)) + new_r00);
                                                              evalcond[4] = (((new_r11 * x646)) + ((new_r01 * x645)));
                                                              evalcond[5] =
                                                                  ((-1.0) + ((new_r10 * x646)) + ((new_r00 * x645)));
                                                              evalcond[6] =
                                                                  (((new_r10 * x645)) + (((-1.0) * new_r00 * x647)));
                                                              evalcond[7] = ((1.0) + ((new_r11 * x645)) +
                                                                             (((-1.0) * new_r01 * x647)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 17;
                                                              vinfos[0].foffset = j2;
                                                              vinfos[0].indices[0] = _ij2[0];
                                                              vinfos[0].indices[1] = _ij2[1];
                                                              vinfos[0].maxsolutions = _nj2;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j3;
                                                              vinfos[1].indices[0] = _ij3[0];
                                                              vinfos[1].indices[1] = _ij3[1];
                                                              vinfos[1].maxsolutions = _nj3;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j4;
                                                              vinfos[2].indices[0] = _ij4[0];
                                                              vinfos[2].indices[1] = _ij4[1];
                                                              vinfos[2].maxsolutions = _nj4;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j5;
                                                              vinfos[3].indices[0] = _ij5[0];
                                                              vinfos[3].indices[1] = _ij5[1];
                                                              vinfos[3].maxsolutions = _nj5;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j8;
                                                              vinfos[4].indices[0] = _ij8[0];
                                                              vinfos[4].indices[1] = _ij8[1];
                                                              vinfos[4].maxsolutions = _nj8;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j9;
                                                              vinfos[5].indices[0] = _ij9[0];
                                                              vinfos[5].indices[1] = _ij9[1];
                                                              vinfos[5].maxsolutions = _nj9;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j10;
                                                              vinfos[6].indices[0] = _ij10[0];
                                                              vinfos[6].indices[1] = _ij10[1];
                                                              vinfos[6].maxsolutions = _nj10;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-3.14159265358979) + j10)))),
                                                                               6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                        {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j8array[1], cj8array[1], sj8array[1];
                                                            bool j8valid[1] = { false };
                                                            _nj8 = 1;
                                                            if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(((-1.0) * new_r01)) +
                                                                      IKsqr(((-1.0) * new_r00)) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j8array[0] =
                                                                IKatan2(((-1.0) * new_r01), ((-1.0) * new_r00));
                                                            sj8array[0] = IKsin(j8array[0]);
                                                            cj8array[0] = IKcos(j8array[0]);
                                                            if (j8array[0] > IKPI)
                                                            {
                                                              j8array[0] -= IK2PI;
                                                            }
                                                            else if (j8array[0] < -IKPI)
                                                            {
                                                              j8array[0] += IK2PI;
                                                            }
                                                            j8valid[0] = true;
                                                            for (int ij8 = 0; ij8 < 1; ++ij8)
                                                            {
                                                              if (!j8valid[ij8])
                                                              {
                                                                continue;
                                                              }
                                                              _ij8[0] = ij8;
                                                              _ij8[1] = -1;
                                                              for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                              {
                                                                if (j8valid[iij8] &&
                                                                    IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j8valid[iij8] = false;
                                                                  _ij8[1] = iij8;
                                                                  break;
                                                                }
                                                              }
                                                              j8 = j8array[ij8];
                                                              cj8 = cj8array[ij8];
                                                              sj8 = sj8array[ij8];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x648 = IKsin(j8);
                                                                IkReal x649 = IKcos(j8);
                                                                IkReal x650 = ((1.0) * x648);
                                                                evalcond[0] = (x648 + new_r01);
                                                                evalcond[1] = (x648 + new_r10);
                                                                evalcond[2] = (x649 + new_r00);
                                                                evalcond[3] = ((((-1.0) * x649)) + new_r11);
                                                                evalcond[4] = (((new_r11 * x648)) + ((new_r01 * x649)));
                                                                evalcond[5] =
                                                                    ((1.0) + ((new_r10 * x648)) + ((new_r00 * x649)));
                                                                evalcond[6] =
                                                                    ((((-1.0) * new_r00 * x650)) + ((new_r10 * x649)));
                                                                evalcond[7] = ((-1.0) + ((new_r11 * x649)) +
                                                                               (((-1.0) * new_r01 * x650)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j2;
                                                                vinfos[0].indices[0] = _ij2[0];
                                                                vinfos[0].indices[1] = _ij2[1];
                                                                vinfos[0].maxsolutions = _nj2;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j3;
                                                                vinfos[1].indices[0] = _ij3[0];
                                                                vinfos[1].indices[1] = _ij3[1];
                                                                vinfos[1].maxsolutions = _nj3;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j4;
                                                                vinfos[2].indices[0] = _ij4[0];
                                                                vinfos[2].indices[1] = _ij4[1];
                                                                vinfos[2].maxsolutions = _nj4;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j5;
                                                                vinfos[3].indices[0] = _ij5[0];
                                                                vinfos[3].indices[1] = _ij5[1];
                                                                vinfos[3].maxsolutions = _nj5;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j8;
                                                                vinfos[4].indices[0] = _ij8[0];
                                                                vinfos[4].indices[1] = _ij8[1];
                                                                vinfos[4].maxsolutions = _nj8;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j9;
                                                                vinfos[5].indices[0] = _ij9[0];
                                                                vinfos[5].indices[1] = _ij9[1];
                                                                vinfos[5].maxsolutions = _nj9;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j10;
                                                                vinfos[6].indices[0] = _ij10[0];
                                                                vinfos[6].indices[1] = _ij10[1];
                                                                vinfos[6].maxsolutions = _nj10;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement)
                                                      {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                          evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r00)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                          {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j8eval[3];
                                                              sj9 = 1.0;
                                                              cj9 = 0;
                                                              j9 = 1.5707963267949;
                                                              new_r11 = 0;
                                                              new_r00 = 0;
                                                              j8eval[0] = new_r01;
                                                              j8eval[1] = IKsign(new_r01);
                                                              j8eval[2] = ((IKabs(sj10)) + (IKabs(cj10)));
                                                              if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                  IKabs(j8eval[1]) < 0.0000010000000000 ||
                                                                  IKabs(j8eval[2]) < 0.0000010000000000)
                                                              {
                                                                {
                                                                  IkReal j8eval[2];
                                                                  sj9 = 1.0;
                                                                  cj9 = 0;
                                                                  j9 = 1.5707963267949;
                                                                  new_r11 = 0;
                                                                  new_r00 = 0;
                                                                  j8eval[0] = new_r01;
                                                                  j8eval[1] = new_r10;
                                                                  if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                      IKabs(j8eval[1]) < 0.0000010000000000)
                                                                  {
                                                                    continue;  // no branches [j8]
                                                                  }
                                                                  else
                                                                  {
                                                                    {
                                                                      IkReal j8array[1], cj8array[1], sj8array[1];
                                                                      bool j8valid[1] = { false };
                                                                      _nj8 = 1;
                                                                      CheckValue<IkReal> x651 =
                                                                          IKPowWithIntegerCheck(new_r01, -1);
                                                                      if (!x651.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      CheckValue<IkReal> x652 =
                                                                          IKPowWithIntegerCheck(new_r10, -1);
                                                                      if (!x652.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      if (IKabs((cj10 * (x651.value))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(((-1.0) * sj10 * (x652.value))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr((cj10 * (x651.value))) +
                                                                                IKsqr(((-1.0) * sj10 * (x652.value))) -
                                                                                1) <= IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j8array[0] =
                                                                          IKatan2((cj10 * (x651.value)),
                                                                                  ((-1.0) * sj10 * (x652.value)));
                                                                      sj8array[0] = IKsin(j8array[0]);
                                                                      cj8array[0] = IKcos(j8array[0]);
                                                                      if (j8array[0] > IKPI)
                                                                      {
                                                                        j8array[0] -= IK2PI;
                                                                      }
                                                                      else if (j8array[0] < -IKPI)
                                                                      {
                                                                        j8array[0] += IK2PI;
                                                                      }
                                                                      j8valid[0] = true;
                                                                      for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                      {
                                                                        if (!j8valid[ij8])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij8[0] = ij8;
                                                                        _ij8[1] = -1;
                                                                        for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                        {
                                                                          if (j8valid[iij8] &&
                                                                              IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j8valid[iij8] = false;
                                                                            _ij8[1] = iij8;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j8 = j8array[ij8];
                                                                        cj8 = cj8array[ij8];
                                                                        sj8 = sj8array[ij8];
                                                                        {
                                                                          IkReal evalcond[7];
                                                                          IkReal x653 = IKcos(j8);
                                                                          IkReal x654 = IKsin(j8);
                                                                          IkReal x655 = ((1.0) * cj10);
                                                                          IkReal x656 = (sj10 * x653);
                                                                          IkReal x657 = (x654 * x655);
                                                                          evalcond[0] = (sj10 + ((new_r01 * x653)));
                                                                          evalcond[1] = (sj10 + ((new_r10 * x653)));
                                                                          evalcond[2] =
                                                                              ((((-1.0) * new_r01 * x654)) + cj10);
                                                                          evalcond[3] =
                                                                              ((((-1.0) * x655)) + ((new_r10 * x654)));
                                                                          evalcond[4] =
                                                                              (((sj10 * x654)) + ((cj10 * x653)));
                                                                          evalcond[5] =
                                                                              ((((-1.0) * x657)) + x656 + new_r01);
                                                                          evalcond[6] =
                                                                              ((((-1.0) * x657)) + x656 + new_r10);
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 17;
                                                                          vinfos[0].foffset = j2;
                                                                          vinfos[0].indices[0] = _ij2[0];
                                                                          vinfos[0].indices[1] = _ij2[1];
                                                                          vinfos[0].maxsolutions = _nj2;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j3;
                                                                          vinfos[1].indices[0] = _ij3[0];
                                                                          vinfos[1].indices[1] = _ij3[1];
                                                                          vinfos[1].maxsolutions = _nj3;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j4;
                                                                          vinfos[2].indices[0] = _ij4[0];
                                                                          vinfos[2].indices[1] = _ij4[1];
                                                                          vinfos[2].maxsolutions = _nj4;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j5;
                                                                          vinfos[3].indices[0] = _ij5[0];
                                                                          vinfos[3].indices[1] = _ij5[1];
                                                                          vinfos[3].maxsolutions = _nj5;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j8;
                                                                          vinfos[4].indices[0] = _ij8[0];
                                                                          vinfos[4].indices[1] = _ij8[1];
                                                                          vinfos[4].maxsolutions = _nj8;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j9;
                                                                          vinfos[5].indices[0] = _ij9[0];
                                                                          vinfos[5].indices[1] = _ij9[1];
                                                                          vinfos[5].maxsolutions = _nj9;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j10;
                                                                          vinfos[6].indices[0] = _ij10[0];
                                                                          vinfos[6].indices[1] = _ij10[1];
                                                                          vinfos[6].maxsolutions = _nj10;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              else
                                                              {
                                                                {
                                                                  IkReal j8array[1], cj8array[1], sj8array[1];
                                                                  bool j8valid[1] = { false };
                                                                  _nj8 = 1;
                                                                  CheckValue<IkReal> x658 =
                                                                      IKPowWithIntegerCheck(IKsign(new_r01), -1);
                                                                  if (!x658.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  CheckValue<IkReal> x659 =
                                                                      IKatan2WithCheck(IkReal(cj10),
                                                                                       IkReal(((-1.0) * sj10)),
                                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                                  if (!x659.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  j8array[0] = ((-1.5707963267949) +
                                                                                (((1.5707963267949) * (x658.value))) +
                                                                                (x659.value));
                                                                  sj8array[0] = IKsin(j8array[0]);
                                                                  cj8array[0] = IKcos(j8array[0]);
                                                                  if (j8array[0] > IKPI)
                                                                  {
                                                                    j8array[0] -= IK2PI;
                                                                  }
                                                                  else if (j8array[0] < -IKPI)
                                                                  {
                                                                    j8array[0] += IK2PI;
                                                                  }
                                                                  j8valid[0] = true;
                                                                  for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                  {
                                                                    if (!j8valid[ij8])
                                                                    {
                                                                      continue;
                                                                    }
                                                                    _ij8[0] = ij8;
                                                                    _ij8[1] = -1;
                                                                    for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                    {
                                                                      if (j8valid[iij8] &&
                                                                          IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                              IKFAST_SOLUTION_THRESH)
                                                                      {
                                                                        j8valid[iij8] = false;
                                                                        _ij8[1] = iij8;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j8 = j8array[ij8];
                                                                    cj8 = cj8array[ij8];
                                                                    sj8 = sj8array[ij8];
                                                                    {
                                                                      IkReal evalcond[7];
                                                                      IkReal x660 = IKcos(j8);
                                                                      IkReal x661 = IKsin(j8);
                                                                      IkReal x662 = ((1.0) * cj10);
                                                                      IkReal x663 = (sj10 * x660);
                                                                      IkReal x664 = (x661 * x662);
                                                                      evalcond[0] = (sj10 + ((new_r01 * x660)));
                                                                      evalcond[1] = (sj10 + ((new_r10 * x660)));
                                                                      evalcond[2] =
                                                                          (cj10 + (((-1.0) * new_r01 * x661)));
                                                                      evalcond[3] =
                                                                          (((new_r10 * x661)) + (((-1.0) * x662)));
                                                                      evalcond[4] = (((sj10 * x661)) + ((cj10 * x660)));
                                                                      evalcond[5] =
                                                                          ((((-1.0) * x664)) + x663 + new_r01);
                                                                      evalcond[6] =
                                                                          ((((-1.0) * x664)) + x663 + new_r10);
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH)
                                                                      {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 17;
                                                                      vinfos[0].foffset = j2;
                                                                      vinfos[0].indices[0] = _ij2[0];
                                                                      vinfos[0].indices[1] = _ij2[1];
                                                                      vinfos[0].maxsolutions = _nj2;
                                                                      vinfos[1].jointtype = 17;
                                                                      vinfos[1].foffset = j3;
                                                                      vinfos[1].indices[0] = _ij3[0];
                                                                      vinfos[1].indices[1] = _ij3[1];
                                                                      vinfos[1].maxsolutions = _nj3;
                                                                      vinfos[2].jointtype = 17;
                                                                      vinfos[2].foffset = j4;
                                                                      vinfos[2].indices[0] = _ij4[0];
                                                                      vinfos[2].indices[1] = _ij4[1];
                                                                      vinfos[2].maxsolutions = _nj4;
                                                                      vinfos[3].jointtype = 17;
                                                                      vinfos[3].foffset = j5;
                                                                      vinfos[3].indices[0] = _ij5[0];
                                                                      vinfos[3].indices[1] = _ij5[1];
                                                                      vinfos[3].maxsolutions = _nj5;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j8;
                                                                      vinfos[4].indices[0] = _ij8[0];
                                                                      vinfos[4].indices[1] = _ij8[1];
                                                                      vinfos[4].maxsolutions = _nj8;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j9;
                                                                      vinfos[5].indices[0] = _ij9[0];
                                                                      vinfos[5].indices[1] = _ij9[1];
                                                                      vinfos[5].maxsolutions = _nj9;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j10;
                                                                      vinfos[6].indices[0] = _ij10[0];
                                                                      vinfos[6].indices[1] = _ij10[1];
                                                                      vinfos[6].maxsolutions = _nj10;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                          bool bgotonextstatement = true;
                                                          do
                                                          {
                                                            evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j8eval[1];
                                                                sj9 = 1.0;
                                                                cj9 = 0;
                                                                j9 = 1.5707963267949;
                                                                new_r11 = 0;
                                                                new_r01 = 0;
                                                                new_r22 = 0;
                                                                new_r20 = 0;
                                                                j8eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                {
                                                                  continue;  // no branches [j8]
                                                                }
                                                                else
                                                                {
                                                                  {
                                                                    IkReal j8array[2], cj8array[2], sj8array[2];
                                                                    bool j8valid[2] = { false };
                                                                    _nj8 = 2;
                                                                    CheckValue<IkReal> x666 =
                                                                        IKatan2WithCheck(IkReal(new_r00),
                                                                                         IkReal(new_r10),
                                                                                         IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x666.valid)
                                                                    {
                                                                      continue;
                                                                    }
                                                                    IkReal x665 = x666.value;
                                                                    j8array[0] = ((-1.0) * x665);
                                                                    sj8array[0] = IKsin(j8array[0]);
                                                                    cj8array[0] = IKcos(j8array[0]);
                                                                    j8array[1] =
                                                                        ((3.14159265358979) + (((-1.0) * x665)));
                                                                    sj8array[1] = IKsin(j8array[1]);
                                                                    cj8array[1] = IKcos(j8array[1]);
                                                                    if (j8array[0] > IKPI)
                                                                    {
                                                                      j8array[0] -= IK2PI;
                                                                    }
                                                                    else if (j8array[0] < -IKPI)
                                                                    {
                                                                      j8array[0] += IK2PI;
                                                                    }
                                                                    j8valid[0] = true;
                                                                    if (j8array[1] > IKPI)
                                                                    {
                                                                      j8array[1] -= IK2PI;
                                                                    }
                                                                    else if (j8array[1] < -IKPI)
                                                                    {
                                                                      j8array[1] += IK2PI;
                                                                    }
                                                                    j8valid[1] = true;
                                                                    for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                    {
                                                                      if (!j8valid[ij8])
                                                                      {
                                                                        continue;
                                                                      }
                                                                      _ij8[0] = ij8;
                                                                      _ij8[1] = -1;
                                                                      for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                                      {
                                                                        if (j8valid[iij8] &&
                                                                            IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                                IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                          j8valid[iij8] = false;
                                                                          _ij8[1] = iij8;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j8 = j8array[ij8];
                                                                      cj8 = cj8array[ij8];
                                                                      sj8 = sj8array[ij8];
                                                                      {
                                                                        IkReal evalcond[1];
                                                                        evalcond[0] =
                                                                            (((new_r10 * (IKcos(j8)))) +
                                                                             (((-1.0) * new_r00 * (IKsin(j8)))));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 17;
                                                                        vinfos[0].foffset = j2;
                                                                        vinfos[0].indices[0] = _ij2[0];
                                                                        vinfos[0].indices[1] = _ij2[1];
                                                                        vinfos[0].maxsolutions = _nj2;
                                                                        vinfos[1].jointtype = 17;
                                                                        vinfos[1].foffset = j3;
                                                                        vinfos[1].indices[0] = _ij3[0];
                                                                        vinfos[1].indices[1] = _ij3[1];
                                                                        vinfos[1].maxsolutions = _nj3;
                                                                        vinfos[2].jointtype = 17;
                                                                        vinfos[2].foffset = j4;
                                                                        vinfos[2].indices[0] = _ij4[0];
                                                                        vinfos[2].indices[1] = _ij4[1];
                                                                        vinfos[2].maxsolutions = _nj4;
                                                                        vinfos[3].jointtype = 17;
                                                                        vinfos[3].foffset = j5;
                                                                        vinfos[3].indices[0] = _ij5[0];
                                                                        vinfos[3].indices[1] = _ij5[1];
                                                                        vinfos[3].maxsolutions = _nj5;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j8;
                                                                        vinfos[4].indices[0] = _ij8[0];
                                                                        vinfos[4].indices[1] = _ij8[1];
                                                                        vinfos[4].maxsolutions = _nj8;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j9;
                                                                        vinfos[5].indices[0] = _ij9[0];
                                                                        vinfos[5].indices[1] = _ij9[1];
                                                                        vinfos[5].maxsolutions = _nj9;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j10;
                                                                        vinfos[6].indices[0] = _ij10[0];
                                                                        vinfos[6].indices[1] = _ij10[1];
                                                                        vinfos[6].maxsolutions = _nj10;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement)
                                                          {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                              evalcond[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                              {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j8eval[1];
                                                                  sj9 = 1.0;
                                                                  cj9 = 0;
                                                                  j9 = 1.5707963267949;
                                                                  new_r00 = 0;
                                                                  new_r10 = 0;
                                                                  new_r21 = 0;
                                                                  new_r22 = 0;
                                                                  j8eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                                                  if (IKabs(j8eval[0]) < 0.0000010000000000)
                                                                  {
                                                                    continue;  // no branches [j8]
                                                                  }
                                                                  else
                                                                  {
                                                                    {
                                                                      IkReal j8array[2], cj8array[2], sj8array[2];
                                                                      bool j8valid[2] = { false };
                                                                      _nj8 = 2;
                                                                      CheckValue<IkReal> x668 =
                                                                          IKatan2WithCheck(IkReal(new_r01),
                                                                                           IkReal(new_r11),
                                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x668.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      IkReal x667 = x668.value;
                                                                      j8array[0] = ((-1.0) * x667);
                                                                      sj8array[0] = IKsin(j8array[0]);
                                                                      cj8array[0] = IKcos(j8array[0]);
                                                                      j8array[1] =
                                                                          ((3.14159265358979) + (((-1.0) * x667)));
                                                                      sj8array[1] = IKsin(j8array[1]);
                                                                      cj8array[1] = IKcos(j8array[1]);
                                                                      if (j8array[0] > IKPI)
                                                                      {
                                                                        j8array[0] -= IK2PI;
                                                                      }
                                                                      else if (j8array[0] < -IKPI)
                                                                      {
                                                                        j8array[0] += IK2PI;
                                                                      }
                                                                      j8valid[0] = true;
                                                                      if (j8array[1] > IKPI)
                                                                      {
                                                                        j8array[1] -= IK2PI;
                                                                      }
                                                                      else if (j8array[1] < -IKPI)
                                                                      {
                                                                        j8array[1] += IK2PI;
                                                                      }
                                                                      j8valid[1] = true;
                                                                      for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                      {
                                                                        if (!j8valid[ij8])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij8[0] = ij8;
                                                                        _ij8[1] = -1;
                                                                        for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                                        {
                                                                          if (j8valid[iij8] &&
                                                                              IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j8valid[iij8] = false;
                                                                            _ij8[1] = iij8;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j8 = j8array[ij8];
                                                                        cj8 = cj8array[ij8];
                                                                        sj8 = sj8array[ij8];
                                                                        {
                                                                          IkReal evalcond[1];
                                                                          evalcond[0] =
                                                                              ((((-1.0) * new_r01 * (IKsin(j8)))) +
                                                                               ((new_r11 * (IKcos(j8)))));
                                                                          if (IKabs(evalcond[0]) >
                                                                              IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 17;
                                                                          vinfos[0].foffset = j2;
                                                                          vinfos[0].indices[0] = _ij2[0];
                                                                          vinfos[0].indices[1] = _ij2[1];
                                                                          vinfos[0].maxsolutions = _nj2;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j3;
                                                                          vinfos[1].indices[0] = _ij3[0];
                                                                          vinfos[1].indices[1] = _ij3[1];
                                                                          vinfos[1].maxsolutions = _nj3;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j4;
                                                                          vinfos[2].indices[0] = _ij4[0];
                                                                          vinfos[2].indices[1] = _ij4[1];
                                                                          vinfos[2].maxsolutions = _nj4;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j5;
                                                                          vinfos[3].indices[0] = _ij5[0];
                                                                          vinfos[3].indices[1] = _ij5[1];
                                                                          vinfos[3].maxsolutions = _nj5;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j8;
                                                                          vinfos[4].indices[0] = _ij8[0];
                                                                          vinfos[4].indices[1] = _ij8[1];
                                                                          vinfos[4].maxsolutions = _nj8;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j9;
                                                                          vinfos[5].indices[0] = _ij9[0];
                                                                          vinfos[5].indices[1] = _ij9[1];
                                                                          vinfos[5].maxsolutions = _nj9;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j10;
                                                                          vinfos[6].indices[0] = _ij10[0];
                                                                          vinfos[6].indices[1] = _ij10[1];
                                                                          vinfos[6].maxsolutions = _nj10;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                              bool bgotonextstatement = true;
                                                              do
                                                              {
                                                                evalcond[0] = ((IKabs(new_r10)) + (IKabs(new_r01)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j8eval[3];
                                                                    sj9 = 1.0;
                                                                    cj9 = 0;
                                                                    j9 = 1.5707963267949;
                                                                    new_r01 = 0;
                                                                    new_r10 = 0;
                                                                    j8eval[0] = new_r11;
                                                                    j8eval[1] = IKsign(new_r11);
                                                                    j8eval[2] = ((IKabs(sj10)) + (IKabs(cj10)));
                                                                    if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                        IKabs(j8eval[1]) < 0.0000010000000000 ||
                                                                        IKabs(j8eval[2]) < 0.0000010000000000)
                                                                    {
                                                                      {
                                                                        IkReal j8eval[2];
                                                                        sj9 = 1.0;
                                                                        cj9 = 0;
                                                                        j9 = 1.5707963267949;
                                                                        new_r01 = 0;
                                                                        new_r10 = 0;
                                                                        j8eval[0] = new_r00;
                                                                        j8eval[1] = new_r11;
                                                                        if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                            IKabs(j8eval[1]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j8eval[2];
                                                                            sj9 = 1.0;
                                                                            cj9 = 0;
                                                                            j9 = 1.5707963267949;
                                                                            new_r01 = 0;
                                                                            new_r10 = 0;
                                                                            j8eval[0] = new_r11;
                                                                            j8eval[1] = cj10;
                                                                            if (IKabs(j8eval[0]) < 0.0000010000000000 ||
                                                                                IKabs(j8eval[1]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal evalcond[1];
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                  evalcond[0] =
                                                                                      ((-3.14159265358979) +
                                                                                       (IKfmod(
                                                                                           ((3.14159265358979) +
                                                                                            (IKabs(((-1.5707963267949) +
                                                                                                    j10)))),
                                                                                           6.28318530717959)));
                                                                                  if (IKabs(evalcond[0]) <
                                                                                      0.0000050000000000)
                                                                                  {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                      IkReal j8array[2], cj8array[2],
                                                                                          sj8array[2];
                                                                                      bool j8valid[2] = { false };
                                                                                      _nj8 = 2;
                                                                                      sj8array[0] = new_r00;
                                                                                      if (sj8array[0] >=
                                                                                              -1 - IKFAST_SINCOS_THRESH &&
                                                                                          sj8array[0] <=
                                                                                              1 + IKFAST_SINCOS_THRESH)
                                                                                      {
                                                                                        j8valid[0] = j8valid[1] = true;
                                                                                        j8array[0] =
                                                                                            IKasin(sj8array[0]);
                                                                                        cj8array[0] = IKcos(j8array[0]);
                                                                                        sj8array[1] = sj8array[0];
                                                                                        j8array[1] =
                                                                                            j8array[0] > 0 ?
                                                                                                (IKPI - j8array[0]) :
                                                                                                (-IKPI - j8array[0]);
                                                                                        cj8array[1] = -cj8array[0];
                                                                                      }
                                                                                      else if (isnan(sj8array[0]))
                                                                                      {
                                                                                        // probably any value will work
                                                                                        j8valid[0] = true;
                                                                                        cj8array[0] = 1;
                                                                                        sj8array[0] = 0;
                                                                                        j8array[0] = 0;
                                                                                      }
                                                                                      for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                                      {
                                                                                        if (!j8valid[ij8])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij8[0] = ij8;
                                                                                        _ij8[1] = -1;
                                                                                        for (int iij8 = ij8 + 1;
                                                                                             iij8 < 2; ++iij8)
                                                                                        {
                                                                                          if (j8valid[iij8] &&
                                                                                              IKabs(cj8array[ij8] -
                                                                                                    cj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj8array[ij8] -
                                                                                                    sj8array[iij8]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j8valid[iij8] = false;
                                                                                            _ij8[1] = iij8;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j8 = j8array[ij8];
                                                                                        cj8 = cj8array[ij8];
                                                                                        sj8 = sj8array[ij8];
                                                                                        {
                                                                                          IkReal evalcond[6];
                                                                                          IkReal x669 = IKcos(j8);
                                                                                          IkReal x670 = IKsin(j8);
                                                                                          evalcond[0] = x669;
                                                                                          evalcond[1] =
                                                                                              (new_r00 * x669);
                                                                                          evalcond[2] =
                                                                                              (x670 + new_r11);
                                                                                          evalcond[3] =
                                                                                              (new_r11 * x669);
                                                                                          evalcond[4] =
                                                                                              ((1.0) +
                                                                                               ((new_r11 * x670)));
                                                                                          evalcond[5] =
                                                                                              ((1.0) +
                                                                                               (((-1.0) * new_r00 *
                                                                                                 x670)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j2;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[0].maxsolutions = _nj2;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j3;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[1].maxsolutions = _nj3;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j4;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[2].maxsolutions = _nj4;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j5;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[3].maxsolutions = _nj5;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j8;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij8[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij8[1];
                                                                                          vinfos[4].maxsolutions = _nj8;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j9;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij9[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij9[1];
                                                                                          vinfos[5].maxsolutions = _nj9;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j10;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij10[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij10[1];
                                                                                          vinfos[6].maxsolutions =
                                                                                              _nj10;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                  bool bgotonextstatement = true;
                                                                                  do
                                                                                  {
                                                                                    evalcond[0] =
                                                                                        ((-3.14159265358979) +
                                                                                         (IKfmod(
                                                                                             ((3.14159265358979) +
                                                                                              (IKabs(((1.5707963267949) +
                                                                                                      j10)))),
                                                                                             6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) <
                                                                                        0.0000050000000000)
                                                                                    {
                                                                                      bgotonextstatement = false;
                                                                                      {
                                                                                        IkReal j8array[2], cj8array[2],
                                                                                            sj8array[2];
                                                                                        bool j8valid[2] = { false };
                                                                                        _nj8 = 2;
                                                                                        sj8array[0] = new_r11;
                                                                                        if (sj8array[0] >=
                                                                                                -1 -
                                                                                                    IKFAST_SINCOS_THRESH &&
                                                                                            sj8array[0] <=
                                                                                                1 + IKFAST_SINCOS_THRESH)
                                                                                        {
                                                                                          j8valid[0] = j8valid[1] =
                                                                                              true;
                                                                                          j8array[0] =
                                                                                              IKasin(sj8array[0]);
                                                                                          cj8array[0] =
                                                                                              IKcos(j8array[0]);
                                                                                          sj8array[1] = sj8array[0];
                                                                                          j8array[1] =
                                                                                              j8array[0] > 0 ?
                                                                                                  (IKPI - j8array[0]) :
                                                                                                  (-IKPI - j8array[0]);
                                                                                          cj8array[1] = -cj8array[0];
                                                                                        }
                                                                                        else if (isnan(sj8array[0]))
                                                                                        {
                                                                                          // probably any value will work
                                                                                          j8valid[0] = true;
                                                                                          cj8array[0] = 1;
                                                                                          sj8array[0] = 0;
                                                                                          j8array[0] = 0;
                                                                                        }
                                                                                        for (int ij8 = 0; ij8 < 2; ++ij8)
                                                                                        {
                                                                                          if (!j8valid[ij8])
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          _ij8[0] = ij8;
                                                                                          _ij8[1] = -1;
                                                                                          for (int iij8 = ij8 + 1;
                                                                                               iij8 < 2; ++iij8)
                                                                                          {
                                                                                            if (j8valid[iij8] &&
                                                                                                IKabs(cj8array[ij8] -
                                                                                                      cj8array[iij8]) <
                                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                                IKabs(sj8array[ij8] -
                                                                                                      sj8array[iij8]) <
                                                                                                    IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                              j8valid[iij8] = false;
                                                                                              _ij8[1] = iij8;
                                                                                              break;
                                                                                            }
                                                                                          }
                                                                                          j8 = j8array[ij8];
                                                                                          cj8 = cj8array[ij8];
                                                                                          sj8 = sj8array[ij8];
                                                                                          {
                                                                                            IkReal evalcond[6];
                                                                                            IkReal x671 = IKcos(j8);
                                                                                            IkReal x672 = IKsin(j8);
                                                                                            evalcond[0] =
                                                                                                (new_r00 * x671);
                                                                                            evalcond[1] =
                                                                                                (new_r11 * x671);
                                                                                            evalcond[2] =
                                                                                                ((-1.0) * x671);
                                                                                            evalcond[3] =
                                                                                                (x672 + new_r00);
                                                                                            evalcond[4] =
                                                                                                ((-1.0) +
                                                                                                 ((new_r11 * x672)));
                                                                                            evalcond[5] =
                                                                                                ((-1.0) +
                                                                                                 (((-1.0) * new_r00 *
                                                                                                   x672)));
                                                                                            if (IKabs(evalcond[0]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[1]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[2]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[3]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[4]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[5]) >
                                                                                                    IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                          }

                                                                                          {
                                                                                            std::vector<
                                                                                                IkSingleDOFSolutionBase<
                                                                                                    IkReal> >
                                                                                                vinfos(7);
                                                                                            vinfos[0].jointtype = 17;
                                                                                            vinfos[0].foffset = j2;
                                                                                            vinfos[0].indices[0] =
                                                                                                _ij2[0];
                                                                                            vinfos[0].indices[1] =
                                                                                                _ij2[1];
                                                                                            vinfos[0].maxsolutions =
                                                                                                _nj2;
                                                                                            vinfos[1].jointtype = 17;
                                                                                            vinfos[1].foffset = j3;
                                                                                            vinfos[1].indices[0] =
                                                                                                _ij3[0];
                                                                                            vinfos[1].indices[1] =
                                                                                                _ij3[1];
                                                                                            vinfos[1].maxsolutions =
                                                                                                _nj3;
                                                                                            vinfos[2].jointtype = 17;
                                                                                            vinfos[2].foffset = j4;
                                                                                            vinfos[2].indices[0] =
                                                                                                _ij4[0];
                                                                                            vinfos[2].indices[1] =
                                                                                                _ij4[1];
                                                                                            vinfos[2].maxsolutions =
                                                                                                _nj4;
                                                                                            vinfos[3].jointtype = 17;
                                                                                            vinfos[3].foffset = j5;
                                                                                            vinfos[3].indices[0] =
                                                                                                _ij5[0];
                                                                                            vinfos[3].indices[1] =
                                                                                                _ij5[1];
                                                                                            vinfos[3].maxsolutions =
                                                                                                _nj5;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j8;
                                                                                            vinfos[4].indices[0] =
                                                                                                _ij8[0];
                                                                                            vinfos[4].indices[1] =
                                                                                                _ij8[1];
                                                                                            vinfos[4].maxsolutions =
                                                                                                _nj8;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j9;
                                                                                            vinfos[5].indices[0] =
                                                                                                _ij9[0];
                                                                                            vinfos[5].indices[1] =
                                                                                                _ij9[1];
                                                                                            vinfos[5].maxsolutions =
                                                                                                _nj9;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j10;
                                                                                            vinfos[6].indices[0] =
                                                                                                _ij10[0];
                                                                                            vinfos[6].indices[1] =
                                                                                                _ij10[1];
                                                                                            vinfos[6].maxsolutions =
                                                                                                _nj10;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(
                                                                                                vinfos, vfree);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  } while (0);
                                                                                  if (bgotonextstatement)
                                                                                  {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                      if (1)
                                                                                      {
                                                                                        bgotonextstatement = false;
                                                                                        continue;  // branch miss [j8]
                                                                                      }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement) {}
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j8array[1], cj8array[1],
                                                                                    sj8array[1];
                                                                                bool j8valid[1] = { false };
                                                                                _nj8 = 1;
                                                                                CheckValue<IkReal> x674 =
                                                                                    IKPowWithIntegerCheck(new_r11, -1);
                                                                                if (!x674.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x673 = x674.value;
                                                                                CheckValue<IkReal> x675 =
                                                                                    IKPowWithIntegerCheck(cj10, -1);
                                                                                if (!x675.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                CheckValue<IkReal> x676 =
                                                                                    IKPowWithIntegerCheck(x673, -2);
                                                                                if (!x676.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                if (IKabs(((-1.0) * sj10 * x673)) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs((
                                                                                        x673 * (x675.value) *
                                                                                        (((1.0) +
                                                                                          (((-1.0) * (cj10 * cj10))) +
                                                                                          (((-1.0) * (x676.value))))))) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(
                                                                                        IKsqr(((-1.0) * sj10 * x673)) +
                                                                                        IKsqr((x673 * (x675.value) *
                                                                                               (((1.0) +
                                                                                                 (((-1.0) *
                                                                                                   (cj10 * cj10))) +
                                                                                                 (((-1.0) *
                                                                                                   (x676.value))))))) -
                                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                                  continue;
                                                                                j8array[0] = IKatan2(
                                                                                    ((-1.0) * sj10 * x673),
                                                                                    (x673 * (x675.value) *
                                                                                     (((1.0) +
                                                                                       (((-1.0) * (cj10 * cj10))) +
                                                                                       (((-1.0) * (x676.value)))))));
                                                                                sj8array[0] = IKsin(j8array[0]);
                                                                                cj8array[0] = IKcos(j8array[0]);
                                                                                if (j8array[0] > IKPI)
                                                                                {
                                                                                  j8array[0] -= IK2PI;
                                                                                }
                                                                                else if (j8array[0] < -IKPI)
                                                                                {
                                                                                  j8array[0] += IK2PI;
                                                                                }
                                                                                j8valid[0] = true;
                                                                                for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                                {
                                                                                  if (!j8valid[ij8])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij8[0] = ij8;
                                                                                  _ij8[1] = -1;
                                                                                  for (int iij8 = ij8 + 1; iij8 < 1;
                                                                                       ++iij8)
                                                                                  {
                                                                                    if (j8valid[iij8] &&
                                                                                        IKabs(cj8array[ij8] -
                                                                                              cj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj8array[ij8] -
                                                                                              sj8array[iij8]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j8valid[iij8] = false;
                                                                                      _ij8[1] = iij8;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j8 = j8array[ij8];
                                                                                  cj8 = cj8array[ij8];
                                                                                  sj8 = sj8array[ij8];
                                                                                  {
                                                                                    IkReal evalcond[7];
                                                                                    IkReal x677 = IKsin(j8);
                                                                                    IkReal x678 = IKcos(j8);
                                                                                    IkReal x679 = ((1.0) * cj10);
                                                                                    IkReal x680 = (sj10 * x677);
                                                                                    evalcond[0] =
                                                                                        (((new_r11 * x677)) + sj10);
                                                                                    evalcond[1] =
                                                                                        (((new_r11 * x678)) + cj10);
                                                                                    evalcond[2] =
                                                                                        (sj10 +
                                                                                         (((-1.0) * new_r00 * x677)));
                                                                                    evalcond[3] = (((new_r00 * x678)) +
                                                                                                   (((-1.0) * x679)));
                                                                                    evalcond[4] = (((cj10 * x678)) +
                                                                                                   x680 + new_r11);
                                                                                    evalcond[5] =
                                                                                        (((sj10 * x678)) +
                                                                                         (((-1.0) * x677 * x679)));
                                                                                    evalcond[6] =
                                                                                        ((((-1.0) * x678 * x679)) +
                                                                                         new_r00 + (((-1.0) * x680)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[6]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j2;
                                                                                    vinfos[0].indices[0] = _ij2[0];
                                                                                    vinfos[0].indices[1] = _ij2[1];
                                                                                    vinfos[0].maxsolutions = _nj2;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j3;
                                                                                    vinfos[1].indices[0] = _ij3[0];
                                                                                    vinfos[1].indices[1] = _ij3[1];
                                                                                    vinfos[1].maxsolutions = _nj3;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j4;
                                                                                    vinfos[2].indices[0] = _ij4[0];
                                                                                    vinfos[2].indices[1] = _ij4[1];
                                                                                    vinfos[2].maxsolutions = _nj4;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j5;
                                                                                    vinfos[3].indices[0] = _ij5[0];
                                                                                    vinfos[3].indices[1] = _ij5[1];
                                                                                    vinfos[3].maxsolutions = _nj5;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j8;
                                                                                    vinfos[4].indices[0] = _ij8[0];
                                                                                    vinfos[4].indices[1] = _ij8[1];
                                                                                    vinfos[4].maxsolutions = _nj8;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j9;
                                                                                    vinfos[5].indices[0] = _ij9[0];
                                                                                    vinfos[5].indices[1] = _ij9[1];
                                                                                    vinfos[5].maxsolutions = _nj9;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j10;
                                                                                    vinfos[6].indices[0] = _ij10[0];
                                                                                    vinfos[6].indices[1] = _ij10[1];
                                                                                    vinfos[6].maxsolutions = _nj10;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j8array[1], cj8array[1], sj8array[1];
                                                                            bool j8valid[1] = { false };
                                                                            _nj8 = 1;
                                                                            CheckValue<IkReal> x681 =
                                                                                IKPowWithIntegerCheck(new_r00, -1);
                                                                            if (!x681.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x682 =
                                                                                IKPowWithIntegerCheck(new_r11, -1);
                                                                            if (!x682.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            if (IKabs((sj10 * (x681.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(((-1.0) * cj10 * (x682.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(IKsqr((sj10 * (x681.value))) +
                                                                                      IKsqr(((-1.0) * cj10 *
                                                                                             (x682.value))) -
                                                                                      1) <= IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j8array[0] =
                                                                                IKatan2((sj10 * (x681.value)),
                                                                                        ((-1.0) * cj10 * (x682.value)));
                                                                            sj8array[0] = IKsin(j8array[0]);
                                                                            cj8array[0] = IKcos(j8array[0]);
                                                                            if (j8array[0] > IKPI)
                                                                            {
                                                                              j8array[0] -= IK2PI;
                                                                            }
                                                                            else if (j8array[0] < -IKPI)
                                                                            {
                                                                              j8array[0] += IK2PI;
                                                                            }
                                                                            j8valid[0] = true;
                                                                            for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                            {
                                                                              if (!j8valid[ij8])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij8[0] = ij8;
                                                                              _ij8[1] = -1;
                                                                              for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                              {
                                                                                if (j8valid[iij8] &&
                                                                                    IKabs(cj8array[ij8] -
                                                                                          cj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj8array[ij8] -
                                                                                          sj8array[iij8]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j8valid[iij8] = false;
                                                                                  _ij8[1] = iij8;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j8 = j8array[ij8];
                                                                              cj8 = cj8array[ij8];
                                                                              sj8 = sj8array[ij8];
                                                                              {
                                                                                IkReal evalcond[7];
                                                                                IkReal x683 = IKsin(j8);
                                                                                IkReal x684 = IKcos(j8);
                                                                                IkReal x685 = ((1.0) * cj10);
                                                                                IkReal x686 = (sj10 * x683);
                                                                                evalcond[0] =
                                                                                    (sj10 + ((new_r11 * x683)));
                                                                                evalcond[1] =
                                                                                    (cj10 + ((new_r11 * x684)));
                                                                                evalcond[2] =
                                                                                    ((((-1.0) * new_r00 * x683)) + sj10);
                                                                                evalcond[3] = ((((-1.0) * x685)) +
                                                                                               ((new_r00 * x684)));
                                                                                evalcond[4] =
                                                                                    (((cj10 * x684)) + x686 + new_r11);
                                                                                evalcond[5] =
                                                                                    ((((-1.0) * x683 * x685)) +
                                                                                     ((sj10 * x684)));
                                                                                evalcond[6] =
                                                                                    ((((-1.0) * x684 * x685)) +
                                                                                     new_r00 + (((-1.0) * x686)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j2;
                                                                                vinfos[0].indices[0] = _ij2[0];
                                                                                vinfos[0].indices[1] = _ij2[1];
                                                                                vinfos[0].maxsolutions = _nj2;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j3;
                                                                                vinfos[1].indices[0] = _ij3[0];
                                                                                vinfos[1].indices[1] = _ij3[1];
                                                                                vinfos[1].maxsolutions = _nj3;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j4;
                                                                                vinfos[2].indices[0] = _ij4[0];
                                                                                vinfos[2].indices[1] = _ij4[1];
                                                                                vinfos[2].maxsolutions = _nj4;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j5;
                                                                                vinfos[3].indices[0] = _ij5[0];
                                                                                vinfos[3].indices[1] = _ij5[1];
                                                                                vinfos[3].maxsolutions = _nj5;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j8;
                                                                                vinfos[4].indices[0] = _ij8[0];
                                                                                vinfos[4].indices[1] = _ij8[1];
                                                                                vinfos[4].maxsolutions = _nj8;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j9;
                                                                                vinfos[5].indices[0] = _ij9[0];
                                                                                vinfos[5].indices[1] = _ij9[1];
                                                                                vinfos[5].maxsolutions = _nj9;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j10;
                                                                                vinfos[6].indices[0] = _ij10[0];
                                                                                vinfos[6].indices[1] = _ij10[1];
                                                                                vinfos[6].maxsolutions = _nj10;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      {
                                                                        IkReal j8array[1], cj8array[1], sj8array[1];
                                                                        bool j8valid[1] = { false };
                                                                        _nj8 = 1;
                                                                        CheckValue<IkReal> x687 =
                                                                            IKPowWithIntegerCheck(IKsign(new_r11), -1);
                                                                        if (!x687.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x688 =
                                                                            IKatan2WithCheck(IkReal(((-1.0) * sj10)),
                                                                                             IkReal(((-1.0) * cj10)),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x688.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        j8array[0] =
                                                                            ((-1.5707963267949) +
                                                                             (((1.5707963267949) * (x687.value))) +
                                                                             (x688.value));
                                                                        sj8array[0] = IKsin(j8array[0]);
                                                                        cj8array[0] = IKcos(j8array[0]);
                                                                        if (j8array[0] > IKPI)
                                                                        {
                                                                          j8array[0] -= IK2PI;
                                                                        }
                                                                        else if (j8array[0] < -IKPI)
                                                                        {
                                                                          j8array[0] += IK2PI;
                                                                        }
                                                                        j8valid[0] = true;
                                                                        for (int ij8 = 0; ij8 < 1; ++ij8)
                                                                        {
                                                                          if (!j8valid[ij8])
                                                                          {
                                                                            continue;
                                                                          }
                                                                          _ij8[0] = ij8;
                                                                          _ij8[1] = -1;
                                                                          for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                                          {
                                                                            if (j8valid[iij8] &&
                                                                                IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj8array[ij8] - sj8array[iij8]) <
                                                                                    IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                              j8valid[iij8] = false;
                                                                              _ij8[1] = iij8;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j8 = j8array[ij8];
                                                                          cj8 = cj8array[ij8];
                                                                          sj8 = sj8array[ij8];
                                                                          {
                                                                            IkReal evalcond[7];
                                                                            IkReal x689 = IKsin(j8);
                                                                            IkReal x690 = IKcos(j8);
                                                                            IkReal x691 = ((1.0) * cj10);
                                                                            IkReal x692 = (sj10 * x689);
                                                                            evalcond[0] = (sj10 + ((new_r11 * x689)));
                                                                            evalcond[1] = (((new_r11 * x690)) + cj10);
                                                                            evalcond[2] =
                                                                                ((((-1.0) * new_r00 * x689)) + sj10);
                                                                            evalcond[3] = ((((-1.0) * x691)) +
                                                                                           ((new_r00 * x690)));
                                                                            evalcond[4] =
                                                                                (((cj10 * x690)) + x692 + new_r11);
                                                                            evalcond[5] = ((((-1.0) * x689 * x691)) +
                                                                                           ((sj10 * x690)));
                                                                            evalcond[6] = ((((-1.0) * x690 * x691)) +
                                                                                           new_r00 + (((-1.0) * x692)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 17;
                                                                            vinfos[0].foffset = j2;
                                                                            vinfos[0].indices[0] = _ij2[0];
                                                                            vinfos[0].indices[1] = _ij2[1];
                                                                            vinfos[0].maxsolutions = _nj2;
                                                                            vinfos[1].jointtype = 17;
                                                                            vinfos[1].foffset = j3;
                                                                            vinfos[1].indices[0] = _ij3[0];
                                                                            vinfos[1].indices[1] = _ij3[1];
                                                                            vinfos[1].maxsolutions = _nj3;
                                                                            vinfos[2].jointtype = 17;
                                                                            vinfos[2].foffset = j4;
                                                                            vinfos[2].indices[0] = _ij4[0];
                                                                            vinfos[2].indices[1] = _ij4[1];
                                                                            vinfos[2].maxsolutions = _nj4;
                                                                            vinfos[3].jointtype = 17;
                                                                            vinfos[3].foffset = j5;
                                                                            vinfos[3].indices[0] = _ij5[0];
                                                                            vinfos[3].indices[1] = _ij5[1];
                                                                            vinfos[3].maxsolutions = _nj5;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j8;
                                                                            vinfos[4].indices[0] = _ij8[0];
                                                                            vinfos[4].indices[1] = _ij8[1];
                                                                            vinfos[4].maxsolutions = _nj8;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j9;
                                                                            vinfos[5].indices[0] = _ij9[0];
                                                                            vinfos[5].indices[1] = _ij9[1];
                                                                            vinfos[5].maxsolutions = _nj9;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j10;
                                                                            vinfos[6].indices[0] = _ij10[0];
                                                                            vinfos[6].indices[1] = _ij10[1];
                                                                            vinfos[6].maxsolutions = _nj10;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement)
                                                              {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  if (1)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    continue;  // branch miss [j8]
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {}
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            {
                                              IkReal j8array[1], cj8array[1], sj8array[1];
                                              bool j8valid[1] = { false };
                                              _nj8 = 1;
                                              CheckValue<IkReal> x693 = IKatan2WithCheck(
                                                  IkReal(((-1.0) + (cj10 * cj10) + (new_r01 * new_r01))),
                                                  IkReal(((((-1.0) * cj10 * sj10)) + (((-1.0) * new_r01 * new_r11)))),
                                                  IKFAST_ATAN2_MAGTHRESH);
                                              if (!x693.valid)
                                              {
                                                continue;
                                              }
                                              CheckValue<IkReal> x694 = IKPowWithIntegerCheck(
                                                  IKsign((((cj10 * new_r01)) + ((new_r11 * sj10)))), -1);
                                              if (!x694.valid)
                                              {
                                                continue;
                                              }
                                              j8array[0] = ((-1.5707963267949) + (x693.value) +
                                                            (((1.5707963267949) * (x694.value))));
                                              sj8array[0] = IKsin(j8array[0]);
                                              cj8array[0] = IKcos(j8array[0]);
                                              if (j8array[0] > IKPI)
                                              {
                                                j8array[0] -= IK2PI;
                                              }
                                              else if (j8array[0] < -IKPI)
                                              {
                                                j8array[0] += IK2PI;
                                              }
                                              j8valid[0] = true;
                                              for (int ij8 = 0; ij8 < 1; ++ij8)
                                              {
                                                if (!j8valid[ij8])
                                                {
                                                  continue;
                                                }
                                                _ij8[0] = ij8;
                                                _ij8[1] = -1;
                                                for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                                {
                                                  if (j8valid[iij8] &&
                                                      IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j8valid[iij8] = false;
                                                    _ij8[1] = iij8;
                                                    break;
                                                  }
                                                }
                                                j8 = j8array[ij8];
                                                cj8 = cj8array[ij8];
                                                sj8 = sj8array[ij8];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x695 = IKcos(j8);
                                                  IkReal x696 = IKsin(j8);
                                                  IkReal x697 = ((1.0) * cj10);
                                                  IkReal x698 = (sj10 * x695);
                                                  IkReal x699 = (sj10 * x696);
                                                  IkReal x700 = ((1.0) * x696);
                                                  IkReal x701 = (x696 * x697);
                                                  evalcond[0] = (((new_r11 * x696)) + sj10 + ((new_r01 * x695)));
                                                  evalcond[1] = (((cj10 * x695)) + x699 + new_r11);
                                                  evalcond[2] =
                                                      (((new_r10 * x695)) + sj10 + (((-1.0) * new_r00 * x700)));
                                                  evalcond[3] =
                                                      (((new_r11 * x695)) + cj10 + (((-1.0) * new_r01 * x700)));
                                                  evalcond[4] = ((((-1.0) * x701)) + x698 + new_r01);
                                                  evalcond[5] = ((((-1.0) * x701)) + x698 + new_r10);
                                                  evalcond[6] =
                                                      (((new_r10 * x696)) + (((-1.0) * x697)) + ((new_r00 * x695)));
                                                  evalcond[7] =
                                                      ((((-1.0) * x695 * x697)) + new_r00 + (((-1.0) * x699)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j2;
                                                  vinfos[0].indices[0] = _ij2[0];
                                                  vinfos[0].indices[1] = _ij2[1];
                                                  vinfos[0].maxsolutions = _nj2;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j3;
                                                  vinfos[1].indices[0] = _ij3[0];
                                                  vinfos[1].indices[1] = _ij3[1];
                                                  vinfos[1].maxsolutions = _nj3;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j4;
                                                  vinfos[2].indices[0] = _ij4[0];
                                                  vinfos[2].indices[1] = _ij4[1];
                                                  vinfos[2].maxsolutions = _nj4;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j5;
                                                  vinfos[3].indices[0] = _ij5[0];
                                                  vinfos[3].indices[1] = _ij5[1];
                                                  vinfos[3].maxsolutions = _nj5;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j8;
                                                  vinfos[4].indices[0] = _ij8[0];
                                                  vinfos[4].indices[1] = _ij8[1];
                                                  vinfos[4].maxsolutions = _nj8;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j9;
                                                  vinfos[5].indices[0] = _ij9[0];
                                                  vinfos[5].indices[1] = _ij9[1];
                                                  vinfos[5].maxsolutions = _nj9;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j10;
                                                  vinfos[6].indices[0] = _ij10[0];
                                                  vinfos[6].indices[1] = _ij10[1];
                                                  vinfos[6].maxsolutions = _nj10;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        {
                                          IkReal j8array[1], cj8array[1], sj8array[1];
                                          bool j8valid[1] = { false };
                                          _nj8 = 1;
                                          IkReal x702 = ((1.0) * sj10);
                                          CheckValue<IkReal> x703 = IKatan2WithCheck(
                                              IkReal((((cj10 * new_r01)) + (((-1.0) * new_r11 * x702)))),
                                              IkReal(((((-1.0) * cj10 * new_r11)) + (((-1.0) * new_r01 * x702)))),
                                              IKFAST_ATAN2_MAGTHRESH);
                                          if (!x703.valid)
                                          {
                                            continue;
                                          }
                                          CheckValue<IkReal> x704 = IKPowWithIntegerCheck(
                                              IKsign(((new_r01 * new_r01) + (new_r11 * new_r11))), -1);
                                          if (!x704.valid)
                                          {
                                            continue;
                                          }
                                          j8array[0] = ((-1.5707963267949) + (x703.value) +
                                                        (((1.5707963267949) * (x704.value))));
                                          sj8array[0] = IKsin(j8array[0]);
                                          cj8array[0] = IKcos(j8array[0]);
                                          if (j8array[0] > IKPI)
                                          {
                                            j8array[0] -= IK2PI;
                                          }
                                          else if (j8array[0] < -IKPI)
                                          {
                                            j8array[0] += IK2PI;
                                          }
                                          j8valid[0] = true;
                                          for (int ij8 = 0; ij8 < 1; ++ij8)
                                          {
                                            if (!j8valid[ij8])
                                            {
                                              continue;
                                            }
                                            _ij8[0] = ij8;
                                            _ij8[1] = -1;
                                            for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                            {
                                              if (j8valid[iij8] &&
                                                  IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j8valid[iij8] = false;
                                                _ij8[1] = iij8;
                                                break;
                                              }
                                            }
                                            j8 = j8array[ij8];
                                            cj8 = cj8array[ij8];
                                            sj8 = sj8array[ij8];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x705 = IKcos(j8);
                                              IkReal x706 = IKsin(j8);
                                              IkReal x707 = ((1.0) * cj10);
                                              IkReal x708 = (sj10 * x705);
                                              IkReal x709 = (sj10 * x706);
                                              IkReal x710 = ((1.0) * x706);
                                              IkReal x711 = (x706 * x707);
                                              evalcond[0] = (((new_r01 * x705)) + sj10 + ((new_r11 * x706)));
                                              evalcond[1] = (x709 + new_r11 + ((cj10 * x705)));
                                              evalcond[2] = (sj10 + ((new_r10 * x705)) + (((-1.0) * new_r00 * x710)));
                                              evalcond[3] = (cj10 + ((new_r11 * x705)) + (((-1.0) * new_r01 * x710)));
                                              evalcond[4] = ((((-1.0) * x711)) + x708 + new_r01);
                                              evalcond[5] = ((((-1.0) * x711)) + x708 + new_r10);
                                              evalcond[6] =
                                                  (((new_r00 * x705)) + (((-1.0) * x707)) + ((new_r10 * x706)));
                                              evalcond[7] = ((((-1.0) * x709)) + (((-1.0) * x705 * x707)) + new_r00);
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 17;
                                              vinfos[0].foffset = j2;
                                              vinfos[0].indices[0] = _ij2[0];
                                              vinfos[0].indices[1] = _ij2[1];
                                              vinfos[0].maxsolutions = _nj2;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j3;
                                              vinfos[1].indices[0] = _ij3[0];
                                              vinfos[1].indices[1] = _ij3[1];
                                              vinfos[1].maxsolutions = _nj3;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j4;
                                              vinfos[2].indices[0] = _ij4[0];
                                              vinfos[2].indices[1] = _ij4[1];
                                              vinfos[2].maxsolutions = _nj4;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j5;
                                              vinfos[3].indices[0] = _ij5[0];
                                              vinfos[3].indices[1] = _ij5[1];
                                              vinfos[3].maxsolutions = _nj5;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j8;
                                              vinfos[4].indices[0] = _ij8[0];
                                              vinfos[4].indices[1] = _ij8[1];
                                              vinfos[4].maxsolutions = _nj8;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j9;
                                              vinfos[5].indices[0] = _ij9[0];
                                              vinfos[5].indices[1] = _ij9[1];
                                              vinfos[5].maxsolutions = _nj9;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j10;
                                              vinfos[6].indices[0] = _ij10[0];
                                              vinfos[6].indices[1] = _ij10[1];
                                              vinfos[6].maxsolutions = _nj10;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    {
                                      IkReal j8array[1], cj8array[1], sj8array[1];
                                      bool j8valid[1] = { false };
                                      _nj8 = 1;
                                      IkReal x712 = ((1.0) * sj10);
                                      CheckValue<IkReal> x713 = IKPowWithIntegerCheck(
                                          IKsign((((new_r10 * new_r11)) + ((new_r00 * new_r01)))), -1);
                                      if (!x713.valid)
                                      {
                                        continue;
                                      }
                                      CheckValue<IkReal> x714 = IKatan2WithCheck(
                                          IkReal((((new_r01 * sj10)) + (((-1.0) * new_r10 * x712)))),
                                          IkReal(((((-1.0) * new_r11 * x712)) + (((-1.0) * new_r00 * x712)))),
                                          IKFAST_ATAN2_MAGTHRESH);
                                      if (!x714.valid)
                                      {
                                        continue;
                                      }
                                      j8array[0] =
                                          ((-1.5707963267949) + (((1.5707963267949) * (x713.value))) + (x714.value));
                                      sj8array[0] = IKsin(j8array[0]);
                                      cj8array[0] = IKcos(j8array[0]);
                                      if (j8array[0] > IKPI)
                                      {
                                        j8array[0] -= IK2PI;
                                      }
                                      else if (j8array[0] < -IKPI)
                                      {
                                        j8array[0] += IK2PI;
                                      }
                                      j8valid[0] = true;
                                      for (int ij8 = 0; ij8 < 1; ++ij8)
                                      {
                                        if (!j8valid[ij8])
                                        {
                                          continue;
                                        }
                                        _ij8[0] = ij8;
                                        _ij8[1] = -1;
                                        for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                        {
                                          if (j8valid[iij8] &&
                                              IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                              IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                          {
                                            j8valid[iij8] = false;
                                            _ij8[1] = iij8;
                                            break;
                                          }
                                        }
                                        j8 = j8array[ij8];
                                        cj8 = cj8array[ij8];
                                        sj8 = sj8array[ij8];
                                        {
                                          IkReal evalcond[8];
                                          IkReal x715 = IKcos(j8);
                                          IkReal x716 = IKsin(j8);
                                          IkReal x717 = ((1.0) * cj10);
                                          IkReal x718 = (sj10 * x715);
                                          IkReal x719 = (sj10 * x716);
                                          IkReal x720 = ((1.0) * x716);
                                          IkReal x721 = (x716 * x717);
                                          evalcond[0] = (((new_r01 * x715)) + sj10 + ((new_r11 * x716)));
                                          evalcond[1] = (((cj10 * x715)) + x719 + new_r11);
                                          evalcond[2] = (sj10 + ((new_r10 * x715)) + (((-1.0) * new_r00 * x720)));
                                          evalcond[3] = (cj10 + ((new_r11 * x715)) + (((-1.0) * new_r01 * x720)));
                                          evalcond[4] = ((((-1.0) * x721)) + x718 + new_r01);
                                          evalcond[5] = ((((-1.0) * x721)) + x718 + new_r10);
                                          evalcond[6] = (((new_r00 * x715)) + (((-1.0) * x717)) + ((new_r10 * x716)));
                                          evalcond[7] = ((((-1.0) * x719)) + new_r00 + (((-1.0) * x715 * x717)));
                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                          {
                                            continue;
                                          }
                                        }

                                        {
                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                          vinfos[0].jointtype = 17;
                                          vinfos[0].foffset = j2;
                                          vinfos[0].indices[0] = _ij2[0];
                                          vinfos[0].indices[1] = _ij2[1];
                                          vinfos[0].maxsolutions = _nj2;
                                          vinfos[1].jointtype = 17;
                                          vinfos[1].foffset = j3;
                                          vinfos[1].indices[0] = _ij3[0];
                                          vinfos[1].indices[1] = _ij3[1];
                                          vinfos[1].maxsolutions = _nj3;
                                          vinfos[2].jointtype = 17;
                                          vinfos[2].foffset = j4;
                                          vinfos[2].indices[0] = _ij4[0];
                                          vinfos[2].indices[1] = _ij4[1];
                                          vinfos[2].maxsolutions = _nj4;
                                          vinfos[3].jointtype = 17;
                                          vinfos[3].foffset = j5;
                                          vinfos[3].indices[0] = _ij5[0];
                                          vinfos[3].indices[1] = _ij5[1];
                                          vinfos[3].maxsolutions = _nj5;
                                          vinfos[4].jointtype = 1;
                                          vinfos[4].foffset = j8;
                                          vinfos[4].indices[0] = _ij8[0];
                                          vinfos[4].indices[1] = _ij8[1];
                                          vinfos[4].maxsolutions = _nj8;
                                          vinfos[5].jointtype = 1;
                                          vinfos[5].foffset = j9;
                                          vinfos[5].indices[0] = _ij9[0];
                                          vinfos[5].indices[1] = _ij9[1];
                                          vinfos[5].maxsolutions = _nj9;
                                          vinfos[6].jointtype = 1;
                                          vinfos[6].foffset = j10;
                                          vinfos[6].indices[0] = _ij10[0];
                                          vinfos[6].indices[1] = _ij10[1];
                                          vinfos[6].maxsolutions = _nj10;
                                          std::vector<int> vfree(0);
                                          solutions.AddSolution(vinfos, vfree);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement)
                            {
                              bool bgotonextstatement = true;
                              do
                              {
                                evalcond[0] = ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j9)))),
                                                       6.28318530717959)));
                                evalcond[1] = new_r12;
                                evalcond[2] = new_r02;
                                evalcond[3] = new_r20;
                                evalcond[4] = new_r21;
                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                    IKabs(evalcond[1]) < 0.0000050000000000 &&
                                    IKabs(evalcond[2]) < 0.0000050000000000 &&
                                    IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                {
                                  bgotonextstatement = false;
                                  {
                                    IkReal j8array[1], cj8array[1], sj8array[1];
                                    bool j8valid[1] = { false };
                                    _nj8 = 1;
                                    IkReal x722 = ((1.0) * sj10);
                                    if (IKabs(((((-1.0) * cj10 * new_r01)) + (((-1.0) * new_r11 * x722)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((((cj10 * new_r11)) + (((-1.0) * new_r01 * x722)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr(((((-1.0) * cj10 * new_r01)) + (((-1.0) * new_r11 * x722)))) +
                                              IKsqr((((cj10 * new_r11)) + (((-1.0) * new_r01 * x722)))) - 1) <=
                                            IKFAST_SINCOS_THRESH)
                                      continue;
                                    j8array[0] = IKatan2(((((-1.0) * cj10 * new_r01)) + (((-1.0) * new_r11 * x722))),
                                                         (((cj10 * new_r11)) + (((-1.0) * new_r01 * x722))));
                                    sj8array[0] = IKsin(j8array[0]);
                                    cj8array[0] = IKcos(j8array[0]);
                                    if (j8array[0] > IKPI)
                                    {
                                      j8array[0] -= IK2PI;
                                    }
                                    else if (j8array[0] < -IKPI)
                                    {
                                      j8array[0] += IK2PI;
                                    }
                                    j8valid[0] = true;
                                    for (int ij8 = 0; ij8 < 1; ++ij8)
                                    {
                                      if (!j8valid[ij8])
                                      {
                                        continue;
                                      }
                                      _ij8[0] = ij8;
                                      _ij8[1] = -1;
                                      for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                                      {
                                        if (j8valid[iij8] &&
                                            IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j8valid[iij8] = false;
                                          _ij8[1] = iij8;
                                          break;
                                        }
                                      }
                                      j8 = j8array[ij8];
                                      cj8 = cj8array[ij8];
                                      sj8 = sj8array[ij8];
                                      {
                                        IkReal evalcond[8];
                                        IkReal x723 = IKsin(j8);
                                        IkReal x724 = IKcos(j8);
                                        IkReal x725 = ((1.0) * cj10);
                                        IkReal x726 = ((1.0) * sj10);
                                        IkReal x727 = (sj10 * x723);
                                        IkReal x728 = ((1.0) * x723);
                                        IkReal x729 = (x724 * x725);
                                        evalcond[0] = (((new_r01 * x724)) + sj10 + ((new_r11 * x723)));
                                        evalcond[1] = (((cj10 * x723)) + new_r01 + ((sj10 * x724)));
                                        evalcond[2] = ((((-1.0) * x729)) + x727 + new_r11);
                                        evalcond[3] = ((((-1.0) * x729)) + x727 + new_r00);
                                        evalcond[4] = (((new_r00 * x724)) + (((-1.0) * x725)) + ((new_r10 * x723)));
                                        evalcond[5] = ((((-1.0) * x724 * x726)) + (((-1.0) * x723 * x725)) + new_r10);
                                        evalcond[6] =
                                            ((((-1.0) * x726)) + (((-1.0) * new_r00 * x728)) + ((new_r10 * x724)));
                                        evalcond[7] =
                                            ((((-1.0) * x725)) + ((new_r11 * x724)) + (((-1.0) * new_r01 * x728)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 17;
                                        vinfos[0].foffset = j2;
                                        vinfos[0].indices[0] = _ij2[0];
                                        vinfos[0].indices[1] = _ij2[1];
                                        vinfos[0].maxsolutions = _nj2;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j3;
                                        vinfos[1].indices[0] = _ij3[0];
                                        vinfos[1].indices[1] = _ij3[1];
                                        vinfos[1].maxsolutions = _nj3;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j4;
                                        vinfos[2].indices[0] = _ij4[0];
                                        vinfos[2].indices[1] = _ij4[1];
                                        vinfos[2].maxsolutions = _nj4;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j5;
                                        vinfos[3].indices[0] = _ij5[0];
                                        vinfos[3].indices[1] = _ij5[1];
                                        vinfos[3].maxsolutions = _nj5;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j8;
                                        vinfos[4].indices[0] = _ij8[0];
                                        vinfos[4].indices[1] = _ij8[1];
                                        vinfos[4].maxsolutions = _nj8;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j9;
                                        vinfos[5].indices[0] = _ij9[0];
                                        vinfos[5].indices[1] = _ij9[1];
                                        vinfos[5].maxsolutions = _nj9;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j10;
                                        vinfos[6].indices[0] = _ij10[0];
                                        vinfos[6].indices[1] = _ij10[1];
                                        vinfos[6].maxsolutions = _nj10;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              } while (0);
                              if (bgotonextstatement)
                              {
                                bool bgotonextstatement = true;
                                do
                                {
                                  evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                  {
                                    bgotonextstatement = false;
                                    {
                                      IkReal j8eval[1];
                                      new_r02 = 0;
                                      new_r12 = 0;
                                      new_r20 = 0;
                                      new_r21 = 0;
                                      j8eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                      if (IKabs(j8eval[0]) < 0.0000010000000000)
                                      {
                                        {
                                          IkReal j8eval[1];
                                          new_r02 = 0;
                                          new_r12 = 0;
                                          new_r20 = 0;
                                          new_r21 = 0;
                                          j8eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                          if (IKabs(j8eval[0]) < 0.0000010000000000)
                                          {
                                            {
                                              IkReal j8eval[1];
                                              new_r02 = 0;
                                              new_r12 = 0;
                                              new_r20 = 0;
                                              new_r21 = 0;
                                              j8eval[0] = ((IKabs((new_r10 * new_r22))) + (IKabs((new_r00 * new_r22))));
                                              if (IKabs(j8eval[0]) < 0.0000010000000000)
                                              {
                                                continue;  // no branches [j8]
                                              }
                                              else
                                              {
                                                {
                                                  IkReal j8array[2], cj8array[2], sj8array[2];
                                                  bool j8valid[2] = { false };
                                                  _nj8 = 2;
                                                  CheckValue<IkReal> x731 =
                                                      IKatan2WithCheck(IkReal((new_r10 * new_r22)),
                                                                       IkReal(((-1.0) * new_r00 * new_r22)),
                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x731.valid)
                                                  {
                                                    continue;
                                                  }
                                                  IkReal x730 = x731.value;
                                                  j8array[0] = ((-1.0) * x730);
                                                  sj8array[0] = IKsin(j8array[0]);
                                                  cj8array[0] = IKcos(j8array[0]);
                                                  j8array[1] = ((3.14159265358979) + (((-1.0) * x730)));
                                                  sj8array[1] = IKsin(j8array[1]);
                                                  cj8array[1] = IKcos(j8array[1]);
                                                  if (j8array[0] > IKPI)
                                                  {
                                                    j8array[0] -= IK2PI;
                                                  }
                                                  else if (j8array[0] < -IKPI)
                                                  {
                                                    j8array[0] += IK2PI;
                                                  }
                                                  j8valid[0] = true;
                                                  if (j8array[1] > IKPI)
                                                  {
                                                    j8array[1] -= IK2PI;
                                                  }
                                                  else if (j8array[1] < -IKPI)
                                                  {
                                                    j8array[1] += IK2PI;
                                                  }
                                                  j8valid[1] = true;
                                                  for (int ij8 = 0; ij8 < 2; ++ij8)
                                                  {
                                                    if (!j8valid[ij8])
                                                    {
                                                      continue;
                                                    }
                                                    _ij8[0] = ij8;
                                                    _ij8[1] = -1;
                                                    for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                    {
                                                      if (j8valid[iij8] &&
                                                          IKabs(cj8array[ij8] - cj8array[iij8]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j8valid[iij8] = false;
                                                        _ij8[1] = iij8;
                                                        break;
                                                      }
                                                    }
                                                    j8 = j8array[ij8];
                                                    cj8 = cj8array[ij8];
                                                    sj8 = sj8array[ij8];
                                                    {
                                                      IkReal evalcond[5];
                                                      IkReal x732 = IKsin(j8);
                                                      IkReal x733 = IKcos(j8);
                                                      IkReal x734 = (new_r11 * x733);
                                                      IkReal x735 = ((1.0) * x732);
                                                      evalcond[0] = (((new_r01 * x733)) + ((new_r11 * x732)));
                                                      evalcond[1] = (((new_r00 * x733)) + ((new_r10 * x732)));
                                                      evalcond[2] = ((((-1.0) * new_r00 * x735)) + ((new_r10 * x733)));
                                                      evalcond[3] = (x734 + (((-1.0) * new_r01 * x735)));
                                                      evalcond[4] =
                                                          ((((-1.0) * new_r01 * new_r22 * x735)) + ((new_r22 * x734)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 17;
                                                      vinfos[0].foffset = j2;
                                                      vinfos[0].indices[0] = _ij2[0];
                                                      vinfos[0].indices[1] = _ij2[1];
                                                      vinfos[0].maxsolutions = _nj2;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j3;
                                                      vinfos[1].indices[0] = _ij3[0];
                                                      vinfos[1].indices[1] = _ij3[1];
                                                      vinfos[1].maxsolutions = _nj3;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j4;
                                                      vinfos[2].indices[0] = _ij4[0];
                                                      vinfos[2].indices[1] = _ij4[1];
                                                      vinfos[2].maxsolutions = _nj4;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j5;
                                                      vinfos[3].indices[0] = _ij5[0];
                                                      vinfos[3].indices[1] = _ij5[1];
                                                      vinfos[3].maxsolutions = _nj5;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j8;
                                                      vinfos[4].indices[0] = _ij8[0];
                                                      vinfos[4].indices[1] = _ij8[1];
                                                      vinfos[4].maxsolutions = _nj8;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j9;
                                                      vinfos[5].indices[0] = _ij9[0];
                                                      vinfos[5].indices[1] = _ij9[1];
                                                      vinfos[5].maxsolutions = _nj9;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j10;
                                                      vinfos[6].indices[0] = _ij10[0];
                                                      vinfos[6].indices[1] = _ij10[1];
                                                      vinfos[6].maxsolutions = _nj10;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            {
                                              IkReal j8array[2], cj8array[2], sj8array[2];
                                              bool j8valid[2] = { false };
                                              _nj8 = 2;
                                              CheckValue<IkReal> x737 = IKatan2WithCheck(
                                                  IkReal(new_r00), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                              if (!x737.valid)
                                              {
                                                continue;
                                              }
                                              IkReal x736 = x737.value;
                                              j8array[0] = ((-1.0) * x736);
                                              sj8array[0] = IKsin(j8array[0]);
                                              cj8array[0] = IKcos(j8array[0]);
                                              j8array[1] = ((3.14159265358979) + (((-1.0) * x736)));
                                              sj8array[1] = IKsin(j8array[1]);
                                              cj8array[1] = IKcos(j8array[1]);
                                              if (j8array[0] > IKPI)
                                              {
                                                j8array[0] -= IK2PI;
                                              }
                                              else if (j8array[0] < -IKPI)
                                              {
                                                j8array[0] += IK2PI;
                                              }
                                              j8valid[0] = true;
                                              if (j8array[1] > IKPI)
                                              {
                                                j8array[1] -= IK2PI;
                                              }
                                              else if (j8array[1] < -IKPI)
                                              {
                                                j8array[1] += IK2PI;
                                              }
                                              j8valid[1] = true;
                                              for (int ij8 = 0; ij8 < 2; ++ij8)
                                              {
                                                if (!j8valid[ij8])
                                                {
                                                  continue;
                                                }
                                                _ij8[0] = ij8;
                                                _ij8[1] = -1;
                                                for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                                {
                                                  if (j8valid[iij8] &&
                                                      IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j8valid[iij8] = false;
                                                    _ij8[1] = iij8;
                                                    break;
                                                  }
                                                }
                                                j8 = j8array[ij8];
                                                cj8 = cj8array[ij8];
                                                sj8 = sj8array[ij8];
                                                {
                                                  IkReal evalcond[5];
                                                  IkReal x738 = IKcos(j8);
                                                  IkReal x739 = IKsin(j8);
                                                  IkReal x740 = (new_r10 * x738);
                                                  IkReal x741 = (new_r11 * x738);
                                                  IkReal x742 = ((1.0) * x739);
                                                  evalcond[0] = (((new_r01 * x738)) + ((new_r11 * x739)));
                                                  evalcond[1] = ((((-1.0) * new_r00 * x742)) + x740);
                                                  evalcond[2] = ((((-1.0) * new_r01 * x742)) + x741);
                                                  evalcond[3] =
                                                      ((((-1.0) * new_r00 * new_r22 * x742)) + ((new_r22 * x740)));
                                                  evalcond[4] =
                                                      ((((-1.0) * new_r01 * new_r22 * x742)) + ((new_r22 * x741)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j2;
                                                  vinfos[0].indices[0] = _ij2[0];
                                                  vinfos[0].indices[1] = _ij2[1];
                                                  vinfos[0].maxsolutions = _nj2;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j3;
                                                  vinfos[1].indices[0] = _ij3[0];
                                                  vinfos[1].indices[1] = _ij3[1];
                                                  vinfos[1].maxsolutions = _nj3;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j4;
                                                  vinfos[2].indices[0] = _ij4[0];
                                                  vinfos[2].indices[1] = _ij4[1];
                                                  vinfos[2].maxsolutions = _nj4;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j5;
                                                  vinfos[3].indices[0] = _ij5[0];
                                                  vinfos[3].indices[1] = _ij5[1];
                                                  vinfos[3].maxsolutions = _nj5;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j8;
                                                  vinfos[4].indices[0] = _ij8[0];
                                                  vinfos[4].indices[1] = _ij8[1];
                                                  vinfos[4].maxsolutions = _nj8;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j9;
                                                  vinfos[5].indices[0] = _ij9[0];
                                                  vinfos[5].indices[1] = _ij9[1];
                                                  vinfos[5].maxsolutions = _nj9;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j10;
                                                  vinfos[6].indices[0] = _ij10[0];
                                                  vinfos[6].indices[1] = _ij10[1];
                                                  vinfos[6].maxsolutions = _nj10;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        {
                                          IkReal j8array[2], cj8array[2], sj8array[2];
                                          bool j8valid[2] = { false };
                                          _nj8 = 2;
                                          CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11),
                                                                                     IKFAST_ATAN2_MAGTHRESH);
                                          if (!x744.valid)
                                          {
                                            continue;
                                          }
                                          IkReal x743 = x744.value;
                                          j8array[0] = ((-1.0) * x743);
                                          sj8array[0] = IKsin(j8array[0]);
                                          cj8array[0] = IKcos(j8array[0]);
                                          j8array[1] = ((3.14159265358979) + (((-1.0) * x743)));
                                          sj8array[1] = IKsin(j8array[1]);
                                          cj8array[1] = IKcos(j8array[1]);
                                          if (j8array[0] > IKPI)
                                          {
                                            j8array[0] -= IK2PI;
                                          }
                                          else if (j8array[0] < -IKPI)
                                          {
                                            j8array[0] += IK2PI;
                                          }
                                          j8valid[0] = true;
                                          if (j8array[1] > IKPI)
                                          {
                                            j8array[1] -= IK2PI;
                                          }
                                          else if (j8array[1] < -IKPI)
                                          {
                                            j8array[1] += IK2PI;
                                          }
                                          j8valid[1] = true;
                                          for (int ij8 = 0; ij8 < 2; ++ij8)
                                          {
                                            if (!j8valid[ij8])
                                            {
                                              continue;
                                            }
                                            _ij8[0] = ij8;
                                            _ij8[1] = -1;
                                            for (int iij8 = ij8 + 1; iij8 < 2; ++iij8)
                                            {
                                              if (j8valid[iij8] &&
                                                  IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j8valid[iij8] = false;
                                                _ij8[1] = iij8;
                                                break;
                                              }
                                            }
                                            j8 = j8array[ij8];
                                            cj8 = cj8array[ij8];
                                            sj8 = sj8array[ij8];
                                            {
                                              IkReal evalcond[5];
                                              IkReal x745 = IKcos(j8);
                                              IkReal x746 = IKsin(j8);
                                              IkReal x747 = (new_r10 * x745);
                                              IkReal x748 = (new_r11 * x745);
                                              IkReal x749 = ((1.0) * x746);
                                              evalcond[0] = (((new_r10 * x746)) + ((new_r00 * x745)));
                                              evalcond[1] = ((((-1.0) * new_r00 * x749)) + x747);
                                              evalcond[2] = ((((-1.0) * new_r01 * x749)) + x748);
                                              evalcond[3] =
                                                  ((((-1.0) * new_r00 * new_r22 * x749)) + ((new_r22 * x747)));
                                              evalcond[4] =
                                                  ((((-1.0) * new_r01 * new_r22 * x749)) + ((new_r22 * x748)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 17;
                                              vinfos[0].foffset = j2;
                                              vinfos[0].indices[0] = _ij2[0];
                                              vinfos[0].indices[1] = _ij2[1];
                                              vinfos[0].maxsolutions = _nj2;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j3;
                                              vinfos[1].indices[0] = _ij3[0];
                                              vinfos[1].indices[1] = _ij3[1];
                                              vinfos[1].maxsolutions = _nj3;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j4;
                                              vinfos[2].indices[0] = _ij4[0];
                                              vinfos[2].indices[1] = _ij4[1];
                                              vinfos[2].maxsolutions = _nj4;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j5;
                                              vinfos[3].indices[0] = _ij5[0];
                                              vinfos[3].indices[1] = _ij5[1];
                                              vinfos[3].maxsolutions = _nj5;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j8;
                                              vinfos[4].indices[0] = _ij8[0];
                                              vinfos[4].indices[1] = _ij8[1];
                                              vinfos[4].maxsolutions = _nj8;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j9;
                                              vinfos[5].indices[0] = _ij9[0];
                                              vinfos[5].indices[1] = _ij9[1];
                                              vinfos[5].maxsolutions = _nj9;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j10;
                                              vinfos[6].indices[0] = _ij10[0];
                                              vinfos[6].indices[1] = _ij10[1];
                                              vinfos[6].maxsolutions = _nj10;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                } while (0);
                                if (bgotonextstatement)
                                {
                                  bool bgotonextstatement = true;
                                  do
                                  {
                                    if (1)
                                    {
                                      bgotonextstatement = false;
                                      continue;  // branch miss [j8]
                                    }
                                  } while (0);
                                  if (bgotonextstatement) {}
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j8array[1], cj8array[1], sj8array[1];
                            bool j8valid[1] = { false };
                            _nj8 = 1;
                            CheckValue<IkReal> x751 = IKPowWithIntegerCheck(cj9, -1);
                            if (!x751.valid)
                            {
                              continue;
                            }
                            IkReal x750 = x751.value;
                            CheckValue<IkReal> x752 = IKPowWithIntegerCheck(new_r11, -1);
                            if (!x752.valid)
                            {
                              continue;
                            }
                            if (IKabs((x750 * (x752.value) * ((((new_r01 * new_r12)) + (((-1.0) * cj9 * sj10)))))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((-1.0) * new_r12 * x750)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(
                                    IKsqr((x750 * (x752.value) * ((((new_r01 * new_r12)) + (((-1.0) * cj9 * sj10)))))) +
                                    IKsqr(((-1.0) * new_r12 * x750)) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j8array[0] =
                                IKatan2((x750 * (x752.value) * ((((new_r01 * new_r12)) + (((-1.0) * cj9 * sj10))))),
                                        ((-1.0) * new_r12 * x750));
                            sj8array[0] = IKsin(j8array[0]);
                            cj8array[0] = IKcos(j8array[0]);
                            if (j8array[0] > IKPI)
                            {
                              j8array[0] -= IK2PI;
                            }
                            else if (j8array[0] < -IKPI)
                            {
                              j8array[0] += IK2PI;
                            }
                            j8valid[0] = true;
                            for (int ij8 = 0; ij8 < 1; ++ij8)
                            {
                              if (!j8valid[ij8])
                              {
                                continue;
                              }
                              _ij8[0] = ij8;
                              _ij8[1] = -1;
                              for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                              {
                                if (j8valid[iij8] && IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j8valid[iij8] = false;
                                  _ij8[1] = iij8;
                                  break;
                                }
                              }
                              j8 = j8array[ij8];
                              cj8 = cj8array[ij8];
                              sj8 = sj8array[ij8];
                              {
                                IkReal evalcond[18];
                                IkReal x753 = IKsin(j8);
                                IkReal x754 = IKcos(j8);
                                IkReal x755 = ((1.0) * cj10);
                                IkReal x756 = (sj10 * sj9);
                                IkReal x757 = (cj10 * sj9);
                                IkReal x758 = ((1.0) * x753);
                                IkReal x759 = (cj9 * x754);
                                IkReal x760 = (sj9 * x753);
                                IkReal x761 = (new_r10 * x754);
                                IkReal x762 = (sj9 * x754);
                                evalcond[0] = (x759 + new_r12);
                                evalcond[1] = ((((-1.0) * cj9 * x758)) + new_r02);
                                evalcond[2] = (((new_r12 * x753)) + ((new_r02 * x754)));
                                evalcond[3] = (((new_r11 * x753)) + sj10 + ((new_r01 * x754)));
                                evalcond[4] = (cj9 + (((-1.0) * new_r02 * x758)) + ((new_r12 * x754)));
                                evalcond[5] = (((sj10 * x753)) + new_r11 + ((x754 * x757)));
                                evalcond[6] = (((new_r00 * x754)) + ((new_r10 * x753)) + (((-1.0) * x755)));
                                evalcond[7] = (((sj10 * x754)) + (((-1.0) * x755 * x760)) + new_r01);
                                evalcond[8] = ((((-1.0) * x753 * x755)) + new_r10 + ((x754 * x756)));
                                evalcond[9] = ((((-1.0) * new_r00 * x758)) + x756 + x761);
                                evalcond[10] = ((((-1.0) * new_r01 * x758)) + ((new_r11 * x754)) + x757);
                                evalcond[11] = ((((-1.0) * x754 * x755)) + (((-1.0) * x756 * x758)) + new_r00);
                                evalcond[12] =
                                    (((new_r20 * sj9)) + (((-1.0) * cj9 * new_r00 * x758)) + ((new_r10 * x759)));
                                evalcond[13] =
                                    ((((-1.0) * cj9 * new_r01 * x758)) + ((new_r11 * x759)) + ((new_r21 * sj9)));
                                evalcond[14] = ((((-1.0) * new_r12 * x762)) + ((cj9 * new_r22)) + ((new_r02 * x760)));
                                evalcond[15] = ((1.0) + (((-1.0) * cj9 * new_r02 * x758)) + ((new_r22 * sj9)) +
                                                ((new_r12 * x759)));
                                evalcond[16] = (((cj9 * new_r20)) + ((new_r00 * x760)) + (((-1.0) * sj10)) +
                                                (((-1.0) * sj9 * x761)));
                                evalcond[17] = ((((-1.0) * new_r11 * x762)) + ((cj9 * new_r21)) + ((new_r01 * x760)) +
                                                (((-1.0) * x755)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 17;
                                vinfos[0].foffset = j2;
                                vinfos[0].indices[0] = _ij2[0];
                                vinfos[0].indices[1] = _ij2[1];
                                vinfos[0].maxsolutions = _nj2;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j3;
                                vinfos[1].indices[0] = _ij3[0];
                                vinfos[1].indices[1] = _ij3[1];
                                vinfos[1].maxsolutions = _nj3;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j4;
                                vinfos[2].indices[0] = _ij4[0];
                                vinfos[2].indices[1] = _ij4[1];
                                vinfos[2].maxsolutions = _nj4;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j5;
                                vinfos[3].indices[0] = _ij5[0];
                                vinfos[3].indices[1] = _ij5[1];
                                vinfos[3].maxsolutions = _nj5;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j8;
                                vinfos[4].indices[0] = _ij8[0];
                                vinfos[4].indices[1] = _ij8[1];
                                vinfos[4].maxsolutions = _nj8;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j9;
                                vinfos[5].indices[0] = _ij9[0];
                                vinfos[5].indices[1] = _ij9[1];
                                vinfos[5].maxsolutions = _nj9;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j10;
                                vinfos[6].indices[0] = _ij10[0];
                                vinfos[6].indices[1] = _ij10[1];
                                vinfos[6].maxsolutions = _nj10;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j8array[1], cj8array[1], sj8array[1];
                        bool j8valid[1] = { false };
                        _nj8 = 1;
                        CheckValue<IkReal> x763 = IKPowWithIntegerCheck(IKsign(cj9), -1);
                        if (!x763.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x764 =
                            IKatan2WithCheck(IkReal(new_r02), IkReal(((-1.0) * new_r12)), IKFAST_ATAN2_MAGTHRESH);
                        if (!x764.valid)
                        {
                          continue;
                        }
                        j8array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x763.value))) + (x764.value));
                        sj8array[0] = IKsin(j8array[0]);
                        cj8array[0] = IKcos(j8array[0]);
                        if (j8array[0] > IKPI)
                        {
                          j8array[0] -= IK2PI;
                        }
                        else if (j8array[0] < -IKPI)
                        {
                          j8array[0] += IK2PI;
                        }
                        j8valid[0] = true;
                        for (int ij8 = 0; ij8 < 1; ++ij8)
                        {
                          if (!j8valid[ij8])
                          {
                            continue;
                          }
                          _ij8[0] = ij8;
                          _ij8[1] = -1;
                          for (int iij8 = ij8 + 1; iij8 < 1; ++iij8)
                          {
                            if (j8valid[iij8] && IKabs(cj8array[ij8] - cj8array[iij8]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj8array[ij8] - sj8array[iij8]) < IKFAST_SOLUTION_THRESH)
                            {
                              j8valid[iij8] = false;
                              _ij8[1] = iij8;
                              break;
                            }
                          }
                          j8 = j8array[ij8];
                          cj8 = cj8array[ij8];
                          sj8 = sj8array[ij8];
                          {
                            IkReal evalcond[18];
                            IkReal x765 = IKsin(j8);
                            IkReal x766 = IKcos(j8);
                            IkReal x767 = ((1.0) * cj10);
                            IkReal x768 = (sj10 * sj9);
                            IkReal x769 = (cj10 * sj9);
                            IkReal x770 = ((1.0) * x765);
                            IkReal x771 = (cj9 * x766);
                            IkReal x772 = (sj9 * x765);
                            IkReal x773 = (new_r10 * x766);
                            IkReal x774 = (sj9 * x766);
                            evalcond[0] = (x771 + new_r12);
                            evalcond[1] = (new_r02 + (((-1.0) * cj9 * x770)));
                            evalcond[2] = (((new_r12 * x765)) + ((new_r02 * x766)));
                            evalcond[3] = (((new_r11 * x765)) + ((new_r01 * x766)) + sj10);
                            evalcond[4] = (cj9 + ((new_r12 * x766)) + (((-1.0) * new_r02 * x770)));
                            evalcond[5] = (((sj10 * x765)) + ((x766 * x769)) + new_r11);
                            evalcond[6] = (((new_r10 * x765)) + (((-1.0) * x767)) + ((new_r00 * x766)));
                            evalcond[7] = ((((-1.0) * x767 * x772)) + ((sj10 * x766)) + new_r01);
                            evalcond[8] = ((((-1.0) * x765 * x767)) + ((x766 * x768)) + new_r10);
                            evalcond[9] = ((((-1.0) * new_r00 * x770)) + x773 + x768);
                            evalcond[10] = (((new_r11 * x766)) + (((-1.0) * new_r01 * x770)) + x769);
                            evalcond[11] = ((((-1.0) * x768 * x770)) + (((-1.0) * x766 * x767)) + new_r00);
                            evalcond[12] = ((((-1.0) * cj9 * new_r00 * x770)) + ((new_r20 * sj9)) + ((new_r10 * x771)));
                            evalcond[13] = ((((-1.0) * cj9 * new_r01 * x770)) + ((new_r11 * x771)) + ((new_r21 * sj9)));
                            evalcond[14] = (((cj9 * new_r22)) + (((-1.0) * new_r12 * x774)) + ((new_r02 * x772)));
                            evalcond[15] =
                                ((1.0) + (((-1.0) * cj9 * new_r02 * x770)) + ((new_r12 * x771)) + ((new_r22 * sj9)));
                            evalcond[16] =
                                (((cj9 * new_r20)) + (((-1.0) * sj9 * x773)) + ((new_r00 * x772)) + (((-1.0) * sj10)));
                            evalcond[17] = (((cj9 * new_r21)) + (((-1.0) * new_r11 * x774)) + (((-1.0) * x767)) +
                                            ((new_r01 * x772)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                            vinfos[0].jointtype = 17;
                            vinfos[0].foffset = j2;
                            vinfos[0].indices[0] = _ij2[0];
                            vinfos[0].indices[1] = _ij2[1];
                            vinfos[0].maxsolutions = _nj2;
                            vinfos[1].jointtype = 17;
                            vinfos[1].foffset = j3;
                            vinfos[1].indices[0] = _ij3[0];
                            vinfos[1].indices[1] = _ij3[1];
                            vinfos[1].maxsolutions = _nj3;
                            vinfos[2].jointtype = 17;
                            vinfos[2].foffset = j4;
                            vinfos[2].indices[0] = _ij4[0];
                            vinfos[2].indices[1] = _ij4[1];
                            vinfos[2].maxsolutions = _nj4;
                            vinfos[3].jointtype = 17;
                            vinfos[3].foffset = j5;
                            vinfos[3].indices[0] = _ij5[0];
                            vinfos[3].indices[1] = _ij5[1];
                            vinfos[3].maxsolutions = _nj5;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j8;
                            vinfos[4].indices[0] = _ij8[0];
                            vinfos[4].indices[1] = _ij8[1];
                            vinfos[4].maxsolutions = _nj8;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j9;
                            vinfos[5].indices[0] = _ij9[0];
                            vinfos[5].indices[1] = _ij9[1];
                            vinfos[5].maxsolutions = _nj9;
                            vinfos[6].jointtype = 1;
                            vinfos[6].foffset = j10;
                            vinfos[6].indices[0] = _ij10[0];
                            vinfos[6].indices[1] = _ij10[1];
                            vinfos[6].maxsolutions = _nj10;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for (int i = 0; i < 3; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 3; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 3; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 3; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 3; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[3] = { false };
    for (int i = 0; i < 3; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 3; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int& numroots)
  {
    IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
    if (det < 0)
    {
      numroots = 0;
    }
    else if (det == 0)
    {
      rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
      numroots = 1;
    }
    else
    {
      det = IKsqrt(det);
      rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
      rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]);  // rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
      numroots = 2;
    }
  }
  static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for (int i = 0; i < 4; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 4; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 4; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 4; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 4; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[4] = { false };
    for (int i = 0; i < 4; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 4; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                          IkSolutionListBase<IkReal>& solutions)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                           IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
  return "2440d18e9fadb99b79061541a56ad068";
}

IKFAST_API const char* GetIkFastVersion()
{
  return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
}  // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
  if (argc != 12 + GetNumFreeParameters() + 1)
  {
    printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
           "Returns the ik solutions given the transformation of the end effector specified by\n"
           "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
           "There are %d free parameters that have to be specified.\n\n",
           GetNumFreeParameters());
    return 1;
  }

  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  IkReal eerot[9], eetrans[3];
  eerot[0] = atof(argv[1]);
  eerot[1] = atof(argv[2]);
  eerot[2] = atof(argv[3]);
  eetrans[0] = atof(argv[4]);
  eerot[3] = atof(argv[5]);
  eerot[4] = atof(argv[6]);
  eerot[5] = atof(argv[7]);
  eetrans[1] = atof(argv[8]);
  eerot[6] = atof(argv[9]);
  eerot[7] = atof(argv[10]);
  eerot[8] = atof(argv[11]);
  eetrans[2] = atof(argv[12]);
  for (std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = atof(argv[13 + i]);
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

  if (!bSuccess)
  {
    fprintf(stderr, "Failed to get ik solution\n");
    return -1;
  }

  printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
  {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
    for (std::size_t j = 0; j < solvalues.size(); ++j)
      printf("%.15f, ", solvalues[j]);
    printf("\n");
  }
  return 0;
}

#endif
