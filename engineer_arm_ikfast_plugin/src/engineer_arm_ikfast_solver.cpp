/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-04-08 14:22:07.998004
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h"  // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION == 0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b)                                                                                               \
  {                                                                                                                    \
    if (!(b))                                                                                                          \
    {                                                                                                                  \
      std::stringstream ss;                                                                                            \
      ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " << __PRETTY_FUNCTION__ << ": Assertion '"      \
         << #b << "' failed";                                                                                          \
      throw std::runtime_error(ss.str());                                                                              \
    }                                                                                                                  \
  }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI ((IkReal)6.28318530717959)
#define IKPI ((IkReal)3.14159265358979)
#define IKPI_2 ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif  // _MSC_VER

// lapack routines
extern "C" {
void dgetrf_(const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
void zgetrf_(const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
void dgesv_(const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
void dgetrs_(const char* trans, const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b,
             const int* ldb, int* info);
void dgeev_(const char* jobvl, const char* jobvr, const int* n, double* a, const int* lda, double* wr, double* wi,
            double* vl, const int* ldvl, double* vr, const int* ldvr, double* work, const int* lwork, int* info);
}

using namespace std;  // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
#endif

inline float IKabs(float f)
{
  return fabsf(f);
}
inline double IKabs(double f)
{
  return fabs(f);
}

inline float IKsqr(float f)
{
  return f * f;
}
inline double IKsqr(double f)
{
  return f * f;
}

inline float IKlog(float f)
{
  return logf(f);
}
inline double IKlog(double f)
{
  return log(f);
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif

inline float IKasin(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(-IKPI_2);
  else if (f >= 1)
    return float(IKPI_2);
  return asinf(f);
}
inline double IKasin(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return -IKPI_2;
  else if (f >= 1)
    return IKPI_2;
  return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmodf(x, y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
  while (x < 0)
  {
    x += y;
  }
  return fmod(x, y);
}

inline float IKacos(float f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return float(IKPI);
  else if (f >= 1)
    return float(0);
  return acosf(f);
}
inline double IKacos(double f)
{
  IKFAST_ASSERT(f > -1 - IKFAST_SINCOS_THRESH &&
                f < 1 + IKFAST_SINCOS_THRESH);  // any more error implies something is wrong with the solver
  if (f <= -1)
    return IKPI;
  else if (f >= 1)
    return 0;
  return acos(f);
}
inline float IKsin(float f)
{
  return sinf(f);
}
inline double IKsin(double f)
{
  return sin(f);
}
inline float IKcos(float f)
{
  return cosf(f);
}
inline double IKcos(double f)
{
  return cos(f);
}
inline float IKtan(float f)
{
  return tanf(f);
}
inline double IKtan(double f)
{
  return tan(f);
}
inline float IKsqrt(float f)
{
  if (f <= 0.0f)
    return 0.0f;
  return sqrtf(f);
}
inline double IKsqrt(double f)
{
  if (f <= 0.0)
    return 0.0;
  return sqrt(f);
}
inline float IKatan2Simple(float fy, float fx)
{
  return atan2f(fy, fx);
}
inline float IKatan2(float fy, float fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return float(IKPI_2);
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2f(fy, fx);
}
inline double IKatan2Simple(double fy, double fx)
{
  return atan2(fy, fx);
}
inline double IKatan2(double fy, double fx)
{
  if (isnan(fy))
  {
    IKFAST_ASSERT(!isnan(fx));  // if both are nan, probably wrong value will be returned
    return IKPI_2;
  }
  else if (isnan(fx))
  {
    return 0;
  }
  return atan2(fy, fx);
}

template <typename T>
struct CheckValue
{
  T value;
  bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
  CheckValue<T> ret;
  ret.valid = false;
  ret.value = 0;
  if (!isnan(fy) && !isnan(fx))
  {
    if (IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH)
    {
      ret.value = IKatan2Simple(fy, fx);
      ret.valid = true;
    }
  }
  return ret;
}

inline float IKsign(float f)
{
  if (f > 0)
  {
    return float(1);
  }
  else if (f < 0)
  {
    return float(-1);
  }
  return 0;
}

inline double IKsign(double f)
{
  if (f > 0)
  {
    return 1.0;
  }
  else if (f < 0)
  {
    return -1.0;
  }
  return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
  CheckValue<T> ret;
  ret.valid = true;
  if (n == 0)
  {
    ret.value = 1.0;
    return ret;
  }
  else if (n == 1)
  {
    ret.value = f;
    return ret;
  }
  else if (n < 0)
  {
    if (f == 0)
    {
      ret.valid = false;
      ret.value = (T)1.0e30;
      return ret;
    }
    if (n == -1)
    {
      ret.value = T(1.0) / f;
      return ret;
    }
  }

  int num = n > 0 ? n : -n;
  if (num == 2)
  {
    ret.value = f * f;
  }
  else if (num == 3)
  {
    ret.value = f * f * f;
  }
  else
  {
    ret.value = 1.0;
    while (num > 0)
    {
      if (num & 1)
      {
        ret.value *= f;
      }
      num >>= 1;
      f *= f;
    }
  }

  if (n < 0)
  {
    ret.value = T(1.0) / ret.value;
  }
  return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot)
{
  IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10;
  x0 = IKcos(j[6]);
  x1 = IKsin(j[4]);
  x2 = IKsin(j[5]);
  x3 = IKcos(j[4]);
  x4 = IKsin(j[6]);
  x5 = IKcos(j[5]);
  x6 = (x2 * x3);
  x7 = (x1 * x4);
  x8 = (x0 * x1);
  x9 = (x1 * x5);
  x10 = (x3 * x5);
  eerot[0] = (((x0 * x3)) + ((x2 * x7)));
  eerot[1] = (((x2 * x8)) + (((-1.0) * x3 * x4)));
  eerot[2] = x9;
  eetrans[0] = ((0.022) + (((0.255) * x9)) + j[2] + j[1]);
  eerot[3] = (x4 * x5);
  eerot[4] = (x0 * x5);
  eerot[5] = ((-1.0) * x2);
  eetrans[1] = ((((-0.255) * x2)) + j[3]);
  eerot[6] = ((((-1.0) * x8)) + ((x4 * x6)));
  eerot[7] = (((x0 * x6)) + x7);
  eerot[8] = x10;
  eetrans[2] = ((0.407207) + (((0.255) * x10)) + j[0]);
}

IKFAST_API int GetNumFreeParameters()
{
  return 1;
}
IKFAST_API int* GetFreeParameters()
{
  static int freeparams[] = { 2 };
  return freeparams;
}
IKFAST_API int GetNumJoints()
{
  return 7;
}

IKFAST_API int GetIkRealSize()
{
  return sizeof(IkReal);
}

IKFAST_API int GetIkType()
{
  return 0x67000001;
}

class IKSolver
{
public:
  IkReal j0, cj0, sj0, htj0, j0mul, j1, cj1, sj1, htj1, j1mul, j3, cj3, sj3, htj3, j3mul, j4, cj4, sj4, htj4, j4mul, j5,
      cj5, sj5, htj5, j5mul, j6, cj6, sj6, htj6, j6mul, j2, cj2, sj2, htj2, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1,
      new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0,
      new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
  unsigned char _ij0[2], _nj0, _ij1[2], _nj1, _ij3[2], _nj3, _ij4[2], _nj4, _ij5[2], _nj5, _ij6[2], _nj6, _ij2[2], _nj2;

  IkReal j100, cj100, sj100;
  unsigned char _ij100[2], _nj100;
  bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions)
  {
    j0 = numeric_limits<IkReal>::quiet_NaN();
    _ij0[0] = -1;
    _ij0[1] = -1;
    _nj0 = -1;
    j1 = numeric_limits<IkReal>::quiet_NaN();
    _ij1[0] = -1;
    _ij1[1] = -1;
    _nj1 = -1;
    j3 = numeric_limits<IkReal>::quiet_NaN();
    _ij3[0] = -1;
    _ij3[1] = -1;
    _nj3 = -1;
    j4 = numeric_limits<IkReal>::quiet_NaN();
    _ij4[0] = -1;
    _ij4[1] = -1;
    _nj4 = -1;
    j5 = numeric_limits<IkReal>::quiet_NaN();
    _ij5[0] = -1;
    _ij5[1] = -1;
    _nj5 = -1;
    j6 = numeric_limits<IkReal>::quiet_NaN();
    _ij6[0] = -1;
    _ij6[1] = -1;
    _nj6 = -1;
    _ij2[0] = -1;
    _ij2[1] = -1;
    _nj2 = 0;
    for (int dummyiter = 0; dummyiter < 1; ++dummyiter)
    {
      solutions.Clear();
      j2 = pfree[0];
      cj2 = cos(pfree[0]);
      sj2 = sin(pfree[0]), htj2 = tan(pfree[0] * 0.5);
      r00 = eerot[0 * 3 + 0];
      r01 = eerot[0 * 3 + 1];
      r02 = eerot[0 * 3 + 2];
      r10 = eerot[1 * 3 + 0];
      r11 = eerot[1 * 3 + 1];
      r12 = eerot[1 * 3 + 2];
      r20 = eerot[2 * 3 + 0];
      r21 = eerot[2 * 3 + 1];
      r22 = eerot[2 * 3 + 2];
      px = eetrans[0];
      py = eetrans[1];
      pz = eetrans[2];

      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_px = (px + (((-0.255) * r02)));
      new_r10 = r10;
      new_r11 = r11;
      new_r12 = r12;
      new_py = (py + (((-0.255) * r12)));
      new_r20 = r20;
      new_r21 = r21;
      new_r22 = r22;
      new_pz = ((-0.236207) + (((-0.255) * r22)) + pz);
      r00 = new_r00;
      r01 = new_r01;
      r02 = new_r02;
      r10 = new_r10;
      r11 = new_r11;
      r12 = new_r12;
      r20 = new_r20;
      r21 = new_r21;
      r22 = new_r22;
      px = new_px;
      py = new_py;
      pz = new_pz;
      IkReal x11 = ((1.0) * px);
      IkReal x12 = ((1.0) * pz);
      IkReal x13 = ((1.0) * py);
      pp = ((px * px) + (py * py) + (pz * pz));
      npx = (((px * r00)) + ((py * r10)) + ((pz * r20)));
      npy = (((px * r01)) + ((py * r11)) + ((pz * r21)));
      npz = (((px * r02)) + ((py * r12)) + ((pz * r22)));
      rxp0_0 = ((((-1.0) * r20 * x13)) + ((pz * r10)));
      rxp0_1 = (((px * r20)) + (((-1.0) * r00 * x12)));
      rxp0_2 = (((py * r00)) + (((-1.0) * r10 * x11)));
      rxp1_0 = ((((-1.0) * r21 * x13)) + ((pz * r11)));
      rxp1_1 = (((px * r21)) + (((-1.0) * r01 * x12)));
      rxp1_2 = ((((-1.0) * r11 * x11)) + ((py * r01)));
      rxp2_0 = ((((-1.0) * r22 * x13)) + ((pz * r12)));
      rxp2_1 = (((px * r22)) + (((-1.0) * r02 * x12)));
      rxp2_2 = (((py * r02)) + (((-1.0) * r12 * x11)));
      {
        IkReal j3array[1], cj3array[1], sj3array[1];
        bool j3valid[1] = { false };
        _nj3 = 1;
        j3array[0] = py;
        sj3array[0] = IKsin(j3array[0]);
        cj3array[0] = IKcos(j3array[0]);
        j3valid[0] = true;
        for (int ij3 = 0; ij3 < 1; ++ij3)
        {
          if (!j3valid[ij3])
          {
            continue;
          }
          _ij3[0] = ij3;
          _ij3[1] = -1;
          for (int iij3 = ij3 + 1; iij3 < 1; ++iij3)
          {
            if (j3valid[iij3] && IKabs(cj3array[ij3] - cj3array[iij3]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj3array[ij3] - sj3array[iij3]) < IKFAST_SOLUTION_THRESH)
            {
              j3valid[iij3] = false;
              _ij3[1] = iij3;
              break;
            }
          }
          j3 = j3array[ij3];
          cj3 = cj3array[ij3];
          sj3 = sj3array[ij3];

          {
            IkReal j0array[1], cj0array[1], sj0array[1];
            bool j0valid[1] = { false };
            _nj0 = 1;
            j0array[0] = ((-0.171) + pz);
            sj0array[0] = IKsin(j0array[0]);
            cj0array[0] = IKcos(j0array[0]);
            j0valid[0] = true;
            for (int ij0 = 0; ij0 < 1; ++ij0)
            {
              if (!j0valid[ij0])
              {
                continue;
              }
              _ij0[0] = ij0;
              _ij0[1] = -1;
              for (int iij0 = ij0 + 1; iij0 < 1; ++iij0)
              {
                if (j0valid[iij0] && IKabs(cj0array[ij0] - cj0array[iij0]) < IKFAST_SOLUTION_THRESH &&
                    IKabs(sj0array[ij0] - sj0array[iij0]) < IKFAST_SOLUTION_THRESH)
                {
                  j0valid[iij0] = false;
                  _ij0[1] = iij0;
                  break;
                }
              }
              j0 = j0array[ij0];
              cj0 = cj0array[ij0];
              sj0 = sj0array[ij0];

              {
                IkReal j1array[1], cj1array[1], sj1array[1];
                bool j1valid[1] = { false };
                _nj1 = 1;
                j1array[0] = ((-0.022) + px + (((-1.0) * j2)));
                sj1array[0] = IKsin(j1array[0]);
                cj1array[0] = IKcos(j1array[0]);
                j1valid[0] = true;
                for (int ij1 = 0; ij1 < 1; ++ij1)
                {
                  if (!j1valid[ij1])
                  {
                    continue;
                  }
                  _ij1[0] = ij1;
                  _ij1[1] = -1;
                  for (int iij1 = ij1 + 1; iij1 < 1; ++iij1)
                  {
                    if (j1valid[iij1] && IKabs(cj1array[ij1] - cj1array[iij1]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj1array[ij1] - sj1array[iij1]) < IKFAST_SOLUTION_THRESH)
                    {
                      j1valid[iij1] = false;
                      _ij1[1] = iij1;
                      break;
                    }
                  }
                  j1 = j1array[ij1];
                  cj1 = cj1array[ij1];
                  sj1 = sj1array[ij1];

                  rotationfunction0(solutions);
                }
              }
            }
          }
        }
      }
    }
    return solutions.GetNumSolutions() > 0;
  }
  inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions)
  {
    for (int rotationiter = 0; rotationiter < 1; ++rotationiter)
    {
      new_r00 = r00;
      new_r01 = r01;
      new_r02 = r02;
      new_r10 = ((-1.0) * r20);
      new_r11 = ((-1.0) * r21);
      new_r12 = ((-1.0) * r22);
      new_r20 = r10;
      new_r21 = r11;
      new_r22 = r12;
      {
        IkReal j5array[2], cj5array[2], sj5array[2];
        bool j5valid[2] = { false };
        _nj5 = 2;
        sj5array[0] = ((-1.0) * new_r22);
        if (sj5array[0] >= -1 - IKFAST_SINCOS_THRESH && sj5array[0] <= 1 + IKFAST_SINCOS_THRESH)
        {
          j5valid[0] = j5valid[1] = true;
          j5array[0] = IKasin(sj5array[0]);
          cj5array[0] = IKcos(j5array[0]);
          sj5array[1] = sj5array[0];
          j5array[1] = j5array[0] > 0 ? (IKPI - j5array[0]) : (-IKPI - j5array[0]);
          cj5array[1] = -cj5array[0];
        }
        else if (isnan(sj5array[0]))
        {
          // probably any value will work
          j5valid[0] = true;
          cj5array[0] = 1;
          sj5array[0] = 0;
          j5array[0] = 0;
        }
        for (int ij5 = 0; ij5 < 2; ++ij5)
        {
          if (!j5valid[ij5])
          {
            continue;
          }
          _ij5[0] = ij5;
          _ij5[1] = -1;
          for (int iij5 = ij5 + 1; iij5 < 2; ++iij5)
          {
            if (j5valid[iij5] && IKabs(cj5array[ij5] - cj5array[iij5]) < IKFAST_SOLUTION_THRESH &&
                IKabs(sj5array[ij5] - sj5array[iij5]) < IKFAST_SOLUTION_THRESH)
            {
              j5valid[iij5] = false;
              _ij5[1] = iij5;
              break;
            }
          }
          j5 = j5array[ij5];
          cj5 = cj5array[ij5];
          sj5 = sj5array[ij5];

          {
            IkReal j6eval[3];
            j6eval[0] = cj5;
            j6eval[1] = IKsign(cj5);
            j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                IKabs(j6eval[2]) < 0.0000010000000000)
            {
              {
                IkReal j4eval[3];
                j4eval[0] = cj5;
                j4eval[1] = IKsign(cj5);
                j4eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000 ||
                    IKabs(j4eval[2]) < 0.0000010000000000)
                {
                  {
                    IkReal j4eval[2];
                    j4eval[0] = cj5;
                    j4eval[1] = new_r02;
                    if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                    {
                      {
                        IkReal evalcond[5];
                        bool bgotonextstatement = true;
                        do
                        {
                          evalcond[0] =
                              ((-3.14159265358979) +
                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))), 6.28318530717959)));
                          evalcond[1] = new_r12;
                          evalcond[2] = new_r02;
                          evalcond[3] = new_r20;
                          evalcond[4] = new_r21;
                          if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                              IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                              IKabs(evalcond[4]) < 0.0000050000000000)
                          {
                            bgotonextstatement = false;
                            IkReal j6mul = 1;
                            j6 = 0;
                            j4mul = 1.0;
                            if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j4 = IKatan2(new_r01, ((-1.0) * new_r11));
                            {
                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                              vinfos[0].jointtype = 17;
                              vinfos[0].foffset = j0;
                              vinfos[0].indices[0] = _ij0[0];
                              vinfos[0].indices[1] = _ij0[1];
                              vinfos[0].maxsolutions = _nj0;
                              vinfos[1].jointtype = 17;
                              vinfos[1].foffset = j1;
                              vinfos[1].indices[0] = _ij1[0];
                              vinfos[1].indices[1] = _ij1[1];
                              vinfos[1].maxsolutions = _nj1;
                              vinfos[2].jointtype = 17;
                              vinfos[2].foffset = j2;
                              vinfos[2].indices[0] = _ij2[0];
                              vinfos[2].indices[1] = _ij2[1];
                              vinfos[2].maxsolutions = _nj2;
                              vinfos[3].jointtype = 17;
                              vinfos[3].foffset = j3;
                              vinfos[3].indices[0] = _ij3[0];
                              vinfos[3].indices[1] = _ij3[1];
                              vinfos[3].maxsolutions = _nj3;
                              vinfos[4].jointtype = 1;
                              vinfos[4].foffset = j4;
                              vinfos[4].fmul = j4mul;
                              vinfos[4].freeind = 0;
                              vinfos[4].maxsolutions = 0;
                              vinfos[5].jointtype = 1;
                              vinfos[5].foffset = j5;
                              vinfos[5].indices[0] = _ij5[0];
                              vinfos[5].indices[1] = _ij5[1];
                              vinfos[5].maxsolutions = _nj5;
                              vinfos[6].jointtype = 1;
                              vinfos[6].foffset = j6;
                              vinfos[6].fmul = j6mul;
                              vinfos[6].freeind = 0;
                              vinfos[6].maxsolutions = 0;
                              std::vector<int> vfree(1);
                              vfree[0] = 6;
                              solutions.AddSolution(vinfos, vfree);
                            }
                          }
                        } while (0);
                        if (bgotonextstatement)
                        {
                          bool bgotonextstatement = true;
                          do
                          {
                            evalcond[0] =
                                ((-3.14159265358979) +
                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))), 6.28318530717959)));
                            evalcond[1] = new_r12;
                            evalcond[2] = new_r02;
                            evalcond[3] = new_r20;
                            evalcond[4] = new_r21;
                            if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                IKabs(evalcond[4]) < 0.0000050000000000)
                            {
                              bgotonextstatement = false;
                              IkReal j6mul = 1;
                              j6 = 0;
                              j4mul = -1.0;
                              if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                  IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r11) - 1) <= IKFAST_SINCOS_THRESH)
                                continue;
                              j4 = IKatan2(((-1.0) * new_r01), new_r11);
                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 17;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].fmul = j4mul;
                                vinfos[4].freeind = 0;
                                vinfos[4].maxsolutions = 0;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].fmul = j6mul;
                                vinfos[6].freeind = 0;
                                vinfos[6].maxsolutions = 0;
                                std::vector<int> vfree(1);
                                vfree[0] = 6;
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          } while (0);
                          if (bgotonextstatement)
                          {
                            bool bgotonextstatement = true;
                            do
                            {
                              evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                              {
                                bgotonextstatement = false;
                                {
                                  IkReal j4eval[1];
                                  new_r21 = 0;
                                  new_r20 = 0;
                                  new_r02 = 0;
                                  new_r12 = 0;
                                  IkReal x14 = new_r22 * new_r22;
                                  IkReal x15 = ((16.0) * new_r10);
                                  IkReal x16 = ((16.0) * new_r01);
                                  IkReal x17 = ((16.0) * new_r00);
                                  IkReal x18 = (new_r11 * new_r22);
                                  IkReal x19 = ((8.0) * new_r00);
                                  IkReal x20 = (x14 * x15);
                                  IkReal x21 = (x14 * x16);
                                  j4eval[0] =
                                      ((IKabs(((((-1.0) * x21)) + x16))) + (IKabs(((((-1.0) * x16)) + x21))) +
                                       (IKabs((((new_r22 * x19)) + (((-8.0) * new_r11))))) +
                                       (IKabs(((((-32.0) * new_r11 * x14)) + (((16.0) * new_r11)) + ((new_r22 * x17))))) +
                                       (IKabs(((((32.0) * new_r00)) + (((-16.0) * x18)) + (((-1.0) * x14 * x17))))) +
                                       (IKabs(((((-1.0) * x20)) + x15))) + (IKabs(((((-1.0) * x15)) + x20))) +
                                       (IKabs(((((-8.0) * x18)) + ((x14 * x19))))));
                                  if (IKabs(j4eval[0]) < 0.0000000010000000)
                                  {
                                    continue;  // no branches [j4, j6]
                                  }
                                  else
                                  {
                                    IkReal op[4 + 1], zeror[4];
                                    int numroots;
                                    IkReal j4evalpoly[1];
                                    IkReal x22 = new_r22 * new_r22;
                                    IkReal x23 = ((16.0) * new_r01);
                                    IkReal x24 = (new_r00 * new_r22);
                                    IkReal x25 = (x22 * x23);
                                    IkReal x26 = ((((8.0) * x24)) + (((-8.0) * new_r11)));
                                    op[0] = x26;
                                    op[1] = ((((-1.0) * x23)) + x25);
                                    op[2] = ((((-32.0) * new_r11 * x22)) + (((16.0) * x24)) + (((16.0) * new_r11)));
                                    op[3] = ((((-1.0) * x25)) + x23);
                                    op[4] = x26;
                                    polyroots4(op, zeror, numroots);
                                    IkReal j4array[4], cj4array[4], sj4array[4], tempj4array[1];
                                    int numsolutions = 0;
                                    for (int ij4 = 0; ij4 < numroots; ++ij4)
                                    {
                                      IkReal htj4 = zeror[ij4];
                                      tempj4array[0] = ((2.0) * (atan(htj4)));
                                      for (int kj4 = 0; kj4 < 1; ++kj4)
                                      {
                                        j4array[numsolutions] = tempj4array[kj4];
                                        if (j4array[numsolutions] > IKPI)
                                        {
                                          j4array[numsolutions] -= IK2PI;
                                        }
                                        else if (j4array[numsolutions] < -IKPI)
                                        {
                                          j4array[numsolutions] += IK2PI;
                                        }
                                        sj4array[numsolutions] = IKsin(j4array[numsolutions]);
                                        cj4array[numsolutions] = IKcos(j4array[numsolutions]);
                                        numsolutions++;
                                      }
                                    }
                                    bool j4valid[4] = { true, true, true, true };
                                    _nj4 = 4;
                                    for (int ij4 = 0; ij4 < numsolutions; ++ij4)
                                    {
                                      if (!j4valid[ij4])
                                      {
                                        continue;
                                      }
                                      j4 = j4array[ij4];
                                      cj4 = cj4array[ij4];
                                      sj4 = sj4array[ij4];
                                      htj4 = IKtan(j4 / 2);

                                      IkReal x27 = new_r22 * new_r22;
                                      IkReal x28 = ((16.0) * new_r10);
                                      IkReal x29 = (new_r11 * new_r22);
                                      IkReal x30 = ((8.0) * x29);
                                      IkReal x31 = (new_r00 * x27);
                                      IkReal x32 = (x27 * x28);
                                      IkReal x33 = ((8.0) * x31);
                                      j4evalpoly[0] =
                                          ((((htj4 * htj4 * htj4) * (((((-1.0) * x32)) + x28)))) + (((-1.0) * x30)) +
                                           x33 +
                                           (((htj4 * htj4) *
                                             (((((32.0) * new_r00)) + (((-16.0) * x31)) + (((-16.0) * x29)))))) +
                                           ((htj4 * (((((-1.0) * x28)) + x32)))) +
                                           (((htj4 * htj4 * htj4 * htj4) * (((((-1.0) * x30)) + x33)))));
                                      if (IKabs(j4evalpoly[0]) > 0.0000000010000000)
                                      {
                                        continue;
                                      }
                                      _ij4[0] = ij4;
                                      _ij4[1] = -1;
                                      for (int iij4 = ij4 + 1; iij4 < numsolutions; ++iij4)
                                      {
                                        if (j4valid[iij4] &&
                                            IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j4valid[iij4] = false;
                                          _ij4[1] = iij4;
                                          break;
                                        }
                                      }
                                      {
                                        IkReal j6eval[3];
                                        new_r21 = 0;
                                        new_r20 = 0;
                                        new_r02 = 0;
                                        new_r12 = 0;
                                        IkReal x34 = new_r22 * new_r22;
                                        IkReal x35 = cj4 * cj4;
                                        IkReal x36 = (new_r22 * sj4);
                                        IkReal x37 = ((((-1.0) * x35)) + (((-1.0) * x34)) + ((x34 * x35)));
                                        j6eval[0] = x37;
                                        j6eval[1] = IKsign(x37);
                                        j6eval[2] = ((IKabs(((((-1.0) * cj4 * new_r00)) + ((new_r01 * x36))))) +
                                                     (IKabs((((cj4 * new_r01)) + ((new_r00 * x36))))));
                                        if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                            IKabs(j6eval[1]) < 0.0000010000000000 ||
                                            IKabs(j6eval[2]) < 0.0000010000000000)
                                        {
                                          {
                                            IkReal j6eval[1];
                                            new_r21 = 0;
                                            new_r20 = 0;
                                            new_r02 = 0;
                                            new_r12 = 0;
                                            j6eval[0] = new_r22;
                                            if (IKabs(j6eval[0]) < 0.0000010000000000)
                                            {
                                              {
                                                IkReal j6eval[2];
                                                new_r21 = 0;
                                                new_r20 = 0;
                                                new_r02 = 0;
                                                new_r12 = 0;
                                                j6eval[0] = cj4;
                                                j6eval[1] = new_r22;
                                                if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                                    IKabs(j6eval[1]) < 0.0000010000000000)
                                                {
                                                  {
                                                    IkReal evalcond[1];
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((-1.5707963267949) + j4)))),
                                                                             6.28318530717959)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                                          bool j6valid[1] = { false };
                                                          _nj6 = 1;
                                                          if (IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(((-1.0) * new_r11)) + IKsqr(new_r10) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j6array[0] = IKatan2(((-1.0) * new_r11), new_r10);
                                                          sj6array[0] = IKsin(j6array[0]);
                                                          cj6array[0] = IKcos(j6array[0]);
                                                          if (j6array[0] > IKPI)
                                                          {
                                                            j6array[0] -= IK2PI;
                                                          }
                                                          else if (j6array[0] < -IKPI)
                                                          {
                                                            j6array[0] += IK2PI;
                                                          }
                                                          j6valid[0] = true;
                                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                                          {
                                                            if (!j6valid[ij6])
                                                            {
                                                              continue;
                                                            }
                                                            _ij6[0] = ij6;
                                                            _ij6[1] = -1;
                                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                            {
                                                              if (j6valid[iij6] &&
                                                                  IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j6valid[iij6] = false;
                                                                _ij6[1] = iij6;
                                                                break;
                                                              }
                                                            }
                                                            j6 = j6array[ij6];
                                                            cj6 = cj6array[ij6];
                                                            sj6 = sj6array[ij6];
                                                            {
                                                              IkReal evalcond[6];
                                                              IkReal x38 = IKsin(j6);
                                                              IkReal x39 = IKcos(j6);
                                                              IkReal x40 = ((1.0) * new_r22);
                                                              IkReal x41 = ((1.0) * x39);
                                                              evalcond[0] = (x38 + new_r11);
                                                              evalcond[1] = ((((-1.0) * x41)) + new_r10);
                                                              evalcond[2] =
                                                                  ((((-1.0) * x38 * x40)) + (((-1.0) * new_r00)));
                                                              evalcond[3] =
                                                                  ((((-1.0) * x39 * x40)) + (((-1.0) * new_r01)));
                                                              evalcond[4] =
                                                                  ((((-1.0) * x38)) + (((-1.0) * new_r00 * x40)));
                                                              evalcond[5] =
                                                                  ((((-1.0) * x41)) + (((-1.0) * new_r01 * x40)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 17;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((1.5707963267949) + j4)))),
                                                                               6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                        {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                                            bool j6valid[1] = { false };
                                                            _nj6 = 1;
                                                            if (IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(((-1.0) * new_r10)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(new_r11) + IKsqr(((-1.0) * new_r10)) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j6array[0] = IKatan2(new_r11, ((-1.0) * new_r10));
                                                            sj6array[0] = IKsin(j6array[0]);
                                                            cj6array[0] = IKcos(j6array[0]);
                                                            if (j6array[0] > IKPI)
                                                            {
                                                              j6array[0] -= IK2PI;
                                                            }
                                                            else if (j6array[0] < -IKPI)
                                                            {
                                                              j6array[0] += IK2PI;
                                                            }
                                                            j6valid[0] = true;
                                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                                            {
                                                              if (!j6valid[ij6])
                                                              {
                                                                continue;
                                                              }
                                                              _ij6[0] = ij6;
                                                              _ij6[1] = -1;
                                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                              {
                                                                if (j6valid[iij6] &&
                                                                    IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j6valid[iij6] = false;
                                                                  _ij6[1] = iij6;
                                                                  break;
                                                                }
                                                              }
                                                              j6 = j6array[ij6];
                                                              cj6 = cj6array[ij6];
                                                              sj6 = sj6array[ij6];
                                                              {
                                                                IkReal evalcond[6];
                                                                IkReal x42 = IKsin(j6);
                                                                IkReal x43 = IKcos(j6);
                                                                IkReal x44 = ((1.0) * new_r22);
                                                                IkReal x45 = ((1.0) * x43);
                                                                evalcond[0] = (x42 + (((-1.0) * new_r11)));
                                                                evalcond[1] = ((((-1.0) * x42 * x44)) + new_r00);
                                                                evalcond[2] = ((((-1.0) * x43 * x44)) + new_r01);
                                                                evalcond[3] = ((((-1.0) * x45)) + (((-1.0) * new_r10)));
                                                                evalcond[4] =
                                                                    ((((-1.0) * x42)) + ((new_r00 * new_r22)));
                                                                evalcond[5] =
                                                                    ((((-1.0) * x45)) + ((new_r01 * new_r22)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement)
                                                      {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                          IkReal x46 = new_r22 * new_r22;
                                                          CheckValue<IkReal> x47 =
                                                              IKPowWithIntegerCheck(((-1.0) + x46), -1);
                                                          if (!x47.valid)
                                                          {
                                                            continue;
                                                          }
                                                          if (((x46 * (x47.value))) < -0.00001)
                                                            continue;
                                                          IkReal gconst6 = IKsqrt((x46 * (x47.value)));
                                                          evalcond[0] =
                                                              ((-3.14159265358979) +
                                                               (IKfmod(((3.14159265358979) +
                                                                        (IKabs(((-1.0) + (IKsign(sj4))))) +
                                                                        (IKabs((cj4 + (((-1.0) * gconst6)))))),
                                                                       6.28318530717959)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                          {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j6array[1], cj6array[1], sj6array[1];
                                                              bool j6valid[1] = { false };
                                                              _nj6 = 1;
                                                              if ((((1.0) + (((-1.0) * (gconst6 * gconst6))))) <
                                                                  -0.00001)
                                                                continue;
                                                              IkReal x48 =
                                                                  IKsqrt(((1.0) + (((-1.0) * (gconst6 * gconst6)))));
                                                              if (IKabs(((((-1.0) * new_r11 * x48)) +
                                                                         (((-1.0) * gconst6 * new_r01)))) <
                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs((((gconst6 * new_r00)) + ((new_r10 * x48)))) <
                                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                                  IKabs(IKsqr(((((-1.0) * new_r11 * x48)) +
                                                                               (((-1.0) * gconst6 * new_r01)))) +
                                                                        IKsqr((((gconst6 * new_r00)) +
                                                                               ((new_r10 * x48)))) -
                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                continue;
                                                              j6array[0] =
                                                                  IKatan2(((((-1.0) * new_r11 * x48)) +
                                                                           (((-1.0) * gconst6 * new_r01))),
                                                                          (((gconst6 * new_r00)) + ((new_r10 * x48))));
                                                              sj6array[0] = IKsin(j6array[0]);
                                                              cj6array[0] = IKcos(j6array[0]);
                                                              if (j6array[0] > IKPI)
                                                              {
                                                                j6array[0] -= IK2PI;
                                                              }
                                                              else if (j6array[0] < -IKPI)
                                                              {
                                                                j6array[0] += IK2PI;
                                                              }
                                                              j6valid[0] = true;
                                                              for (int ij6 = 0; ij6 < 1; ++ij6)
                                                              {
                                                                if (!j6valid[ij6])
                                                                {
                                                                  continue;
                                                                }
                                                                _ij6[0] = ij6;
                                                                _ij6[1] = -1;
                                                                for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                {
                                                                  if (j6valid[iij6] &&
                                                                      IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                          IKFAST_SOLUTION_THRESH)
                                                                  {
                                                                    j6valid[iij6] = false;
                                                                    _ij6[1] = iij6;
                                                                    break;
                                                                  }
                                                                }
                                                                j6 = j6array[ij6];
                                                                cj6 = cj6array[ij6];
                                                                sj6 = sj6array[ij6];
                                                                {
                                                                  IkReal evalcond[10];
                                                                  IkReal x49 = IKsin(j6);
                                                                  IkReal x50 = IKcos(j6);
                                                                  IkReal x51 = ((1.0) * new_r22);
                                                                  IkReal x52 = (gconst6 * new_r10);
                                                                  IkReal x53 = (gconst6 * new_r11);
                                                                  IkReal x54 = ((1.0) * x50);
                                                                  IkReal x55 = (gconst6 * x50);
                                                                  IkReal x56 = (gconst6 * x49);
                                                                  IkReal x57 = x48;
                                                                  IkReal x58 = (new_r22 * x57);
                                                                  IkReal x59 = ((1.0) * x57);
                                                                  evalcond[0] =
                                                                      (((gconst6 * new_r01)) + x49 + ((new_r11 * x57)));
                                                                  evalcond[1] = (((gconst6 * new_r00)) +
                                                                                 ((new_r10 * x57)) + (((-1.0) * x54)));
                                                                  evalcond[2] = (((x50 * x58)) + x56 + new_r01);
                                                                  evalcond[3] = ((((-1.0) * x51 * x55)) +
                                                                                 ((x49 * x57)) + new_r11);
                                                                  evalcond[4] = ((((-1.0) * x49 * x51)) + x52 +
                                                                                 (((-1.0) * new_r00 * x59)));
                                                                  evalcond[5] = (x53 + (((-1.0) * new_r01 * x59)) +
                                                                                 (((-1.0) * x50 * x51)));
                                                                  evalcond[6] = ((((-1.0) * gconst6 * x54)) +
                                                                                 ((x49 * x58)) + new_r00);
                                                                  evalcond[7] = ((((-1.0) * x51 * x56)) +
                                                                                 (((-1.0) * x54 * x57)) + new_r10);
                                                                  evalcond[8] = (((new_r22 * x52)) + (((-1.0) * x49)) +
                                                                                 (((-1.0) * new_r00 * x51 * x57)));
                                                                  evalcond[9] = (((new_r22 * x53)) +
                                                                                 (((-1.0) * new_r01 * x51 * x57)) +
                                                                                 (((-1.0) * x54)));
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                  {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 17;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 17;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 17;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 17;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j6;
                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                  vinfos[6].maxsolutions = _nj6;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                          bool bgotonextstatement = true;
                                                          do
                                                          {
                                                            IkReal x60 = new_r22 * new_r22;
                                                            CheckValue<IkReal> x61 =
                                                                IKPowWithIntegerCheck(((-1.0) + x60), -1);
                                                            if (!x61.valid)
                                                            {
                                                              continue;
                                                            }
                                                            if (((x60 * (x61.value))) < -0.00001)
                                                              continue;
                                                            IkReal gconst6 = IKsqrt((x60 * (x61.value)));
                                                            evalcond[0] =
                                                                ((-3.14159265358979) +
                                                                 (IKfmod(((3.14159265358979) +
                                                                          (IKabs((cj4 + (((-1.0) * gconst6))))) +
                                                                          (IKabs(((1.0) + (IKsign(sj4)))))),
                                                                         6.28318530717959)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                                bool j6valid[1] = { false };
                                                                _nj6 = 1;
                                                                if ((((1.0) + (((-1.0) * (gconst6 * gconst6))))) <
                                                                    -0.00001)
                                                                  continue;
                                                                IkReal x62 =
                                                                    IKsqrt(((1.0) + (((-1.0) * (gconst6 * gconst6)))));
                                                                if (IKabs(((((-1.0) * gconst6 * new_r01)) +
                                                                           ((new_r11 * x62)))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs((((gconst6 * new_r00)) +
                                                                           (((-1.0) * new_r10 * x62)))) <
                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                    IKabs(IKsqr(((((-1.0) * gconst6 * new_r01)) +
                                                                                 ((new_r11 * x62)))) +
                                                                          IKsqr((((gconst6 * new_r00)) +
                                                                                 (((-1.0) * new_r10 * x62)))) -
                                                                          1) <= IKFAST_SINCOS_THRESH)
                                                                  continue;
                                                                j6array[0] = IKatan2(((((-1.0) * gconst6 * new_r01)) +
                                                                                      ((new_r11 * x62))),
                                                                                     (((gconst6 * new_r00)) +
                                                                                      (((-1.0) * new_r10 * x62))));
                                                                sj6array[0] = IKsin(j6array[0]);
                                                                cj6array[0] = IKcos(j6array[0]);
                                                                if (j6array[0] > IKPI)
                                                                {
                                                                  j6array[0] -= IK2PI;
                                                                }
                                                                else if (j6array[0] < -IKPI)
                                                                {
                                                                  j6array[0] += IK2PI;
                                                                }
                                                                j6valid[0] = true;
                                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                {
                                                                  if (!j6valid[ij6])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij6[0] = ij6;
                                                                  _ij6[1] = -1;
                                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                  {
                                                                    if (j6valid[iij6] &&
                                                                        IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j6valid[iij6] = false;
                                                                      _ij6[1] = iij6;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j6 = j6array[ij6];
                                                                  cj6 = cj6array[ij6];
                                                                  sj6 = sj6array[ij6];
                                                                  {
                                                                    IkReal evalcond[10];
                                                                    IkReal x63 = IKsin(j6);
                                                                    IkReal x64 = IKcos(j6);
                                                                    IkReal x65 = ((1.0) * new_r22);
                                                                    IkReal x66 = (gconst6 * new_r10);
                                                                    IkReal x67 = (gconst6 * new_r11);
                                                                    IkReal x68 = ((1.0) * x64);
                                                                    IkReal x69 = (gconst6 * x64);
                                                                    IkReal x70 = (gconst6 * x63);
                                                                    IkReal x71 = x62;
                                                                    IkReal x72 = (new_r01 * x71);
                                                                    IkReal x73 = (new_r00 * x71);
                                                                    IkReal x74 = ((1.0) * x71);
                                                                    IkReal x75 = (x64 * x71);
                                                                    evalcond[0] = (((gconst6 * new_r01)) + x63 +
                                                                                   (((-1.0) * new_r11 * x74)));
                                                                    evalcond[1] =
                                                                        (((gconst6 * new_r00)) + (((-1.0) * x68)) +
                                                                         (((-1.0) * new_r10 * x74)));
                                                                    evalcond[2] = (x73 + x66 + (((-1.0) * x63 * x65)));
                                                                    evalcond[3] = (x72 + x67 + (((-1.0) * x64 * x65)));
                                                                    evalcond[4] =
                                                                        (x70 + new_r01 + (((-1.0) * x65 * x75)));
                                                                    evalcond[5] =
                                                                        (x75 + new_r10 + (((-1.0) * x65 * x70)));
                                                                    evalcond[6] =
                                                                        (((new_r22 * x66)) + ((new_r22 * x73)) +
                                                                         (((-1.0) * x63)));
                                                                    evalcond[7] =
                                                                        (((new_r22 * x67)) + ((new_r22 * x72)) +
                                                                         (((-1.0) * x68)));
                                                                    evalcond[8] = ((((-1.0) * x63 * x74)) + new_r11 +
                                                                                   (((-1.0) * x65 * x69)));
                                                                    evalcond[9] =
                                                                        ((((-1.0) * gconst6 * x68)) +
                                                                         (((-1.0) * x63 * x65 * x71)) + new_r00);
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 17;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement)
                                                          {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                              IkReal x76 = new_r22 * new_r22;
                                                              CheckValue<IkReal> x77 =
                                                                  IKPowWithIntegerCheck(((-1.0) + x76), -1);
                                                              if (!x77.valid)
                                                              {
                                                                continue;
                                                              }
                                                              if (((x76 * (x77.value))) < -0.00001)
                                                                continue;
                                                              IkReal gconst7 = ((-1.0) * (IKsqrt((x76 * (x77.value)))));
                                                              evalcond[0] =
                                                                  ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-1.0) + (IKsign(sj4))))) +
                                                                            (IKabs((cj4 + (((-1.0) * gconst7)))))),
                                                                           6.28318530717959)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                              {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j6array[1], cj6array[1], sj6array[1];
                                                                  bool j6valid[1] = { false };
                                                                  _nj6 = 1;
                                                                  if ((((1.0) + (((-1.0) * (gconst7 * gconst7))))) <
                                                                      -0.00001)
                                                                    continue;
                                                                  IkReal x78 = IKsqrt(
                                                                      ((1.0) + (((-1.0) * (gconst7 * gconst7)))));
                                                                  if (IKabs(((((-1.0) * gconst7 * new_r01)) +
                                                                             (((-1.0) * new_r11 * x78)))) <
                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(
                                                                          (((new_r10 * x78)) + ((gconst7 * new_r00)))) <
                                                                          IKFAST_ATAN2_MAGTHRESH &&
                                                                      IKabs(IKsqr(((((-1.0) * gconst7 * new_r01)) +
                                                                                   (((-1.0) * new_r11 * x78)))) +
                                                                            IKsqr((((new_r10 * x78)) +
                                                                                   ((gconst7 * new_r00)))) -
                                                                            1) <= IKFAST_SINCOS_THRESH)
                                                                    continue;
                                                                  j6array[0] = IKatan2(
                                                                      ((((-1.0) * gconst7 * new_r01)) +
                                                                       (((-1.0) * new_r11 * x78))),
                                                                      (((new_r10 * x78)) + ((gconst7 * new_r00))));
                                                                  sj6array[0] = IKsin(j6array[0]);
                                                                  cj6array[0] = IKcos(j6array[0]);
                                                                  if (j6array[0] > IKPI)
                                                                  {
                                                                    j6array[0] -= IK2PI;
                                                                  }
                                                                  else if (j6array[0] < -IKPI)
                                                                  {
                                                                    j6array[0] += IK2PI;
                                                                  }
                                                                  j6valid[0] = true;
                                                                  for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                  {
                                                                    if (!j6valid[ij6])
                                                                    {
                                                                      continue;
                                                                    }
                                                                    _ij6[0] = ij6;
                                                                    _ij6[1] = -1;
                                                                    for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                    {
                                                                      if (j6valid[iij6] &&
                                                                          IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                              IKFAST_SOLUTION_THRESH)
                                                                      {
                                                                        j6valid[iij6] = false;
                                                                        _ij6[1] = iij6;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j6 = j6array[ij6];
                                                                    cj6 = cj6array[ij6];
                                                                    sj6 = sj6array[ij6];
                                                                    {
                                                                      IkReal evalcond[10];
                                                                      IkReal x79 = IKcos(j6);
                                                                      IkReal x80 = IKsin(j6);
                                                                      IkReal x81 = (gconst7 * new_r10);
                                                                      IkReal x82 = ((1.0) * new_r22);
                                                                      IkReal x83 = (gconst7 * new_r11);
                                                                      IkReal x84 = ((1.0) * x79);
                                                                      IkReal x85 = (gconst7 * x80);
                                                                      IkReal x86 = (gconst7 * x79);
                                                                      IkReal x87 = x78;
                                                                      IkReal x88 = ((1.0) * x87);
                                                                      IkReal x89 = (new_r22 * x87);
                                                                      evalcond[0] = (x80 + ((new_r11 * x87)) +
                                                                                     ((gconst7 * new_r01)));
                                                                      evalcond[1] =
                                                                          (((new_r10 * x87)) + (((-1.0) * x84)) +
                                                                           ((gconst7 * new_r00)));
                                                                      evalcond[2] = (((x79 * x89)) + x85 + new_r01);
                                                                      evalcond[3] = ((((-1.0) * x82 * x86)) +
                                                                                     ((x80 * x87)) + new_r11);
                                                                      evalcond[4] = ((((-1.0) * x80 * x82)) + x81 +
                                                                                     (((-1.0) * new_r00 * x88)));
                                                                      evalcond[5] = ((((-1.0) * x79 * x82)) +
                                                                                     (((-1.0) * new_r01 * x88)) + x83);
                                                                      evalcond[6] = ((((-1.0) * gconst7 * x84)) +
                                                                                     ((x80 * x89)) + new_r00);
                                                                      evalcond[7] = ((((-1.0) * x82 * x85)) +
                                                                                     (((-1.0) * x84 * x87)) + new_r10);
                                                                      evalcond[8] = (((new_r22 * x81)) +
                                                                                     (((-1.0) * new_r00 * x82 * x87)) +
                                                                                     (((-1.0) * x80)));
                                                                      evalcond[9] = (((new_r22 * x83)) +
                                                                                     (((-1.0) * new_r01 * x82 * x87)) +
                                                                                     (((-1.0) * x84)));
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                      {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 17;
                                                                      vinfos[0].foffset = j0;
                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                      vinfos[0].maxsolutions = _nj0;
                                                                      vinfos[1].jointtype = 17;
                                                                      vinfos[1].foffset = j1;
                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                      vinfos[1].maxsolutions = _nj1;
                                                                      vinfos[2].jointtype = 17;
                                                                      vinfos[2].foffset = j2;
                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                      vinfos[2].maxsolutions = _nj2;
                                                                      vinfos[3].jointtype = 17;
                                                                      vinfos[3].foffset = j3;
                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                      vinfos[3].maxsolutions = _nj3;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j4;
                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                      vinfos[4].maxsolutions = _nj4;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j5;
                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                      vinfos[5].maxsolutions = _nj5;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j6;
                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                      vinfos[6].maxsolutions = _nj6;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                              bool bgotonextstatement = true;
                                                              do
                                                              {
                                                                IkReal x90 = new_r22 * new_r22;
                                                                CheckValue<IkReal> x91 =
                                                                    IKPowWithIntegerCheck(((-1.0) + x90), -1);
                                                                if (!x91.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                if (((x90 * (x91.value))) < -0.00001)
                                                                  continue;
                                                                IkReal gconst7 =
                                                                    ((-1.0) * (IKsqrt((x90 * (x91.value)))));
                                                                evalcond[0] =
                                                                    ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) +
                                                                              (IKabs(((1.0) + (IKsign(sj4))))) +
                                                                              (IKabs((cj4 + (((-1.0) * gconst7)))))),
                                                                             6.28318530717959)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                                    bool j6valid[1] = { false };
                                                                    _nj6 = 1;
                                                                    if ((((1.0) + (((-1.0) * (gconst7 * gconst7))))) <
                                                                        -0.00001)
                                                                      continue;
                                                                    IkReal x92 = IKsqrt(
                                                                        ((1.0) + (((-1.0) * (gconst7 * gconst7)))));
                                                                    if (IKabs(((((-1.0) * gconst7 * new_r01)) +
                                                                               ((new_r11 * x92)))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(((((-1.0) * new_r10 * x92)) +
                                                                               ((gconst7 * new_r00)))) <
                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                        IKabs(IKsqr(((((-1.0) * gconst7 * new_r01)) +
                                                                                     ((new_r11 * x92)))) +
                                                                              IKsqr(((((-1.0) * new_r10 * x92)) +
                                                                                     ((gconst7 * new_r00)))) -
                                                                              1) <= IKFAST_SINCOS_THRESH)
                                                                      continue;
                                                                    j6array[0] =
                                                                        IKatan2(((((-1.0) * gconst7 * new_r01)) +
                                                                                 ((new_r11 * x92))),
                                                                                ((((-1.0) * new_r10 * x92)) +
                                                                                 ((gconst7 * new_r00))));
                                                                    sj6array[0] = IKsin(j6array[0]);
                                                                    cj6array[0] = IKcos(j6array[0]);
                                                                    if (j6array[0] > IKPI)
                                                                    {
                                                                      j6array[0] -= IK2PI;
                                                                    }
                                                                    else if (j6array[0] < -IKPI)
                                                                    {
                                                                      j6array[0] += IK2PI;
                                                                    }
                                                                    j6valid[0] = true;
                                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                                    {
                                                                      if (!j6valid[ij6])
                                                                      {
                                                                        continue;
                                                                      }
                                                                      _ij6[0] = ij6;
                                                                      _ij6[1] = -1;
                                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                                      {
                                                                        if (j6valid[iij6] &&
                                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                                IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                          j6valid[iij6] = false;
                                                                          _ij6[1] = iij6;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j6 = j6array[ij6];
                                                                      cj6 = cj6array[ij6];
                                                                      sj6 = sj6array[ij6];
                                                                      {
                                                                        IkReal evalcond[10];
                                                                        IkReal x93 = IKsin(j6);
                                                                        IkReal x94 = IKcos(j6);
                                                                        IkReal x95 = (gconst7 * new_r11);
                                                                        IkReal x96 = (gconst7 * new_r10);
                                                                        IkReal x97 = ((1.0) * x94);
                                                                        IkReal x98 = ((1.0) * x93);
                                                                        IkReal x99 = (new_r22 * x97);
                                                                        IkReal x100 = x92;
                                                                        IkReal x101 = (new_r22 * x100);
                                                                        IkReal x102 = ((1.0) * x100);
                                                                        IkReal x103 = (x100 * x94);
                                                                        evalcond[0] = ((((-1.0) * new_r11 * x102)) +
                                                                                       x93 + ((gconst7 * new_r01)));
                                                                        evalcond[1] =
                                                                            ((((-1.0) * new_r10 * x102)) +
                                                                             (((-1.0) * x97)) + ((gconst7 * new_r00)));
                                                                        evalcond[2] = (((new_r00 * x100)) + x96 +
                                                                                       (((-1.0) * new_r22 * x98)));
                                                                        evalcond[3] = (((new_r01 * x100)) + x95 +
                                                                                       (((-1.0) * x99)));
                                                                        evalcond[4] =
                                                                            (((gconst7 * x93)) +
                                                                             (((-1.0) * x100 * x99)) + new_r01);
                                                                        evalcond[5] =
                                                                            (x103 +
                                                                             (((-1.0) * gconst7 * new_r22 * x98)) +
                                                                             new_r10);
                                                                        evalcond[6] =
                                                                            (((new_r22 * x96)) + ((new_r00 * x101)) +
                                                                             (((-1.0) * x98)));
                                                                        evalcond[7] =
                                                                            (((new_r22 * x95)) + ((new_r01 * x101)) +
                                                                             (((-1.0) * x97)));
                                                                        evalcond[8] =
                                                                            ((((-1.0) * x100 * x98)) + new_r11 +
                                                                             (((-1.0) * gconst7 * x99)));
                                                                        evalcond[9] =
                                                                            ((((-1.0) * x101 * x98)) + new_r00 +
                                                                             (((-1.0) * gconst7 * x97)));
                                                                        if (IKabs(evalcond[0]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[1]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[2]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[3]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[4]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[5]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[6]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[7]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[8]) >
                                                                                IKFAST_EVALCOND_THRESH ||
                                                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 17;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 17;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 17;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 17;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement)
                                                              {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  if (1)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    continue;  // branch miss [j6]
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {}
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                                else
                                                {
                                                  {
                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1] = { false };
                                                    _nj6 = 1;
                                                    IkReal x104 = ((1.0) * sj4);
                                                    IkReal x105 = (cj4 * new_r01);
                                                    CheckValue<IkReal> x106 = IKPowWithIntegerCheck(cj4, -1);
                                                    if (!x106.valid)
                                                    {
                                                      continue;
                                                    }
                                                    CheckValue<IkReal> x107 = IKPowWithIntegerCheck(new_r22, -1);
                                                    if (!x107.valid)
                                                    {
                                                      continue;
                                                    }
                                                    if (IKabs(((((-1.0) * new_r11 * x104)) + (((-1.0) * x105)))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs((
                                                            (x106.value) * (x107.value) *
                                                            (((((-1.0) * x104 * x105)) + ((new_r11 * (cj4 * cj4))))))) <
                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((((-1.0) * new_r11 * x104)) + (((-1.0) * x105)))) +
                                                              IKsqr(((x106.value) * (x107.value) *
                                                                     (((((-1.0) * x104 * x105)) +
                                                                       ((new_r11 * (cj4 * cj4))))))) -
                                                              1) <= IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j6array[0] = IKatan2(
                                                        ((((-1.0) * new_r11 * x104)) + (((-1.0) * x105))),
                                                        ((x106.value) * (x107.value) *
                                                         (((((-1.0) * x104 * x105)) + ((new_r11 * (cj4 * cj4)))))));
                                                    sj6array[0] = IKsin(j6array[0]);
                                                    cj6array[0] = IKcos(j6array[0]);
                                                    if (j6array[0] > IKPI)
                                                    {
                                                      j6array[0] -= IK2PI;
                                                    }
                                                    else if (j6array[0] < -IKPI)
                                                    {
                                                      j6array[0] += IK2PI;
                                                    }
                                                    j6valid[0] = true;
                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                    {
                                                      if (!j6valid[ij6])
                                                      {
                                                        continue;
                                                      }
                                                      _ij6[0] = ij6;
                                                      _ij6[1] = -1;
                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                      {
                                                        if (j6valid[iij6] &&
                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j6valid[iij6] = false;
                                                          _ij6[1] = iij6;
                                                          break;
                                                        }
                                                      }
                                                      j6 = j6array[ij6];
                                                      cj6 = cj6array[ij6];
                                                      sj6 = sj6array[ij6];
                                                      {
                                                        IkReal evalcond[10];
                                                        IkReal x108 = IKcos(j6);
                                                        IkReal x109 = IKsin(j6);
                                                        IkReal x110 = (cj4 * new_r22);
                                                        IkReal x111 = ((1.0) * sj4);
                                                        IkReal x112 = ((1.0) * x108);
                                                        IkReal x113 = (sj4 * x109);
                                                        IkReal x114 = ((1.0) * x109);
                                                        evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x109);
                                                        evalcond[1] =
                                                            (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x112)));
                                                        evalcond[2] =
                                                            (((new_r22 * sj4 * x108)) + ((cj4 * x109)) + new_r01);
                                                        evalcond[3] = ((((-1.0) * x110 * x112)) + x113 + new_r11);
                                                        evalcond[4] = ((((-1.0) * new_r00 * x111)) + ((cj4 * new_r10)) +
                                                                       (((-1.0) * new_r22 * x114)));
                                                        evalcond[5] = ((((-1.0) * new_r01 * x111)) + ((cj4 * new_r11)) +
                                                                       (((-1.0) * new_r22 * x112)));
                                                        evalcond[6] =
                                                            (((new_r22 * x113)) + (((-1.0) * cj4 * x112)) + new_r00);
                                                        evalcond[7] = ((((-1.0) * x110 * x114)) +
                                                                       (((-1.0) * x108 * x111)) + new_r10);
                                                        evalcond[8] =
                                                            (((new_r10 * x110)) +
                                                             (((-1.0) * new_r00 * new_r22 * x111)) + (((-1.0) * x114)));
                                                        evalcond[9] = (((new_r11 * x110)) + (((-1.0) * x112)) +
                                                                       (((-1.0) * new_r01 * new_r22 * x111)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 17;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            else
                                            {
                                              {
                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1] = { false };
                                                _nj6 = 1;
                                                IkReal x115 = ((1.0) * sj4);
                                                CheckValue<IkReal> x116 = IKPowWithIntegerCheck(new_r22, -1);
                                                if (!x116.valid)
                                                {
                                                  continue;
                                                }
                                                if (IKabs(((((-1.0) * cj4 * new_r01)) + (((-1.0) * new_r11 * x115)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((x116.value) *
                                                           (((((-1.0) * new_r01 * x115)) + ((cj4 * new_r11)))))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((((-1.0) * cj4 * new_r01)) +
                                                                 (((-1.0) * new_r11 * x115)))) +
                                                          IKsqr(((x116.value) *
                                                                 (((((-1.0) * new_r01 * x115)) + ((cj4 * new_r11)))))) -
                                                          1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j6array[0] =
                                                    IKatan2(((((-1.0) * cj4 * new_r01)) + (((-1.0) * new_r11 * x115))),
                                                            ((x116.value) *
                                                             (((((-1.0) * new_r01 * x115)) + ((cj4 * new_r11))))));
                                                sj6array[0] = IKsin(j6array[0]);
                                                cj6array[0] = IKcos(j6array[0]);
                                                if (j6array[0] > IKPI)
                                                {
                                                  j6array[0] -= IK2PI;
                                                }
                                                else if (j6array[0] < -IKPI)
                                                {
                                                  j6array[0] += IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                {
                                                  if (!j6valid[ij6])
                                                  {
                                                    continue;
                                                  }
                                                  _ij6[0] = ij6;
                                                  _ij6[1] = -1;
                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                  {
                                                    if (j6valid[iij6] &&
                                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j6valid[iij6] = false;
                                                      _ij6[1] = iij6;
                                                      break;
                                                    }
                                                  }
                                                  j6 = j6array[ij6];
                                                  cj6 = cj6array[ij6];
                                                  sj6 = sj6array[ij6];
                                                  {
                                                    IkReal evalcond[10];
                                                    IkReal x117 = IKcos(j6);
                                                    IkReal x118 = IKsin(j6);
                                                    IkReal x119 = (cj4 * new_r22);
                                                    IkReal x120 = ((1.0) * sj4);
                                                    IkReal x121 = ((1.0) * x117);
                                                    IkReal x122 = (sj4 * x118);
                                                    IkReal x123 = ((1.0) * x118);
                                                    evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x118);
                                                    evalcond[1] =
                                                        (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x121)));
                                                    evalcond[2] = (((new_r22 * sj4 * x117)) + ((cj4 * x118)) + new_r01);
                                                    evalcond[3] = ((((-1.0) * x119 * x121)) + x122 + new_r11);
                                                    evalcond[4] = (((cj4 * new_r10)) + (((-1.0) * new_r00 * x120)) +
                                                                   (((-1.0) * new_r22 * x123)));
                                                    evalcond[5] = ((((-1.0) * new_r01 * x120)) + ((cj4 * new_r11)) +
                                                                   (((-1.0) * new_r22 * x121)));
                                                    evalcond[6] =
                                                        (((new_r22 * x122)) + (((-1.0) * cj4 * x121)) + new_r00);
                                                    evalcond[7] =
                                                        ((((-1.0) * x119 * x123)) + (((-1.0) * x117 * x120)) + new_r10);
                                                    evalcond[8] =
                                                        (((new_r10 * x119)) + (((-1.0) * new_r00 * new_r22 * x120)) +
                                                         (((-1.0) * x123)));
                                                    evalcond[9] =
                                                        (((new_r11 * x119)) + (((-1.0) * new_r01 * new_r22 * x120)) +
                                                         (((-1.0) * x121)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 17;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                        else
                                        {
                                          {
                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1] = { false };
                                            _nj6 = 1;
                                            IkReal x124 = new_r22 * new_r22;
                                            IkReal x125 = cj4 * cj4;
                                            IkReal x126 = (new_r22 * sj4);
                                            CheckValue<IkReal> x127 = IKPowWithIntegerCheck(
                                                IKsign((((x124 * x125)) + (((-1.0) * x124)) + (((-1.0) * x125)))), -1);
                                            if (!x127.valid)
                                            {
                                              continue;
                                            }
                                            CheckValue<IkReal> x128 = IKatan2WithCheck(
                                                IkReal((((cj4 * new_r01)) + ((new_r00 * x126)))),
                                                IkReal(((((-1.0) * cj4 * new_r00)) + ((new_r01 * x126)))),
                                                IKFAST_ATAN2_MAGTHRESH);
                                            if (!x128.valid)
                                            {
                                              continue;
                                            }
                                            j6array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x127.value))) +
                                                          (x128.value));
                                            sj6array[0] = IKsin(j6array[0]);
                                            cj6array[0] = IKcos(j6array[0]);
                                            if (j6array[0] > IKPI)
                                            {
                                              j6array[0] -= IK2PI;
                                            }
                                            else if (j6array[0] < -IKPI)
                                            {
                                              j6array[0] += IK2PI;
                                            }
                                            j6valid[0] = true;
                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                            {
                                              if (!j6valid[ij6])
                                              {
                                                continue;
                                              }
                                              _ij6[0] = ij6;
                                              _ij6[1] = -1;
                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                              {
                                                if (j6valid[iij6] &&
                                                    IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                  j6valid[iij6] = false;
                                                  _ij6[1] = iij6;
                                                  break;
                                                }
                                              }
                                              j6 = j6array[ij6];
                                              cj6 = cj6array[ij6];
                                              sj6 = sj6array[ij6];
                                              {
                                                IkReal evalcond[10];
                                                IkReal x129 = IKcos(j6);
                                                IkReal x130 = IKsin(j6);
                                                IkReal x131 = (cj4 * new_r22);
                                                IkReal x132 = ((1.0) * sj4);
                                                IkReal x133 = ((1.0) * x129);
                                                IkReal x134 = (sj4 * x130);
                                                IkReal x135 = ((1.0) * x130);
                                                evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x130);
                                                evalcond[1] =
                                                    (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x133)));
                                                evalcond[2] = (((new_r22 * sj4 * x129)) + new_r01 + ((cj4 * x130)));
                                                evalcond[3] = (x134 + new_r11 + (((-1.0) * x131 * x133)));
                                                evalcond[4] = (((cj4 * new_r10)) + (((-1.0) * new_r00 * x132)) +
                                                               (((-1.0) * new_r22 * x135)));
                                                evalcond[5] = ((((-1.0) * new_r01 * x132)) + ((cj4 * new_r11)) +
                                                               (((-1.0) * new_r22 * x133)));
                                                evalcond[6] = (((new_r22 * x134)) + new_r00 + (((-1.0) * cj4 * x133)));
                                                evalcond[7] =
                                                    ((((-1.0) * x129 * x132)) + new_r10 + (((-1.0) * x131 * x135)));
                                                evalcond[8] = ((((-1.0) * new_r00 * new_r22 * x132)) +
                                                               (((-1.0) * x135)) + ((new_r10 * x131)));
                                                evalcond[9] = ((((-1.0) * new_r01 * new_r22 * x132)) +
                                                               (((-1.0) * x133)) + ((new_r11 * x131)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH)
                                                {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 17;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 17;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 17;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 17;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j6;
                                                vinfos[6].indices[0] = _ij6[0];
                                                vinfos[6].indices[1] = _ij6[1];
                                                vinfos[6].maxsolutions = _nj6;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement)
                            {
                              bool bgotonextstatement = true;
                              do
                              {
                                if (1)
                                {
                                  bgotonextstatement = false;
                                  continue;  // branch miss [j4, j6]
                                }
                              } while (0);
                              if (bgotonextstatement) {}
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1] = { false };
                        _nj4 = 1;
                        CheckValue<IkReal> x137 = IKPowWithIntegerCheck(cj5, -1);
                        if (!x137.valid)
                        {
                          continue;
                        }
                        IkReal x136 = x137.value;
                        CheckValue<IkReal> x138 = IKPowWithIntegerCheck(new_r02, -1);
                        if (!x138.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x139 = IKPowWithIntegerCheck(x136, -2);
                        if (!x139.valid)
                        {
                          continue;
                        }
                        if (IKabs((x136 * (x138.value) * (((x139.value) + (((-1.0) * (new_r12 * new_r12))))))) <
                                IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(((-1.0) * new_r12 * x136)) < IKFAST_ATAN2_MAGTHRESH &&
                            IKabs(IKsqr((x136 * (x138.value) * (((x139.value) + (((-1.0) * (new_r12 * new_r12))))))) +
                                  IKsqr(((-1.0) * new_r12 * x136)) - 1) <= IKFAST_SINCOS_THRESH)
                          continue;
                        j4array[0] =
                            IKatan2((x136 * (x138.value) * (((x139.value) + (((-1.0) * (new_r12 * new_r12)))))),
                                    ((-1.0) * new_r12 * x136));
                        sj4array[0] = IKsin(j4array[0]);
                        cj4array[0] = IKcos(j4array[0]);
                        if (j4array[0] > IKPI)
                        {
                          j4array[0] -= IK2PI;
                        }
                        else if (j4array[0] < -IKPI)
                        {
                          j4array[0] += IK2PI;
                        }
                        j4valid[0] = true;
                        for (int ij4 = 0; ij4 < 1; ++ij4)
                        {
                          if (!j4valid[ij4])
                          {
                            continue;
                          }
                          _ij4[0] = ij4;
                          _ij4[1] = -1;
                          for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                          {
                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                            {
                              j4valid[iij4] = false;
                              _ij4[1] = iij4;
                              break;
                            }
                          }
                          j4 = j4array[ij4];
                          cj4 = cj4array[ij4];
                          sj4 = sj4array[ij4];
                          {
                            IkReal evalcond[8];
                            IkReal x140 = IKcos(j4);
                            IkReal x141 = IKsin(j4);
                            IkReal x142 = (new_r12 * x140);
                            IkReal x143 = (cj5 * x140);
                            IkReal x144 = (new_r02 * x141);
                            IkReal x145 = ((1.0) * cj5 * x141);
                            evalcond[0] = (x143 + new_r12);
                            evalcond[1] = ((((-1.0) * x145)) + new_r02);
                            evalcond[2] = (((new_r12 * x141)) + ((new_r02 * x140)));
                            evalcond[3] = (cj5 + x142 + (((-1.0) * x144)));
                            evalcond[4] = (((new_r20 * sj5)) + ((new_r10 * x143)) + (((-1.0) * new_r00 * x145)));
                            evalcond[5] = ((((-1.0) * new_r01 * x145)) + ((new_r11 * x143)) + ((new_r21 * sj5)));
                            evalcond[6] = ((((-1.0) * sj5 * x142)) + ((cj5 * new_r22)) + ((sj5 * x144)));
                            evalcond[7] = ((1.0) + ((cj5 * x142)) + (((-1.0) * cj5 * x144)) + ((new_r22 * sj5)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          {
                            IkReal j6eval[3];
                            j6eval[0] = cj5;
                            j6eval[1] = IKsign(cj5);
                            j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                                IKabs(j6eval[2]) < 0.0000010000000000)
                            {
                              {
                                IkReal j6eval[2];
                                j6eval[0] = cj5;
                                j6eval[1] = sj4;
                                if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal j6eval[3];
                                    j6eval[0] = cj5;
                                    j6eval[1] = sj4;
                                    j6eval[2] = sj5;
                                    if (IKabs(j6eval[0]) < 0.0000010000000000 ||
                                        IKabs(j6eval[1]) < 0.0000010000000000 || IKabs(j6eval[2]) < 0.0000010000000000)
                                    {
                                      {
                                        IkReal evalcond[5];
                                        bool bgotonextstatement = true;
                                        do
                                        {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                       6.28318530717959)));
                                          evalcond[1] = new_r12;
                                          evalcond[2] = new_r02;
                                          evalcond[3] = new_r20;
                                          evalcond[4] = new_r21;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000 &&
                                              IKabs(evalcond[2]) < 0.0000050000000000 &&
                                              IKabs(evalcond[3]) < 0.0000050000000000 &&
                                              IKabs(evalcond[4]) < 0.0000050000000000)
                                          {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j6array[1], cj6array[1], sj6array[1];
                                              bool j6valid[1] = { false };
                                              _nj6 = 1;
                                              IkReal x146 = ((1.0) * new_r11);
                                              if (IKabs(((((-1.0) * cj4 * new_r01)) + (((-1.0) * sj4 * x146)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs((((new_r01 * sj4)) + (((-1.0) * cj4 * x146)))) <
                                                      IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((((-1.0) * cj4 * new_r01)) + (((-1.0) * sj4 * x146)))) +
                                                        IKsqr((((new_r01 * sj4)) + (((-1.0) * cj4 * x146)))) - 1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j6array[0] =
                                                  IKatan2(((((-1.0) * cj4 * new_r01)) + (((-1.0) * sj4 * x146))),
                                                          (((new_r01 * sj4)) + (((-1.0) * cj4 * x146))));
                                              sj6array[0] = IKsin(j6array[0]);
                                              cj6array[0] = IKcos(j6array[0]);
                                              if (j6array[0] > IKPI)
                                              {
                                                j6array[0] -= IK2PI;
                                              }
                                              else if (j6array[0] < -IKPI)
                                              {
                                                j6array[0] += IK2PI;
                                              }
                                              j6valid[0] = true;
                                              for (int ij6 = 0; ij6 < 1; ++ij6)
                                              {
                                                if (!j6valid[ij6])
                                                {
                                                  continue;
                                                }
                                                _ij6[0] = ij6;
                                                _ij6[1] = -1;
                                                for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                {
                                                  if (j6valid[iij6] &&
                                                      IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j6valid[iij6] = false;
                                                    _ij6[1] = iij6;
                                                    break;
                                                  }
                                                }
                                                j6 = j6array[ij6];
                                                cj6 = cj6array[ij6];
                                                sj6 = sj6array[ij6];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x147 = IKsin(j6);
                                                  IkReal x148 = IKcos(j6);
                                                  IkReal x149 = ((1.0) * sj4);
                                                  IkReal x150 = (cj4 * x147);
                                                  IkReal x151 = ((1.0) * x148);
                                                  IkReal x152 = (x148 * x149);
                                                  evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x147);
                                                  evalcond[1] =
                                                      (((cj4 * new_r10)) + x147 + (((-1.0) * new_r00 * x149)));
                                                  evalcond[2] =
                                                      ((((-1.0) * new_r01 * x149)) + ((cj4 * new_r11)) + x148);
                                                  evalcond[3] =
                                                      ((((-1.0) * x151)) + ((cj4 * new_r00)) + ((new_r10 * sj4)));
                                                  evalcond[4] = (((sj4 * x147)) + new_r11 + ((cj4 * x148)));
                                                  evalcond[5] = ((((-1.0) * x152)) + x150 + new_r01);
                                                  evalcond[6] = ((((-1.0) * x152)) + x150 + new_r10);
                                                  evalcond[7] =
                                                      ((((-1.0) * x147 * x149)) + new_r00 + (((-1.0) * cj4 * x151)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement)
                                        {
                                          bool bgotonextstatement = true;
                                          do
                                          {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r12;
                                            evalcond[2] = new_r02;
                                            evalcond[3] = new_r20;
                                            evalcond[4] = new_r21;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000 &&
                                                IKabs(evalcond[2]) < 0.0000050000000000 &&
                                                IKabs(evalcond[3]) < 0.0000050000000000 &&
                                                IKabs(evalcond[4]) < 0.0000050000000000)
                                            {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1] = { false };
                                                _nj6 = 1;
                                                IkReal x153 = ((1.0) * sj4);
                                                if (IKabs(((((-1.0) * cj4 * new_r01)) + (((-1.0) * new_r11 * x153)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs((((cj4 * new_r11)) + (((-1.0) * new_r01 * x153)))) <
                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(((((-1.0) * cj4 * new_r01)) +
                                                                 (((-1.0) * new_r11 * x153)))) +
                                                          IKsqr((((cj4 * new_r11)) + (((-1.0) * new_r01 * x153)))) -
                                                          1) <= IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j6array[0] =
                                                    IKatan2(((((-1.0) * cj4 * new_r01)) + (((-1.0) * new_r11 * x153))),
                                                            (((cj4 * new_r11)) + (((-1.0) * new_r01 * x153))));
                                                sj6array[0] = IKsin(j6array[0]);
                                                cj6array[0] = IKcos(j6array[0]);
                                                if (j6array[0] > IKPI)
                                                {
                                                  j6array[0] -= IK2PI;
                                                }
                                                else if (j6array[0] < -IKPI)
                                                {
                                                  j6array[0] += IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                {
                                                  if (!j6valid[ij6])
                                                  {
                                                    continue;
                                                  }
                                                  _ij6[0] = ij6;
                                                  _ij6[1] = -1;
                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                  {
                                                    if (j6valid[iij6] &&
                                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j6valid[iij6] = false;
                                                      _ij6[1] = iij6;
                                                      break;
                                                    }
                                                  }
                                                  j6 = j6array[ij6];
                                                  cj6 = cj6array[ij6];
                                                  sj6 = sj6array[ij6];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x154 = IKcos(j6);
                                                    IkReal x155 = IKsin(j6);
                                                    IkReal x156 = ((1.0) * sj4);
                                                    IkReal x157 = ((1.0) * x154);
                                                    IkReal x158 = (sj4 * x155);
                                                    IkReal x159 = (sj4 * x154);
                                                    IkReal x160 = (cj4 * x155);
                                                    IkReal x161 = (cj4 * x157);
                                                    evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x155);
                                                    evalcond[1] =
                                                        ((((-1.0) * x157)) + ((cj4 * new_r00)) + ((new_r10 * sj4)));
                                                    evalcond[2] = (x160 + x159 + new_r01);
                                                    evalcond[3] = ((((-1.0) * x161)) + x158 + new_r11);
                                                    evalcond[4] = (((cj4 * new_r10)) + (((-1.0) * x155)) +
                                                                   (((-1.0) * new_r00 * x156)));
                                                    evalcond[5] = ((((-1.0) * x157)) + ((cj4 * new_r11)) +
                                                                   (((-1.0) * new_r01 * x156)));
                                                    evalcond[6] = ((((-1.0) * x161)) + x158 + new_r00);
                                                    evalcond[7] =
                                                        ((((-1.0) * x154 * x156)) + (((-1.0) * x160)) + new_r10);
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 17;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement)
                                          {
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                              evalcond[1] = new_r02;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000)
                                              {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j6array[1], cj6array[1], sj6array[1];
                                                  bool j6valid[1] = { false };
                                                  _nj6 = 1;
                                                  if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <=
                                                          IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j6array[0] = IKatan2(((-1.0) * new_r01), new_r00);
                                                  sj6array[0] = IKsin(j6array[0]);
                                                  cj6array[0] = IKcos(j6array[0]);
                                                  if (j6array[0] > IKPI)
                                                  {
                                                    j6array[0] -= IK2PI;
                                                  }
                                                  else if (j6array[0] < -IKPI)
                                                  {
                                                    j6array[0] += IK2PI;
                                                  }
                                                  j6valid[0] = true;
                                                  for (int ij6 = 0; ij6 < 1; ++ij6)
                                                  {
                                                    if (!j6valid[ij6])
                                                    {
                                                      continue;
                                                    }
                                                    _ij6[0] = ij6;
                                                    _ij6[1] = -1;
                                                    for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                    {
                                                      if (j6valid[iij6] &&
                                                          IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j6valid[iij6] = false;
                                                        _ij6[1] = iij6;
                                                        break;
                                                      }
                                                    }
                                                    j6 = j6array[ij6];
                                                    cj6 = cj6array[ij6];
                                                    sj6 = sj6array[ij6];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x162 = IKsin(j6);
                                                      IkReal x163 = IKcos(j6);
                                                      IkReal x164 = ((1.0) * sj5);
                                                      IkReal x165 = ((1.0) * x163);
                                                      evalcond[0] = (x162 + new_r01);
                                                      evalcond[1] = (((new_r12 * x162)) + new_r20);
                                                      evalcond[2] = (((new_r12 * x163)) + new_r21);
                                                      evalcond[3] = ((((-1.0) * x165)) + new_r00);
                                                      evalcond[4] = (new_r11 + ((sj5 * x163)));
                                                      evalcond[5] = (new_r10 + ((sj5 * x162)));
                                                      evalcond[6] = ((((-1.0) * new_r10 * x164)) + ((cj5 * new_r20)) +
                                                                     (((-1.0) * x162)));
                                                      evalcond[7] = ((((-1.0) * x165)) + (((-1.0) * new_r11 * x164)) +
                                                                     ((cj5 * new_r21)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 17;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r02;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1] = { false };
                                                    _nj6 = 1;
                                                    if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r00)) - 1) <=
                                                            IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j6array[0] = IKatan2(new_r01, ((-1.0) * new_r00));
                                                    sj6array[0] = IKsin(j6array[0]);
                                                    cj6array[0] = IKcos(j6array[0]);
                                                    if (j6array[0] > IKPI)
                                                    {
                                                      j6array[0] -= IK2PI;
                                                    }
                                                    else if (j6array[0] < -IKPI)
                                                    {
                                                      j6array[0] += IK2PI;
                                                    }
                                                    j6valid[0] = true;
                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                    {
                                                      if (!j6valid[ij6])
                                                      {
                                                        continue;
                                                      }
                                                      _ij6[0] = ij6;
                                                      _ij6[1] = -1;
                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                      {
                                                        if (j6valid[iij6] &&
                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j6valid[iij6] = false;
                                                          _ij6[1] = iij6;
                                                          break;
                                                        }
                                                      }
                                                      j6 = j6array[ij6];
                                                      cj6 = cj6array[ij6];
                                                      sj6 = sj6array[ij6];
                                                      {
                                                        IkReal evalcond[8];
                                                        IkReal x166 = IKsin(j6);
                                                        IkReal x167 = IKcos(j6);
                                                        IkReal x168 = ((1.0) * x167);
                                                        IkReal x169 = ((1.0) * x166);
                                                        evalcond[0] = (x166 + (((-1.0) * new_r01)));
                                                        evalcond[1] = ((((-1.0) * new_r12 * x169)) + new_r20);
                                                        evalcond[2] = ((((-1.0) * new_r12 * x168)) + new_r21);
                                                        evalcond[3] = ((((-1.0) * sj5 * x168)) + new_r11);
                                                        evalcond[4] = ((((-1.0) * x168)) + (((-1.0) * new_r00)));
                                                        evalcond[5] = ((((-1.0) * new_r10)) + ((sj5 * x166)));
                                                        evalcond[6] =
                                                            ((((-1.0) * x169)) + ((new_r10 * sj5)) + ((cj5 * new_r20)));
                                                        evalcond[7] =
                                                            ((((-1.0) * x168)) + ((new_r11 * sj5)) + ((cj5 * new_r21)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 17;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(j5))), 6.28318530717959)));
                                                  evalcond[1] = new_r22;
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                      IKabs(evalcond[1]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j6array[1], cj6array[1], sj6array[1];
                                                      bool j6valid[1] = { false };
                                                      _nj6 = 1;
                                                      if (IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                          IKabs(IKsqr(new_r20) + IKsqr(new_r21) - 1) <=
                                                              IKFAST_SINCOS_THRESH)
                                                        continue;
                                                      j6array[0] = IKatan2(new_r20, new_r21);
                                                      sj6array[0] = IKsin(j6array[0]);
                                                      cj6array[0] = IKcos(j6array[0]);
                                                      if (j6array[0] > IKPI)
                                                      {
                                                        j6array[0] -= IK2PI;
                                                      }
                                                      else if (j6array[0] < -IKPI)
                                                      {
                                                        j6array[0] += IK2PI;
                                                      }
                                                      j6valid[0] = true;
                                                      for (int ij6 = 0; ij6 < 1; ++ij6)
                                                      {
                                                        if (!j6valid[ij6])
                                                        {
                                                          continue;
                                                        }
                                                        _ij6[0] = ij6;
                                                        _ij6[1] = -1;
                                                        for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                        {
                                                          if (j6valid[iij6] &&
                                                              IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH &&
                                                              IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                  IKFAST_SOLUTION_THRESH)
                                                          {
                                                            j6valid[iij6] = false;
                                                            _ij6[1] = iij6;
                                                            break;
                                                          }
                                                        }
                                                        j6 = j6array[ij6];
                                                        cj6 = cj6array[ij6];
                                                        sj6 = sj6array[ij6];
                                                        {
                                                          IkReal evalcond[8];
                                                          IkReal x170 = IKsin(j6);
                                                          IkReal x171 = IKcos(j6);
                                                          IkReal x172 = ((1.0) * x171);
                                                          evalcond[0] = ((((-1.0) * x170)) + new_r20);
                                                          evalcond[1] = ((((-1.0) * x172)) + new_r21);
                                                          evalcond[2] = (((sj4 * x170)) + new_r11);
                                                          evalcond[3] = (((cj4 * x170)) + new_r01);
                                                          evalcond[4] = ((((-1.0) * new_r02 * x172)) + new_r10);
                                                          evalcond[5] = ((((-1.0) * cj4 * x172)) + new_r00);
                                                          evalcond[6] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x170);
                                                          evalcond[7] = (((cj4 * new_r00)) + ((new_r10 * sj4)) +
                                                                         (((-1.0) * x172)));
                                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                          {
                                                            continue;
                                                          }
                                                        }

                                                        {
                                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                          vinfos[0].jointtype = 17;
                                                          vinfos[0].foffset = j0;
                                                          vinfos[0].indices[0] = _ij0[0];
                                                          vinfos[0].indices[1] = _ij0[1];
                                                          vinfos[0].maxsolutions = _nj0;
                                                          vinfos[1].jointtype = 17;
                                                          vinfos[1].foffset = j1;
                                                          vinfos[1].indices[0] = _ij1[0];
                                                          vinfos[1].indices[1] = _ij1[1];
                                                          vinfos[1].maxsolutions = _nj1;
                                                          vinfos[2].jointtype = 17;
                                                          vinfos[2].foffset = j2;
                                                          vinfos[2].indices[0] = _ij2[0];
                                                          vinfos[2].indices[1] = _ij2[1];
                                                          vinfos[2].maxsolutions = _nj2;
                                                          vinfos[3].jointtype = 17;
                                                          vinfos[3].foffset = j3;
                                                          vinfos[3].indices[0] = _ij3[0];
                                                          vinfos[3].indices[1] = _ij3[1];
                                                          vinfos[3].maxsolutions = _nj3;
                                                          vinfos[4].jointtype = 1;
                                                          vinfos[4].foffset = j4;
                                                          vinfos[4].indices[0] = _ij4[0];
                                                          vinfos[4].indices[1] = _ij4[1];
                                                          vinfos[4].maxsolutions = _nj4;
                                                          vinfos[5].jointtype = 1;
                                                          vinfos[5].foffset = j5;
                                                          vinfos[5].indices[0] = _ij5[0];
                                                          vinfos[5].indices[1] = _ij5[1];
                                                          vinfos[5].maxsolutions = _nj5;
                                                          vinfos[6].jointtype = 1;
                                                          vinfos[6].foffset = j6;
                                                          vinfos[6].indices[0] = _ij6[0];
                                                          vinfos[6].indices[1] = _ij6[1];
                                                          vinfos[6].maxsolutions = _nj6;
                                                          std::vector<int> vfree(0);
                                                          solutions.AddSolution(vinfos, vfree);
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    evalcond[0] = ((-3.14159265358979) +
                                                                   (IKfmod(((3.14159265358979) +
                                                                            (IKabs(((-3.14159265358979) + j5)))),
                                                                           6.28318530717959)));
                                                    evalcond[1] = new_r22;
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                        IKabs(evalcond[1]) < 0.0000050000000000)
                                                    {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                                        bool j6valid[1] = { false };
                                                        _nj6 = 1;
                                                        if (IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                            IKabs(IKsqr(((-1.0) * new_r20)) +
                                                                  IKsqr(((-1.0) * new_r21)) - 1) <= IKFAST_SINCOS_THRESH)
                                                          continue;
                                                        j6array[0] = IKatan2(((-1.0) * new_r20), ((-1.0) * new_r21));
                                                        sj6array[0] = IKsin(j6array[0]);
                                                        cj6array[0] = IKcos(j6array[0]);
                                                        if (j6array[0] > IKPI)
                                                        {
                                                          j6array[0] -= IK2PI;
                                                        }
                                                        else if (j6array[0] < -IKPI)
                                                        {
                                                          j6array[0] += IK2PI;
                                                        }
                                                        j6valid[0] = true;
                                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                                        {
                                                          if (!j6valid[ij6])
                                                          {
                                                            continue;
                                                          }
                                                          _ij6[0] = ij6;
                                                          _ij6[1] = -1;
                                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                          {
                                                            if (j6valid[iij6] &&
                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j6valid[iij6] = false;
                                                              _ij6[1] = iij6;
                                                              break;
                                                            }
                                                          }
                                                          j6 = j6array[ij6];
                                                          cj6 = cj6array[ij6];
                                                          sj6 = sj6array[ij6];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x173 = IKsin(j6);
                                                            IkReal x174 = IKcos(j6);
                                                            IkReal x175 = ((1.0) * x174);
                                                            evalcond[0] = (x173 + new_r20);
                                                            evalcond[1] = (x174 + new_r21);
                                                            evalcond[2] = (((sj4 * x173)) + new_r11);
                                                            evalcond[3] = (((cj4 * x173)) + new_r01);
                                                            evalcond[4] = (((new_r02 * x174)) + new_r10);
                                                            evalcond[5] = ((((-1.0) * cj4 * x175)) + new_r00);
                                                            evalcond[6] =
                                                                (((cj4 * new_r01)) + ((new_r11 * sj4)) + x173);
                                                            evalcond[7] = (((cj4 * new_r00)) + ((new_r10 * sj4)) +
                                                                           (((-1.0) * x175)));
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 17;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement)
                                                  {
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j6eval[1];
                                                          new_r21 = 0;
                                                          new_r20 = 0;
                                                          new_r02 = 0;
                                                          new_r12 = 0;
                                                          j6eval[0] = 1.0;
                                                          if (IKabs(j6eval[0]) < 0.0000000100000000)
                                                          {
                                                            continue;  // no branches [j6]
                                                          }
                                                          else
                                                          {
                                                            IkReal op[2 + 1], zeror[2];
                                                            int numroots;
                                                            op[0] = 1.0;
                                                            op[1] = 0;
                                                            op[2] = -1.0;
                                                            polyroots2(op, zeror, numroots);
                                                            IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
                                                            int numsolutions = 0;
                                                            for (int ij6 = 0; ij6 < numroots; ++ij6)
                                                            {
                                                              IkReal htj6 = zeror[ij6];
                                                              tempj6array[0] = ((2.0) * (atan(htj6)));
                                                              for (int kj6 = 0; kj6 < 1; ++kj6)
                                                              {
                                                                j6array[numsolutions] = tempj6array[kj6];
                                                                if (j6array[numsolutions] > IKPI)
                                                                {
                                                                  j6array[numsolutions] -= IK2PI;
                                                                }
                                                                else if (j6array[numsolutions] < -IKPI)
                                                                {
                                                                  j6array[numsolutions] += IK2PI;
                                                                }
                                                                sj6array[numsolutions] = IKsin(j6array[numsolutions]);
                                                                cj6array[numsolutions] = IKcos(j6array[numsolutions]);
                                                                numsolutions++;
                                                              }
                                                            }
                                                            bool j6valid[2] = { true, true };
                                                            _nj6 = 2;
                                                            for (int ij6 = 0; ij6 < numsolutions; ++ij6)
                                                            {
                                                              if (!j6valid[ij6])
                                                              {
                                                                continue;
                                                              }
                                                              j6 = j6array[ij6];
                                                              cj6 = cj6array[ij6];
                                                              sj6 = sj6array[ij6];
                                                              htj6 = IKtan(j6 / 2);

                                                              _ij6[0] = ij6;
                                                              _ij6[1] = -1;
                                                              for (int iij6 = ij6 + 1; iij6 < numsolutions; ++iij6)
                                                              {
                                                                if (j6valid[iij6] &&
                                                                    IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j6valid[iij6] = false;
                                                                  _ij6[1] = iij6;
                                                                  break;
                                                                }
                                                              }
                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        if (1)
                                                        {
                                                          bgotonextstatement = false;
                                                          continue;  // branch miss [j6]
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement) {}
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    else
                                    {
                                      {
                                        IkReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1] = { false };
                                        _nj6 = 1;
                                        CheckValue<IkReal> x177 = IKPowWithIntegerCheck(cj5, -1);
                                        if (!x177.valid)
                                        {
                                          continue;
                                        }
                                        IkReal x176 = x177.value;
                                        CheckValue<IkReal> x178 = IKPowWithIntegerCheck(sj4, -1);
                                        if (!x178.valid)
                                        {
                                          continue;
                                        }
                                        CheckValue<IkReal> x179 = IKPowWithIntegerCheck(sj5, -1);
                                        if (!x179.valid)
                                        {
                                          continue;
                                        }
                                        if (IKabs((new_r20 * x176)) < IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs((x176 * (x178.value) * (x179.value) *
                                                   ((((cj5 * new_r01)) + ((cj4 * new_r20)))))) <
                                                IKFAST_ATAN2_MAGTHRESH &&
                                            IKabs(IKsqr((new_r20 * x176)) +
                                                  IKsqr((x176 * (x178.value) * (x179.value) *
                                                         ((((cj5 * new_r01)) + ((cj4 * new_r20)))))) -
                                                  1) <= IKFAST_SINCOS_THRESH)
                                          continue;
                                        j6array[0] =
                                            IKatan2((new_r20 * x176), (x176 * (x178.value) * (x179.value) *
                                                                       ((((cj5 * new_r01)) + ((cj4 * new_r20))))));
                                        sj6array[0] = IKsin(j6array[0]);
                                        cj6array[0] = IKcos(j6array[0]);
                                        if (j6array[0] > IKPI)
                                        {
                                          j6array[0] -= IK2PI;
                                        }
                                        else if (j6array[0] < -IKPI)
                                        {
                                          j6array[0] += IK2PI;
                                        }
                                        j6valid[0] = true;
                                        for (int ij6 = 0; ij6 < 1; ++ij6)
                                        {
                                          if (!j6valid[ij6])
                                          {
                                            continue;
                                          }
                                          _ij6[0] = ij6;
                                          _ij6[1] = -1;
                                          for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                          {
                                            if (j6valid[iij6] &&
                                                IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                            {
                                              j6valid[iij6] = false;
                                              _ij6[1] = iij6;
                                              break;
                                            }
                                          }
                                          j6 = j6array[ij6];
                                          cj6 = cj6array[ij6];
                                          sj6 = sj6array[ij6];
                                          {
                                            IkReal evalcond[12];
                                            IkReal x180 = IKsin(j6);
                                            IkReal x181 = IKcos(j6);
                                            IkReal x182 = ((1.0) * sj4);
                                            IkReal x183 = (sj4 * sj5);
                                            IkReal x184 = ((1.0) * x181);
                                            IkReal x185 = (sj5 * x180);
                                            IkReal x186 = ((1.0) * cj4 * sj5);
                                            IkReal x187 = (sj5 * x181);
                                            IkReal x188 = ((1.0) * x180);
                                            IkReal x189 = (x181 * x182);
                                            evalcond[0] = ((((-1.0) * cj5 * x188)) + new_r20);
                                            evalcond[1] = ((((-1.0) * cj5 * x184)) + new_r21);
                                            evalcond[2] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x180);
                                            evalcond[3] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x184)));
                                            evalcond[4] = (((sj4 * x180)) + new_r11 + ((cj4 * x187)));
                                            evalcond[5] = (((cj4 * new_r10)) + x185 + (((-1.0) * new_r00 * x182)));
                                            evalcond[6] = (((cj4 * new_r11)) + x187 + (((-1.0) * new_r01 * x182)));
                                            evalcond[7] = (new_r01 + (((-1.0) * x182 * x187)) + ((cj4 * x180)));
                                            evalcond[8] = ((((-1.0) * x189)) + new_r10 + ((cj4 * x185)));
                                            evalcond[9] =
                                                ((((-1.0) * cj4 * x184)) + new_r00 + (((-1.0) * x182 * x185)));
                                            evalcond[10] = (((new_r00 * x183)) + (((-1.0) * x188)) + ((cj5 * new_r20)) +
                                                            (((-1.0) * new_r10 * x186)));
                                            evalcond[11] = (((new_r01 * x183)) + (((-1.0) * x184)) + ((cj5 * new_r21)) +
                                                            (((-1.0) * new_r11 * x186)));
                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                            {
                                              continue;
                                            }
                                          }

                                          {
                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                            vinfos[0].jointtype = 17;
                                            vinfos[0].foffset = j0;
                                            vinfos[0].indices[0] = _ij0[0];
                                            vinfos[0].indices[1] = _ij0[1];
                                            vinfos[0].maxsolutions = _nj0;
                                            vinfos[1].jointtype = 17;
                                            vinfos[1].foffset = j1;
                                            vinfos[1].indices[0] = _ij1[0];
                                            vinfos[1].indices[1] = _ij1[1];
                                            vinfos[1].maxsolutions = _nj1;
                                            vinfos[2].jointtype = 17;
                                            vinfos[2].foffset = j2;
                                            vinfos[2].indices[0] = _ij2[0];
                                            vinfos[2].indices[1] = _ij2[1];
                                            vinfos[2].maxsolutions = _nj2;
                                            vinfos[3].jointtype = 17;
                                            vinfos[3].foffset = j3;
                                            vinfos[3].indices[0] = _ij3[0];
                                            vinfos[3].indices[1] = _ij3[1];
                                            vinfos[3].maxsolutions = _nj3;
                                            vinfos[4].jointtype = 1;
                                            vinfos[4].foffset = j4;
                                            vinfos[4].indices[0] = _ij4[0];
                                            vinfos[4].indices[1] = _ij4[1];
                                            vinfos[4].maxsolutions = _nj4;
                                            vinfos[5].jointtype = 1;
                                            vinfos[5].foffset = j5;
                                            vinfos[5].indices[0] = _ij5[0];
                                            vinfos[5].indices[1] = _ij5[1];
                                            vinfos[5].maxsolutions = _nj5;
                                            vinfos[6].jointtype = 1;
                                            vinfos[6].foffset = j6;
                                            vinfos[6].indices[0] = _ij6[0];
                                            vinfos[6].indices[1] = _ij6[1];
                                            vinfos[6].maxsolutions = _nj6;
                                            std::vector<int> vfree(0);
                                            solutions.AddSolution(vinfos, vfree);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1] = { false };
                                    _nj6 = 1;
                                    CheckValue<IkReal> x191 = IKPowWithIntegerCheck(cj5, -1);
                                    if (!x191.valid)
                                    {
                                      continue;
                                    }
                                    IkReal x190 = x191.value;
                                    CheckValue<IkReal> x192 = IKPowWithIntegerCheck(sj4, -1);
                                    if (!x192.valid)
                                    {
                                      continue;
                                    }
                                    if (IKabs((x190 * (x192.value) *
                                               (((((-1.0) * cj4 * new_r21 * sj5)) + (((-1.0) * cj5 * new_r11)))))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((new_r21 * x190)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(
                                            IKsqr((x190 * (x192.value) *
                                                   (((((-1.0) * cj4 * new_r21 * sj5)) + (((-1.0) * cj5 * new_r11)))))) +
                                            IKsqr((new_r21 * x190)) - 1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j6array[0] =
                                        IKatan2((x190 * (x192.value) *
                                                 (((((-1.0) * cj4 * new_r21 * sj5)) + (((-1.0) * cj5 * new_r11))))),
                                                (new_r21 * x190));
                                    sj6array[0] = IKsin(j6array[0]);
                                    cj6array[0] = IKcos(j6array[0]);
                                    if (j6array[0] > IKPI)
                                    {
                                      j6array[0] -= IK2PI;
                                    }
                                    else if (j6array[0] < -IKPI)
                                    {
                                      j6array[0] += IK2PI;
                                    }
                                    j6valid[0] = true;
                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                    {
                                      if (!j6valid[ij6])
                                      {
                                        continue;
                                      }
                                      _ij6[0] = ij6;
                                      _ij6[1] = -1;
                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                      {
                                        if (j6valid[iij6] &&
                                            IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j6valid[iij6] = false;
                                          _ij6[1] = iij6;
                                          break;
                                        }
                                      }
                                      j6 = j6array[ij6];
                                      cj6 = cj6array[ij6];
                                      sj6 = sj6array[ij6];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x193 = IKsin(j6);
                                        IkReal x194 = IKcos(j6);
                                        IkReal x195 = ((1.0) * sj4);
                                        IkReal x196 = (sj4 * sj5);
                                        IkReal x197 = ((1.0) * x194);
                                        IkReal x198 = (sj5 * x193);
                                        IkReal x199 = ((1.0) * cj4 * sj5);
                                        IkReal x200 = (sj5 * x194);
                                        IkReal x201 = ((1.0) * x193);
                                        IkReal x202 = (x194 * x195);
                                        evalcond[0] = ((((-1.0) * cj5 * x201)) + new_r20);
                                        evalcond[1] = ((((-1.0) * cj5 * x197)) + new_r21);
                                        evalcond[2] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x193);
                                        evalcond[3] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x197)));
                                        evalcond[4] = (((cj4 * x200)) + ((sj4 * x193)) + new_r11);
                                        evalcond[5] = (((cj4 * new_r10)) + x198 + (((-1.0) * new_r00 * x195)));
                                        evalcond[6] = (((cj4 * new_r11)) + x200 + (((-1.0) * new_r01 * x195)));
                                        evalcond[7] = ((((-1.0) * x195 * x200)) + ((cj4 * x193)) + new_r01);
                                        evalcond[8] = (((cj4 * x198)) + (((-1.0) * x202)) + new_r10);
                                        evalcond[9] = ((((-1.0) * x195 * x198)) + (((-1.0) * cj4 * x197)) + new_r00);
                                        evalcond[10] = (((new_r00 * x196)) + ((cj5 * new_r20)) + (((-1.0) * x201)) +
                                                        (((-1.0) * new_r10 * x199)));
                                        evalcond[11] = (((new_r01 * x196)) + (((-1.0) * x197)) + ((cj5 * new_r21)) +
                                                        (((-1.0) * new_r11 * x199)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 17;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j6;
                                        vinfos[6].indices[0] = _ij6[0];
                                        vinfos[6].indices[1] = _ij6[1];
                                        vinfos[6].maxsolutions = _nj6;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1] = { false };
                                _nj6 = 1;
                                CheckValue<IkReal> x203 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                                if (!x203.valid)
                                {
                                  continue;
                                }
                                CheckValue<IkReal> x204 =
                                    IKatan2WithCheck(IkReal(new_r20), IkReal(new_r21), IKFAST_ATAN2_MAGTHRESH);
                                if (!x204.valid)
                                {
                                  continue;
                                }
                                j6array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x203.value))) + (x204.value));
                                sj6array[0] = IKsin(j6array[0]);
                                cj6array[0] = IKcos(j6array[0]);
                                if (j6array[0] > IKPI)
                                {
                                  j6array[0] -= IK2PI;
                                }
                                else if (j6array[0] < -IKPI)
                                {
                                  j6array[0] += IK2PI;
                                }
                                j6valid[0] = true;
                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                {
                                  if (!j6valid[ij6])
                                  {
                                    continue;
                                  }
                                  _ij6[0] = ij6;
                                  _ij6[1] = -1;
                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                  {
                                    if (j6valid[iij6] &&
                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j6valid[iij6] = false;
                                      _ij6[1] = iij6;
                                      break;
                                    }
                                  }
                                  j6 = j6array[ij6];
                                  cj6 = cj6array[ij6];
                                  sj6 = sj6array[ij6];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x205 = IKsin(j6);
                                    IkReal x206 = IKcos(j6);
                                    IkReal x207 = ((1.0) * sj4);
                                    IkReal x208 = (sj4 * sj5);
                                    IkReal x209 = ((1.0) * x206);
                                    IkReal x210 = (sj5 * x205);
                                    IkReal x211 = ((1.0) * cj4 * sj5);
                                    IkReal x212 = (sj5 * x206);
                                    IkReal x213 = ((1.0) * x205);
                                    IkReal x214 = (x206 * x207);
                                    evalcond[0] = ((((-1.0) * cj5 * x213)) + new_r20);
                                    evalcond[1] = ((((-1.0) * cj5 * x209)) + new_r21);
                                    evalcond[2] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x205);
                                    evalcond[3] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x209)));
                                    evalcond[4] = (((cj4 * x212)) + ((sj4 * x205)) + new_r11);
                                    evalcond[5] = ((((-1.0) * new_r00 * x207)) + ((cj4 * new_r10)) + x210);
                                    evalcond[6] = (((cj4 * new_r11)) + x212 + (((-1.0) * new_r01 * x207)));
                                    evalcond[7] = ((((-1.0) * x207 * x212)) + ((cj4 * x205)) + new_r01);
                                    evalcond[8] = (((cj4 * x210)) + new_r10 + (((-1.0) * x214)));
                                    evalcond[9] = ((((-1.0) * x207 * x210)) + (((-1.0) * cj4 * x209)) + new_r00);
                                    evalcond[10] = (((new_r00 * x208)) + (((-1.0) * new_r10 * x211)) +
                                                    ((cj5 * new_r20)) + (((-1.0) * x213)));
                                    evalcond[11] = ((((-1.0) * new_r11 * x211)) + ((new_r01 * x208)) +
                                                    ((cj5 * new_r21)) + (((-1.0) * x209)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 17;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 17;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 17;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 17;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j6;
                                    vinfos[6].indices[0] = _ij6[0];
                                    vinfos[6].indices[1] = _ij6[1];
                                    vinfos[6].maxsolutions = _nj6;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
                  {
                    IkReal j4array[1], cj4array[1], sj4array[1];
                    bool j4valid[1] = { false };
                    _nj4 = 1;
                    CheckValue<IkReal> x215 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                    if (!x215.valid)
                    {
                      continue;
                    }
                    CheckValue<IkReal> x216 =
                        IKatan2WithCheck(IkReal(new_r02), IkReal(((-1.0) * new_r12)), IKFAST_ATAN2_MAGTHRESH);
                    if (!x216.valid)
                    {
                      continue;
                    }
                    j4array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x215.value))) + (x216.value));
                    sj4array[0] = IKsin(j4array[0]);
                    cj4array[0] = IKcos(j4array[0]);
                    if (j4array[0] > IKPI)
                    {
                      j4array[0] -= IK2PI;
                    }
                    else if (j4array[0] < -IKPI)
                    {
                      j4array[0] += IK2PI;
                    }
                    j4valid[0] = true;
                    for (int ij4 = 0; ij4 < 1; ++ij4)
                    {
                      if (!j4valid[ij4])
                      {
                        continue;
                      }
                      _ij4[0] = ij4;
                      _ij4[1] = -1;
                      for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                      {
                        if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                            IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                        {
                          j4valid[iij4] = false;
                          _ij4[1] = iij4;
                          break;
                        }
                      }
                      j4 = j4array[ij4];
                      cj4 = cj4array[ij4];
                      sj4 = sj4array[ij4];
                      {
                        IkReal evalcond[8];
                        IkReal x217 = IKcos(j4);
                        IkReal x218 = IKsin(j4);
                        IkReal x219 = (new_r12 * x217);
                        IkReal x220 = (cj5 * x217);
                        IkReal x221 = (new_r02 * x218);
                        IkReal x222 = ((1.0) * cj5 * x218);
                        evalcond[0] = (x220 + new_r12);
                        evalcond[1] = (new_r02 + (((-1.0) * x222)));
                        evalcond[2] = (((new_r02 * x217)) + ((new_r12 * x218)));
                        evalcond[3] = (cj5 + x219 + (((-1.0) * x221)));
                        evalcond[4] = (((new_r20 * sj5)) + ((new_r10 * x220)) + (((-1.0) * new_r00 * x222)));
                        evalcond[5] = ((((-1.0) * new_r01 * x222)) + ((new_r11 * x220)) + ((new_r21 * sj5)));
                        evalcond[6] = ((((-1.0) * sj5 * x219)) + ((cj5 * new_r22)) + ((sj5 * x221)));
                        evalcond[7] = ((1.0) + (((-1.0) * cj5 * x221)) + ((cj5 * x219)) + ((new_r22 * sj5)));
                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                        {
                          continue;
                        }
                      }

                      {
                        IkReal j6eval[3];
                        j6eval[0] = cj5;
                        j6eval[1] = IKsign(cj5);
                        j6eval[2] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                        if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                            IKabs(j6eval[2]) < 0.0000010000000000)
                        {
                          {
                            IkReal j6eval[2];
                            j6eval[0] = cj5;
                            j6eval[1] = sj4;
                            if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000)
                            {
                              {
                                IkReal j6eval[3];
                                j6eval[0] = cj5;
                                j6eval[1] = sj4;
                                j6eval[2] = sj5;
                                if (IKabs(j6eval[0]) < 0.0000010000000000 || IKabs(j6eval[1]) < 0.0000010000000000 ||
                                    IKabs(j6eval[2]) < 0.0000010000000000)
                                {
                                  {
                                    IkReal evalcond[5];
                                    bool bgotonextstatement = true;
                                    do
                                    {
                                      evalcond[0] = ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                             6.28318530717959)));
                                      evalcond[1] = new_r12;
                                      evalcond[2] = new_r02;
                                      evalcond[3] = new_r20;
                                      evalcond[4] = new_r21;
                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                          IKabs(evalcond[1]) < 0.0000050000000000 &&
                                          IKabs(evalcond[2]) < 0.0000050000000000 &&
                                          IKabs(evalcond[3]) < 0.0000050000000000 &&
                                          IKabs(evalcond[4]) < 0.0000050000000000)
                                      {
                                        bgotonextstatement = false;
                                        {
                                          IkReal j6array[1], cj6array[1], sj6array[1];
                                          bool j6valid[1] = { false };
                                          _nj6 = 1;
                                          IkReal x223 = ((1.0) * new_r11);
                                          if (IKabs(((((-1.0) * cj4 * new_r01)) + (((-1.0) * sj4 * x223)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(((((-1.0) * cj4 * x223)) + ((new_r01 * sj4)))) <
                                                  IKFAST_ATAN2_MAGTHRESH &&
                                              IKabs(IKsqr(((((-1.0) * cj4 * new_r01)) + (((-1.0) * sj4 * x223)))) +
                                                    IKsqr(((((-1.0) * cj4 * x223)) + ((new_r01 * sj4)))) - 1) <=
                                                  IKFAST_SINCOS_THRESH)
                                            continue;
                                          j6array[0] = IKatan2(((((-1.0) * cj4 * new_r01)) + (((-1.0) * sj4 * x223))),
                                                               ((((-1.0) * cj4 * x223)) + ((new_r01 * sj4))));
                                          sj6array[0] = IKsin(j6array[0]);
                                          cj6array[0] = IKcos(j6array[0]);
                                          if (j6array[0] > IKPI)
                                          {
                                            j6array[0] -= IK2PI;
                                          }
                                          else if (j6array[0] < -IKPI)
                                          {
                                            j6array[0] += IK2PI;
                                          }
                                          j6valid[0] = true;
                                          for (int ij6 = 0; ij6 < 1; ++ij6)
                                          {
                                            if (!j6valid[ij6])
                                            {
                                              continue;
                                            }
                                            _ij6[0] = ij6;
                                            _ij6[1] = -1;
                                            for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                            {
                                              if (j6valid[iij6] &&
                                                  IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j6valid[iij6] = false;
                                                _ij6[1] = iij6;
                                                break;
                                              }
                                            }
                                            j6 = j6array[ij6];
                                            cj6 = cj6array[ij6];
                                            sj6 = sj6array[ij6];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x224 = IKsin(j6);
                                              IkReal x225 = IKcos(j6);
                                              IkReal x226 = ((1.0) * sj4);
                                              IkReal x227 = (cj4 * x224);
                                              IkReal x228 = ((1.0) * x225);
                                              IkReal x229 = (x225 * x226);
                                              evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x224);
                                              evalcond[1] = (((cj4 * new_r10)) + x224 + (((-1.0) * new_r00 * x226)));
                                              evalcond[2] = ((((-1.0) * new_r01 * x226)) + ((cj4 * new_r11)) + x225);
                                              evalcond[3] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x228)));
                                              evalcond[4] = (((sj4 * x224)) + ((cj4 * x225)) + new_r11);
                                              evalcond[5] = (x227 + new_r01 + (((-1.0) * x229)));
                                              evalcond[6] = (x227 + new_r10 + (((-1.0) * x229)));
                                              evalcond[7] =
                                                  ((((-1.0) * cj4 * x228)) + (((-1.0) * x224 * x226)) + new_r00);
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 17;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    } while (0);
                                    if (bgotonextstatement)
                                    {
                                      bool bgotonextstatement = true;
                                      do
                                      {
                                        evalcond[0] = ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                               6.28318530717959)));
                                        evalcond[1] = new_r12;
                                        evalcond[2] = new_r02;
                                        evalcond[3] = new_r20;
                                        evalcond[4] = new_r21;
                                        if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                            IKabs(evalcond[1]) < 0.0000050000000000 &&
                                            IKabs(evalcond[2]) < 0.0000050000000000 &&
                                            IKabs(evalcond[3]) < 0.0000050000000000 &&
                                            IKabs(evalcond[4]) < 0.0000050000000000)
                                        {
                                          bgotonextstatement = false;
                                          {
                                            IkReal j6array[1], cj6array[1], sj6array[1];
                                            bool j6valid[1] = { false };
                                            _nj6 = 1;
                                            IkReal x230 = ((1.0) * sj4);
                                            if (IKabs(((((-1.0) * cj4 * new_r01)) + (((-1.0) * new_r11 * x230)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs((((cj4 * new_r11)) + (((-1.0) * new_r01 * x230)))) <
                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                IKabs(IKsqr(((((-1.0) * cj4 * new_r01)) + (((-1.0) * new_r11 * x230)))) +
                                                      IKsqr((((cj4 * new_r11)) + (((-1.0) * new_r01 * x230)))) - 1) <=
                                                    IKFAST_SINCOS_THRESH)
                                              continue;
                                            j6array[0] =
                                                IKatan2(((((-1.0) * cj4 * new_r01)) + (((-1.0) * new_r11 * x230))),
                                                        (((cj4 * new_r11)) + (((-1.0) * new_r01 * x230))));
                                            sj6array[0] = IKsin(j6array[0]);
                                            cj6array[0] = IKcos(j6array[0]);
                                            if (j6array[0] > IKPI)
                                            {
                                              j6array[0] -= IK2PI;
                                            }
                                            else if (j6array[0] < -IKPI)
                                            {
                                              j6array[0] += IK2PI;
                                            }
                                            j6valid[0] = true;
                                            for (int ij6 = 0; ij6 < 1; ++ij6)
                                            {
                                              if (!j6valid[ij6])
                                              {
                                                continue;
                                              }
                                              _ij6[0] = ij6;
                                              _ij6[1] = -1;
                                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                              {
                                                if (j6valid[iij6] &&
                                                    IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                    IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                {
                                                  j6valid[iij6] = false;
                                                  _ij6[1] = iij6;
                                                  break;
                                                }
                                              }
                                              j6 = j6array[ij6];
                                              cj6 = cj6array[ij6];
                                              sj6 = sj6array[ij6];
                                              {
                                                IkReal evalcond[8];
                                                IkReal x231 = IKcos(j6);
                                                IkReal x232 = IKsin(j6);
                                                IkReal x233 = ((1.0) * sj4);
                                                IkReal x234 = ((1.0) * x231);
                                                IkReal x235 = (sj4 * x232);
                                                IkReal x236 = (sj4 * x231);
                                                IkReal x237 = (cj4 * x232);
                                                IkReal x238 = (cj4 * x234);
                                                evalcond[0] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x232);
                                                evalcond[1] =
                                                    (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x234)));
                                                evalcond[2] = (x236 + x237 + new_r01);
                                                evalcond[3] = ((((-1.0) * x238)) + x235 + new_r11);
                                                evalcond[4] = (((cj4 * new_r10)) + (((-1.0) * x232)) +
                                                               (((-1.0) * new_r00 * x233)));
                                                evalcond[5] = (((cj4 * new_r11)) + (((-1.0) * x234)) +
                                                               (((-1.0) * new_r01 * x233)));
                                                evalcond[6] = ((((-1.0) * x238)) + x235 + new_r00);
                                                evalcond[7] = ((((-1.0) * x231 * x233)) + new_r10 + (((-1.0) * x237)));
                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                {
                                                  continue;
                                                }
                                              }

                                              {
                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                vinfos[0].jointtype = 17;
                                                vinfos[0].foffset = j0;
                                                vinfos[0].indices[0] = _ij0[0];
                                                vinfos[0].indices[1] = _ij0[1];
                                                vinfos[0].maxsolutions = _nj0;
                                                vinfos[1].jointtype = 17;
                                                vinfos[1].foffset = j1;
                                                vinfos[1].indices[0] = _ij1[0];
                                                vinfos[1].indices[1] = _ij1[1];
                                                vinfos[1].maxsolutions = _nj1;
                                                vinfos[2].jointtype = 17;
                                                vinfos[2].foffset = j2;
                                                vinfos[2].indices[0] = _ij2[0];
                                                vinfos[2].indices[1] = _ij2[1];
                                                vinfos[2].maxsolutions = _nj2;
                                                vinfos[3].jointtype = 17;
                                                vinfos[3].foffset = j3;
                                                vinfos[3].indices[0] = _ij3[0];
                                                vinfos[3].indices[1] = _ij3[1];
                                                vinfos[3].maxsolutions = _nj3;
                                                vinfos[4].jointtype = 1;
                                                vinfos[4].foffset = j4;
                                                vinfos[4].indices[0] = _ij4[0];
                                                vinfos[4].indices[1] = _ij4[1];
                                                vinfos[4].maxsolutions = _nj4;
                                                vinfos[5].jointtype = 1;
                                                vinfos[5].foffset = j5;
                                                vinfos[5].indices[0] = _ij5[0];
                                                vinfos[5].indices[1] = _ij5[1];
                                                vinfos[5].maxsolutions = _nj5;
                                                vinfos[6].jointtype = 1;
                                                vinfos[6].foffset = j6;
                                                vinfos[6].indices[0] = _ij6[0];
                                                vinfos[6].indices[1] = _ij6[1];
                                                vinfos[6].maxsolutions = _nj6;
                                                std::vector<int> vfree(0);
                                                solutions.AddSolution(vinfos, vfree);
                                              }
                                            }
                                          }
                                        }
                                      } while (0);
                                      if (bgotonextstatement)
                                      {
                                        bool bgotonextstatement = true;
                                        do
                                        {
                                          evalcond[0] =
                                              ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(j4))), 6.28318530717959)));
                                          evalcond[1] = new_r02;
                                          if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                              IKabs(evalcond[1]) < 0.0000050000000000)
                                          {
                                            bgotonextstatement = false;
                                            {
                                              IkReal j6array[1], cj6array[1], sj6array[1];
                                              bool j6valid[1] = { false };
                                              _nj6 = 1;
                                              if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH &&
                                                  IKabs(IKsqr(((-1.0) * new_r01)) + IKsqr(new_r00) - 1) <=
                                                      IKFAST_SINCOS_THRESH)
                                                continue;
                                              j6array[0] = IKatan2(((-1.0) * new_r01), new_r00);
                                              sj6array[0] = IKsin(j6array[0]);
                                              cj6array[0] = IKcos(j6array[0]);
                                              if (j6array[0] > IKPI)
                                              {
                                                j6array[0] -= IK2PI;
                                              }
                                              else if (j6array[0] < -IKPI)
                                              {
                                                j6array[0] += IK2PI;
                                              }
                                              j6valid[0] = true;
                                              for (int ij6 = 0; ij6 < 1; ++ij6)
                                              {
                                                if (!j6valid[ij6])
                                                {
                                                  continue;
                                                }
                                                _ij6[0] = ij6;
                                                _ij6[1] = -1;
                                                for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                {
                                                  if (j6valid[iij6] &&
                                                      IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j6valid[iij6] = false;
                                                    _ij6[1] = iij6;
                                                    break;
                                                  }
                                                }
                                                j6 = j6array[ij6];
                                                cj6 = cj6array[ij6];
                                                sj6 = sj6array[ij6];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x239 = IKsin(j6);
                                                  IkReal x240 = IKcos(j6);
                                                  IkReal x241 = ((1.0) * sj5);
                                                  IkReal x242 = ((1.0) * x240);
                                                  evalcond[0] = (x239 + new_r01);
                                                  evalcond[1] = (((new_r12 * x239)) + new_r20);
                                                  evalcond[2] = (((new_r12 * x240)) + new_r21);
                                                  evalcond[3] = ((((-1.0) * x242)) + new_r00);
                                                  evalcond[4] = (((sj5 * x240)) + new_r11);
                                                  evalcond[5] = (new_r10 + ((sj5 * x239)));
                                                  evalcond[6] = (((cj5 * new_r20)) + (((-1.0) * new_r10 * x241)) +
                                                                 (((-1.0) * x239)));
                                                  evalcond[7] = (((cj5 * new_r21)) + (((-1.0) * new_r11 * x241)) +
                                                                 (((-1.0) * x242)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        } while (0);
                                        if (bgotonextstatement)
                                        {
                                          bool bgotonextstatement = true;
                                          do
                                          {
                                            evalcond[0] =
                                                ((-3.14159265358979) +
                                                 (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j4)))),
                                                         6.28318530717959)));
                                            evalcond[1] = new_r02;
                                            if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                IKabs(evalcond[1]) < 0.0000050000000000)
                                            {
                                              bgotonextstatement = false;
                                              {
                                                IkReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1] = { false };
                                                _nj6 = 1;
                                                if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                    IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r00)) - 1) <=
                                                        IKFAST_SINCOS_THRESH)
                                                  continue;
                                                j6array[0] = IKatan2(new_r01, ((-1.0) * new_r00));
                                                sj6array[0] = IKsin(j6array[0]);
                                                cj6array[0] = IKcos(j6array[0]);
                                                if (j6array[0] > IKPI)
                                                {
                                                  j6array[0] -= IK2PI;
                                                }
                                                else if (j6array[0] < -IKPI)
                                                {
                                                  j6array[0] += IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                                {
                                                  if (!j6valid[ij6])
                                                  {
                                                    continue;
                                                  }
                                                  _ij6[0] = ij6;
                                                  _ij6[1] = -1;
                                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                  {
                                                    if (j6valid[iij6] &&
                                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                    {
                                                      j6valid[iij6] = false;
                                                      _ij6[1] = iij6;
                                                      break;
                                                    }
                                                  }
                                                  j6 = j6array[ij6];
                                                  cj6 = cj6array[ij6];
                                                  sj6 = sj6array[ij6];
                                                  {
                                                    IkReal evalcond[8];
                                                    IkReal x243 = IKsin(j6);
                                                    IkReal x244 = IKcos(j6);
                                                    IkReal x245 = ((1.0) * x244);
                                                    IkReal x246 = ((1.0) * x243);
                                                    evalcond[0] = (x243 + (((-1.0) * new_r01)));
                                                    evalcond[1] = ((((-1.0) * new_r12 * x246)) + new_r20);
                                                    evalcond[2] = ((((-1.0) * new_r12 * x245)) + new_r21);
                                                    evalcond[3] = (new_r11 + (((-1.0) * sj5 * x245)));
                                                    evalcond[4] = ((((-1.0) * new_r00)) + (((-1.0) * x245)));
                                                    evalcond[5] = (((sj5 * x243)) + (((-1.0) * new_r10)));
                                                    evalcond[6] =
                                                        (((new_r10 * sj5)) + ((cj5 * new_r20)) + (((-1.0) * x246)));
                                                    evalcond[7] =
                                                        (((new_r11 * sj5)) + ((cj5 * new_r21)) + (((-1.0) * x245)));
                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                    {
                                                      continue;
                                                    }
                                                  }

                                                  {
                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                    vinfos[0].jointtype = 17;
                                                    vinfos[0].foffset = j0;
                                                    vinfos[0].indices[0] = _ij0[0];
                                                    vinfos[0].indices[1] = _ij0[1];
                                                    vinfos[0].maxsolutions = _nj0;
                                                    vinfos[1].jointtype = 17;
                                                    vinfos[1].foffset = j1;
                                                    vinfos[1].indices[0] = _ij1[0];
                                                    vinfos[1].indices[1] = _ij1[1];
                                                    vinfos[1].maxsolutions = _nj1;
                                                    vinfos[2].jointtype = 17;
                                                    vinfos[2].foffset = j2;
                                                    vinfos[2].indices[0] = _ij2[0];
                                                    vinfos[2].indices[1] = _ij2[1];
                                                    vinfos[2].maxsolutions = _nj2;
                                                    vinfos[3].jointtype = 17;
                                                    vinfos[3].foffset = j3;
                                                    vinfos[3].indices[0] = _ij3[0];
                                                    vinfos[3].indices[1] = _ij3[1];
                                                    vinfos[3].maxsolutions = _nj3;
                                                    vinfos[4].jointtype = 1;
                                                    vinfos[4].foffset = j4;
                                                    vinfos[4].indices[0] = _ij4[0];
                                                    vinfos[4].indices[1] = _ij4[1];
                                                    vinfos[4].maxsolutions = _nj4;
                                                    vinfos[5].jointtype = 1;
                                                    vinfos[5].foffset = j5;
                                                    vinfos[5].indices[0] = _ij5[0];
                                                    vinfos[5].indices[1] = _ij5[1];
                                                    vinfos[5].maxsolutions = _nj5;
                                                    vinfos[6].jointtype = 1;
                                                    vinfos[6].foffset = j6;
                                                    vinfos[6].indices[0] = _ij6[0];
                                                    vinfos[6].indices[1] = _ij6[1];
                                                    vinfos[6].maxsolutions = _nj6;
                                                    std::vector<int> vfree(0);
                                                    solutions.AddSolution(vinfos, vfree);
                                                  }
                                                }
                                              }
                                            }
                                          } while (0);
                                          if (bgotonextstatement)
                                          {
                                            bool bgotonextstatement = true;
                                            do
                                            {
                                              evalcond[0] =
                                                  ((-3.14159265358979) +
                                                   (IKfmod(((3.14159265358979) + (IKabs(j5))), 6.28318530717959)));
                                              evalcond[1] = new_r22;
                                              if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                  IKabs(evalcond[1]) < 0.0000050000000000)
                                              {
                                                bgotonextstatement = false;
                                                {
                                                  IkReal j6array[1], cj6array[1], sj6array[1];
                                                  bool j6valid[1] = { false };
                                                  _nj6 = 1;
                                                  if (IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH &&
                                                      IKabs(IKsqr(new_r20) + IKsqr(new_r21) - 1) <= IKFAST_SINCOS_THRESH)
                                                    continue;
                                                  j6array[0] = IKatan2(new_r20, new_r21);
                                                  sj6array[0] = IKsin(j6array[0]);
                                                  cj6array[0] = IKcos(j6array[0]);
                                                  if (j6array[0] > IKPI)
                                                  {
                                                    j6array[0] -= IK2PI;
                                                  }
                                                  else if (j6array[0] < -IKPI)
                                                  {
                                                    j6array[0] += IK2PI;
                                                  }
                                                  j6valid[0] = true;
                                                  for (int ij6 = 0; ij6 < 1; ++ij6)
                                                  {
                                                    if (!j6valid[ij6])
                                                    {
                                                      continue;
                                                    }
                                                    _ij6[0] = ij6;
                                                    _ij6[1] = -1;
                                                    for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                    {
                                                      if (j6valid[iij6] &&
                                                          IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j6valid[iij6] = false;
                                                        _ij6[1] = iij6;
                                                        break;
                                                      }
                                                    }
                                                    j6 = j6array[ij6];
                                                    cj6 = cj6array[ij6];
                                                    sj6 = sj6array[ij6];
                                                    {
                                                      IkReal evalcond[8];
                                                      IkReal x247 = IKsin(j6);
                                                      IkReal x248 = IKcos(j6);
                                                      IkReal x249 = ((1.0) * x248);
                                                      evalcond[0] = ((((-1.0) * x247)) + new_r20);
                                                      evalcond[1] = ((((-1.0) * x249)) + new_r21);
                                                      evalcond[2] = (new_r11 + ((sj4 * x247)));
                                                      evalcond[3] = (((cj4 * x247)) + new_r01);
                                                      evalcond[4] = ((((-1.0) * new_r02 * x249)) + new_r10);
                                                      evalcond[5] = ((((-1.0) * cj4 * x249)) + new_r00);
                                                      evalcond[6] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x247);
                                                      evalcond[7] =
                                                          (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x249)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 17;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            } while (0);
                                            if (bgotonextstatement)
                                            {
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((-3.14159265358979) + j5)))),
                                                             6.28318530717959)));
                                                evalcond[1] = new_r22;
                                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                    IKabs(evalcond[1]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                                    bool j6valid[1] = { false };
                                                    _nj6 = 1;
                                                    if (IKabs(((-1.0) * new_r20)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(((-1.0) * new_r21)) < IKFAST_ATAN2_MAGTHRESH &&
                                                        IKabs(IKsqr(((-1.0) * new_r20)) + IKsqr(((-1.0) * new_r21)) -
                                                              1) <= IKFAST_SINCOS_THRESH)
                                                      continue;
                                                    j6array[0] = IKatan2(((-1.0) * new_r20), ((-1.0) * new_r21));
                                                    sj6array[0] = IKsin(j6array[0]);
                                                    cj6array[0] = IKcos(j6array[0]);
                                                    if (j6array[0] > IKPI)
                                                    {
                                                      j6array[0] -= IK2PI;
                                                    }
                                                    else if (j6array[0] < -IKPI)
                                                    {
                                                      j6array[0] += IK2PI;
                                                    }
                                                    j6valid[0] = true;
                                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                                    {
                                                      if (!j6valid[ij6])
                                                      {
                                                        continue;
                                                      }
                                                      _ij6[0] = ij6;
                                                      _ij6[1] = -1;
                                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                                      {
                                                        if (j6valid[iij6] &&
                                                            IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH &&
                                                            IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                IKFAST_SOLUTION_THRESH)
                                                        {
                                                          j6valid[iij6] = false;
                                                          _ij6[1] = iij6;
                                                          break;
                                                        }
                                                      }
                                                      j6 = j6array[ij6];
                                                      cj6 = cj6array[ij6];
                                                      sj6 = sj6array[ij6];
                                                      {
                                                        IkReal evalcond[8];
                                                        IkReal x250 = IKsin(j6);
                                                        IkReal x251 = IKcos(j6);
                                                        IkReal x252 = ((1.0) * x251);
                                                        evalcond[0] = (x250 + new_r20);
                                                        evalcond[1] = (x251 + new_r21);
                                                        evalcond[2] = (((sj4 * x250)) + new_r11);
                                                        evalcond[3] = (new_r01 + ((cj4 * x250)));
                                                        evalcond[4] = (((new_r02 * x251)) + new_r10);
                                                        evalcond[5] = ((((-1.0) * cj4 * x252)) + new_r00);
                                                        evalcond[6] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x250);
                                                        evalcond[7] =
                                                            (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x252)));
                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                        {
                                                          continue;
                                                        }
                                                      }

                                                      {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                        vinfos[0].jointtype = 17;
                                                        vinfos[0].foffset = j0;
                                                        vinfos[0].indices[0] = _ij0[0];
                                                        vinfos[0].indices[1] = _ij0[1];
                                                        vinfos[0].maxsolutions = _nj0;
                                                        vinfos[1].jointtype = 17;
                                                        vinfos[1].foffset = j1;
                                                        vinfos[1].indices[0] = _ij1[0];
                                                        vinfos[1].indices[1] = _ij1[1];
                                                        vinfos[1].maxsolutions = _nj1;
                                                        vinfos[2].jointtype = 17;
                                                        vinfos[2].foffset = j2;
                                                        vinfos[2].indices[0] = _ij2[0];
                                                        vinfos[2].indices[1] = _ij2[1];
                                                        vinfos[2].maxsolutions = _nj2;
                                                        vinfos[3].jointtype = 17;
                                                        vinfos[3].foffset = j3;
                                                        vinfos[3].indices[0] = _ij3[0];
                                                        vinfos[3].indices[1] = _ij3[1];
                                                        vinfos[3].maxsolutions = _nj3;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j4;
                                                        vinfos[4].indices[0] = _ij4[0];
                                                        vinfos[4].indices[1] = _ij4[1];
                                                        vinfos[4].maxsolutions = _nj4;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j5;
                                                        vinfos[5].indices[0] = _ij5[0];
                                                        vinfos[5].indices[1] = _ij5[1];
                                                        vinfos[5].maxsolutions = _nj5;
                                                        vinfos[6].jointtype = 1;
                                                        vinfos[6].foffset = j6;
                                                        vinfos[6].indices[0] = _ij6[0];
                                                        vinfos[6].indices[1] = _ij6[1];
                                                        vinfos[6].maxsolutions = _nj6;
                                                        std::vector<int> vfree(0);
                                                        solutions.AddSolution(vinfos, vfree);
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  evalcond[0] = ((IKabs(new_r20)) + (IKabs(new_r21)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j6eval[1];
                                                      new_r21 = 0;
                                                      new_r20 = 0;
                                                      new_r02 = 0;
                                                      new_r12 = 0;
                                                      j6eval[0] = 1.0;
                                                      if (IKabs(j6eval[0]) < 0.0000000100000000)
                                                      {
                                                        continue;  // no branches [j6]
                                                      }
                                                      else
                                                      {
                                                        IkReal op[2 + 1], zeror[2];
                                                        int numroots;
                                                        op[0] = 1.0;
                                                        op[1] = 0;
                                                        op[2] = -1.0;
                                                        polyroots2(op, zeror, numroots);
                                                        IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
                                                        int numsolutions = 0;
                                                        for (int ij6 = 0; ij6 < numroots; ++ij6)
                                                        {
                                                          IkReal htj6 = zeror[ij6];
                                                          tempj6array[0] = ((2.0) * (atan(htj6)));
                                                          for (int kj6 = 0; kj6 < 1; ++kj6)
                                                          {
                                                            j6array[numsolutions] = tempj6array[kj6];
                                                            if (j6array[numsolutions] > IKPI)
                                                            {
                                                              j6array[numsolutions] -= IK2PI;
                                                            }
                                                            else if (j6array[numsolutions] < -IKPI)
                                                            {
                                                              j6array[numsolutions] += IK2PI;
                                                            }
                                                            sj6array[numsolutions] = IKsin(j6array[numsolutions]);
                                                            cj6array[numsolutions] = IKcos(j6array[numsolutions]);
                                                            numsolutions++;
                                                          }
                                                        }
                                                        bool j6valid[2] = { true, true };
                                                        _nj6 = 2;
                                                        for (int ij6 = 0; ij6 < numsolutions; ++ij6)
                                                        {
                                                          if (!j6valid[ij6])
                                                          {
                                                            continue;
                                                          }
                                                          j6 = j6array[ij6];
                                                          cj6 = cj6array[ij6];
                                                          sj6 = sj6array[ij6];
                                                          htj6 = IKtan(j6 / 2);

                                                          _ij6[0] = ij6;
                                                          _ij6[1] = -1;
                                                          for (int iij6 = ij6 + 1; iij6 < numsolutions; ++iij6)
                                                          {
                                                            if (j6valid[iij6] &&
                                                                IKabs(cj6array[ij6] - cj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj6array[ij6] - sj6array[iij6]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j6valid[iij6] = false;
                                                              _ij6[1] = iij6;
                                                              break;
                                                            }
                                                          }
                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 17;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    if (1)
                                                    {
                                                      bgotonextstatement = false;
                                                      continue;  // branch miss [j6]
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement) {}
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                else
                                {
                                  {
                                    IkReal j6array[1], cj6array[1], sj6array[1];
                                    bool j6valid[1] = { false };
                                    _nj6 = 1;
                                    CheckValue<IkReal> x254 = IKPowWithIntegerCheck(cj5, -1);
                                    if (!x254.valid)
                                    {
                                      continue;
                                    }
                                    IkReal x253 = x254.value;
                                    CheckValue<IkReal> x255 = IKPowWithIntegerCheck(sj4, -1);
                                    if (!x255.valid)
                                    {
                                      continue;
                                    }
                                    CheckValue<IkReal> x256 = IKPowWithIntegerCheck(sj5, -1);
                                    if (!x256.valid)
                                    {
                                      continue;
                                    }
                                    if (IKabs((new_r20 * x253)) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((x253 * (x255.value) * (x256.value) *
                                               ((((cj5 * new_r01)) + ((cj4 * new_r20)))))) < IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr((new_r20 * x253)) +
                                              IKsqr((x253 * (x255.value) * (x256.value) *
                                                     ((((cj5 * new_r01)) + ((cj4 * new_r20)))))) -
                                              1) <= IKFAST_SINCOS_THRESH)
                                      continue;
                                    j6array[0] = IKatan2((new_r20 * x253), (x253 * (x255.value) * (x256.value) *
                                                                            ((((cj5 * new_r01)) + ((cj4 * new_r20))))));
                                    sj6array[0] = IKsin(j6array[0]);
                                    cj6array[0] = IKcos(j6array[0]);
                                    if (j6array[0] > IKPI)
                                    {
                                      j6array[0] -= IK2PI;
                                    }
                                    else if (j6array[0] < -IKPI)
                                    {
                                      j6array[0] += IK2PI;
                                    }
                                    j6valid[0] = true;
                                    for (int ij6 = 0; ij6 < 1; ++ij6)
                                    {
                                      if (!j6valid[ij6])
                                      {
                                        continue;
                                      }
                                      _ij6[0] = ij6;
                                      _ij6[1] = -1;
                                      for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                      {
                                        if (j6valid[iij6] &&
                                            IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j6valid[iij6] = false;
                                          _ij6[1] = iij6;
                                          break;
                                        }
                                      }
                                      j6 = j6array[ij6];
                                      cj6 = cj6array[ij6];
                                      sj6 = sj6array[ij6];
                                      {
                                        IkReal evalcond[12];
                                        IkReal x257 = IKsin(j6);
                                        IkReal x258 = IKcos(j6);
                                        IkReal x259 = ((1.0) * sj4);
                                        IkReal x260 = (sj4 * sj5);
                                        IkReal x261 = ((1.0) * x258);
                                        IkReal x262 = (sj5 * x257);
                                        IkReal x263 = ((1.0) * cj4 * sj5);
                                        IkReal x264 = (sj5 * x258);
                                        IkReal x265 = ((1.0) * x257);
                                        IkReal x266 = (x258 * x259);
                                        evalcond[0] = ((((-1.0) * cj5 * x265)) + new_r20);
                                        evalcond[1] = ((((-1.0) * cj5 * x261)) + new_r21);
                                        evalcond[2] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x257);
                                        evalcond[3] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x261)));
                                        evalcond[4] = (((sj4 * x257)) + ((cj4 * x264)) + new_r11);
                                        evalcond[5] = (((cj4 * new_r10)) + x262 + (((-1.0) * new_r00 * x259)));
                                        evalcond[6] = ((((-1.0) * new_r01 * x259)) + ((cj4 * new_r11)) + x264);
                                        evalcond[7] = ((((-1.0) * x259 * x264)) + new_r01 + ((cj4 * x257)));
                                        evalcond[8] = (((cj4 * x262)) + new_r10 + (((-1.0) * x266)));
                                        evalcond[9] = ((((-1.0) * cj4 * x261)) + (((-1.0) * x259 * x262)) + new_r00);
                                        evalcond[10] = (((cj5 * new_r20)) + (((-1.0) * new_r10 * x263)) +
                                                        ((new_r00 * x260)) + (((-1.0) * x265)));
                                        evalcond[11] = (((cj5 * new_r21)) + ((new_r01 * x260)) +
                                                        (((-1.0) * new_r11 * x263)) + (((-1.0) * x261)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 17;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j6;
                                        vinfos[6].indices[0] = _ij6[0];
                                        vinfos[6].indices[1] = _ij6[1];
                                        vinfos[6].maxsolutions = _nj6;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              {
                                IkReal j6array[1], cj6array[1], sj6array[1];
                                bool j6valid[1] = { false };
                                _nj6 = 1;
                                CheckValue<IkReal> x268 = IKPowWithIntegerCheck(cj5, -1);
                                if (!x268.valid)
                                {
                                  continue;
                                }
                                IkReal x267 = x268.value;
                                CheckValue<IkReal> x269 = IKPowWithIntegerCheck(sj4, -1);
                                if (!x269.valid)
                                {
                                  continue;
                                }
                                if (IKabs((x267 * (x269.value) *
                                           (((((-1.0) * cj4 * new_r21 * sj5)) + (((-1.0) * cj5 * new_r11)))))) <
                                        IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs((new_r21 * x267)) < IKFAST_ATAN2_MAGTHRESH &&
                                    IKabs(IKsqr((x267 * (x269.value) *
                                                 (((((-1.0) * cj4 * new_r21 * sj5)) + (((-1.0) * cj5 * new_r11)))))) +
                                          IKsqr((new_r21 * x267)) - 1) <= IKFAST_SINCOS_THRESH)
                                  continue;
                                j6array[0] =
                                    IKatan2((x267 * (x269.value) *
                                             (((((-1.0) * cj4 * new_r21 * sj5)) + (((-1.0) * cj5 * new_r11))))),
                                            (new_r21 * x267));
                                sj6array[0] = IKsin(j6array[0]);
                                cj6array[0] = IKcos(j6array[0]);
                                if (j6array[0] > IKPI)
                                {
                                  j6array[0] -= IK2PI;
                                }
                                else if (j6array[0] < -IKPI)
                                {
                                  j6array[0] += IK2PI;
                                }
                                j6valid[0] = true;
                                for (int ij6 = 0; ij6 < 1; ++ij6)
                                {
                                  if (!j6valid[ij6])
                                  {
                                    continue;
                                  }
                                  _ij6[0] = ij6;
                                  _ij6[1] = -1;
                                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                                  {
                                    if (j6valid[iij6] &&
                                        IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                    {
                                      j6valid[iij6] = false;
                                      _ij6[1] = iij6;
                                      break;
                                    }
                                  }
                                  j6 = j6array[ij6];
                                  cj6 = cj6array[ij6];
                                  sj6 = sj6array[ij6];
                                  {
                                    IkReal evalcond[12];
                                    IkReal x270 = IKsin(j6);
                                    IkReal x271 = IKcos(j6);
                                    IkReal x272 = ((1.0) * sj4);
                                    IkReal x273 = (sj4 * sj5);
                                    IkReal x274 = ((1.0) * x271);
                                    IkReal x275 = (sj5 * x270);
                                    IkReal x276 = ((1.0) * cj4 * sj5);
                                    IkReal x277 = (sj5 * x271);
                                    IkReal x278 = ((1.0) * x270);
                                    IkReal x279 = (x271 * x272);
                                    evalcond[0] = ((((-1.0) * cj5 * x278)) + new_r20);
                                    evalcond[1] = ((((-1.0) * cj5 * x274)) + new_r21);
                                    evalcond[2] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x270);
                                    evalcond[3] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x274)));
                                    evalcond[4] = (((cj4 * x277)) + new_r11 + ((sj4 * x270)));
                                    evalcond[5] = (((cj4 * new_r10)) + (((-1.0) * new_r00 * x272)) + x275);
                                    evalcond[6] = ((((-1.0) * new_r01 * x272)) + ((cj4 * new_r11)) + x277);
                                    evalcond[7] = ((((-1.0) * x272 * x277)) + ((cj4 * x270)) + new_r01);
                                    evalcond[8] = (((cj4 * x275)) + (((-1.0) * x279)) + new_r10);
                                    evalcond[9] = ((((-1.0) * x272 * x275)) + (((-1.0) * cj4 * x274)) + new_r00);
                                    evalcond[10] = (((cj5 * new_r20)) + ((new_r00 * x273)) +
                                                    (((-1.0) * new_r10 * x276)) + (((-1.0) * x278)));
                                    evalcond[11] = (((cj5 * new_r21)) + (((-1.0) * new_r11 * x276)) +
                                                    ((new_r01 * x273)) + (((-1.0) * x274)));
                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                        IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                    {
                                      continue;
                                    }
                                  }

                                  {
                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                    vinfos[0].jointtype = 17;
                                    vinfos[0].foffset = j0;
                                    vinfos[0].indices[0] = _ij0[0];
                                    vinfos[0].indices[1] = _ij0[1];
                                    vinfos[0].maxsolutions = _nj0;
                                    vinfos[1].jointtype = 17;
                                    vinfos[1].foffset = j1;
                                    vinfos[1].indices[0] = _ij1[0];
                                    vinfos[1].indices[1] = _ij1[1];
                                    vinfos[1].maxsolutions = _nj1;
                                    vinfos[2].jointtype = 17;
                                    vinfos[2].foffset = j2;
                                    vinfos[2].indices[0] = _ij2[0];
                                    vinfos[2].indices[1] = _ij2[1];
                                    vinfos[2].maxsolutions = _nj2;
                                    vinfos[3].jointtype = 17;
                                    vinfos[3].foffset = j3;
                                    vinfos[3].indices[0] = _ij3[0];
                                    vinfos[3].indices[1] = _ij3[1];
                                    vinfos[3].maxsolutions = _nj3;
                                    vinfos[4].jointtype = 1;
                                    vinfos[4].foffset = j4;
                                    vinfos[4].indices[0] = _ij4[0];
                                    vinfos[4].indices[1] = _ij4[1];
                                    vinfos[4].maxsolutions = _nj4;
                                    vinfos[5].jointtype = 1;
                                    vinfos[5].foffset = j5;
                                    vinfos[5].indices[0] = _ij5[0];
                                    vinfos[5].indices[1] = _ij5[1];
                                    vinfos[5].maxsolutions = _nj5;
                                    vinfos[6].jointtype = 1;
                                    vinfos[6].foffset = j6;
                                    vinfos[6].indices[0] = _ij6[0];
                                    vinfos[6].indices[1] = _ij6[1];
                                    vinfos[6].maxsolutions = _nj6;
                                    std::vector<int> vfree(0);
                                    solutions.AddSolution(vinfos, vfree);
                                  }
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j6array[1], cj6array[1], sj6array[1];
                            bool j6valid[1] = { false };
                            _nj6 = 1;
                            CheckValue<IkReal> x280 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                            if (!x280.valid)
                            {
                              continue;
                            }
                            CheckValue<IkReal> x281 =
                                IKatan2WithCheck(IkReal(new_r20), IkReal(new_r21), IKFAST_ATAN2_MAGTHRESH);
                            if (!x281.valid)
                            {
                              continue;
                            }
                            j6array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x280.value))) + (x281.value));
                            sj6array[0] = IKsin(j6array[0]);
                            cj6array[0] = IKcos(j6array[0]);
                            if (j6array[0] > IKPI)
                            {
                              j6array[0] -= IK2PI;
                            }
                            else if (j6array[0] < -IKPI)
                            {
                              j6array[0] += IK2PI;
                            }
                            j6valid[0] = true;
                            for (int ij6 = 0; ij6 < 1; ++ij6)
                            {
                              if (!j6valid[ij6])
                              {
                                continue;
                              }
                              _ij6[0] = ij6;
                              _ij6[1] = -1;
                              for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                              {
                                if (j6valid[iij6] && IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j6valid[iij6] = false;
                                  _ij6[1] = iij6;
                                  break;
                                }
                              }
                              j6 = j6array[ij6];
                              cj6 = cj6array[ij6];
                              sj6 = sj6array[ij6];
                              {
                                IkReal evalcond[12];
                                IkReal x282 = IKsin(j6);
                                IkReal x283 = IKcos(j6);
                                IkReal x284 = ((1.0) * sj4);
                                IkReal x285 = (sj4 * sj5);
                                IkReal x286 = ((1.0) * x283);
                                IkReal x287 = (sj5 * x282);
                                IkReal x288 = ((1.0) * cj4 * sj5);
                                IkReal x289 = (sj5 * x283);
                                IkReal x290 = ((1.0) * x282);
                                IkReal x291 = (x283 * x284);
                                evalcond[0] = ((((-1.0) * cj5 * x290)) + new_r20);
                                evalcond[1] = ((((-1.0) * cj5 * x286)) + new_r21);
                                evalcond[2] = (((cj4 * new_r01)) + ((new_r11 * sj4)) + x282);
                                evalcond[3] = (((cj4 * new_r00)) + ((new_r10 * sj4)) + (((-1.0) * x286)));
                                evalcond[4] = (new_r11 + ((cj4 * x289)) + ((sj4 * x282)));
                                evalcond[5] = (((cj4 * new_r10)) + (((-1.0) * new_r00 * x284)) + x287);
                                evalcond[6] = (((cj4 * new_r11)) + x289 + (((-1.0) * new_r01 * x284)));
                                evalcond[7] = ((((-1.0) * x284 * x289)) + new_r01 + ((cj4 * x282)));
                                evalcond[8] = ((((-1.0) * x291)) + new_r10 + ((cj4 * x287)));
                                evalcond[9] = ((((-1.0) * x284 * x287)) + (((-1.0) * cj4 * x286)) + new_r00);
                                evalcond[10] = ((((-1.0) * x290)) + ((cj5 * new_r20)) + (((-1.0) * new_r10 * x288)) +
                                                ((new_r00 * x285)));
                                evalcond[11] = (((cj5 * new_r21)) + (((-1.0) * new_r11 * x288)) + (((-1.0) * x286)) +
                                                ((new_r01 * x285)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 17;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].indices[0] = _ij6[0];
                                vinfos[6].indices[1] = _ij6[1];
                                vinfos[6].maxsolutions = _nj6;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                IkReal j6array[1], cj6array[1], sj6array[1];
                bool j6valid[1] = { false };
                _nj6 = 1;
                CheckValue<IkReal> x292 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                if (!x292.valid)
                {
                  continue;
                }
                CheckValue<IkReal> x293 = IKatan2WithCheck(IkReal(new_r20), IkReal(new_r21), IKFAST_ATAN2_MAGTHRESH);
                if (!x293.valid)
                {
                  continue;
                }
                j6array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x292.value))) + (x293.value));
                sj6array[0] = IKsin(j6array[0]);
                cj6array[0] = IKcos(j6array[0]);
                if (j6array[0] > IKPI)
                {
                  j6array[0] -= IK2PI;
                }
                else if (j6array[0] < -IKPI)
                {
                  j6array[0] += IK2PI;
                }
                j6valid[0] = true;
                for (int ij6 = 0; ij6 < 1; ++ij6)
                {
                  if (!j6valid[ij6])
                  {
                    continue;
                  }
                  _ij6[0] = ij6;
                  _ij6[1] = -1;
                  for (int iij6 = ij6 + 1; iij6 < 1; ++iij6)
                  {
                    if (j6valid[iij6] && IKabs(cj6array[ij6] - cj6array[iij6]) < IKFAST_SOLUTION_THRESH &&
                        IKabs(sj6array[ij6] - sj6array[iij6]) < IKFAST_SOLUTION_THRESH)
                    {
                      j6valid[iij6] = false;
                      _ij6[1] = iij6;
                      break;
                    }
                  }
                  j6 = j6array[ij6];
                  cj6 = cj6array[ij6];
                  sj6 = sj6array[ij6];
                  {
                    IkReal evalcond[2];
                    IkReal x294 = ((1.0) * cj5);
                    evalcond[0] = ((((-1.0) * x294 * (IKsin(j6)))) + new_r20);
                    evalcond[1] = ((((-1.0) * x294 * (IKcos(j6)))) + new_r21);
                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH)
                    {
                      continue;
                    }
                  }

                  {
                    IkReal j4eval[3];
                    j4eval[0] = cj5;
                    j4eval[1] = IKsign(cj5);
                    j4eval[2] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                    if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000 ||
                        IKabs(j4eval[2]) < 0.0000010000000000)
                    {
                      {
                        IkReal j4eval[2];
                        j4eval[0] = cj5;
                        j4eval[1] = new_r11;
                        if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000)
                        {
                          {
                            IkReal evalcond[5];
                            bool bgotonextstatement = true;
                            do
                            {
                              evalcond[0] = ((-3.14159265358979) +
                                             (IKfmod(((3.14159265358979) + (IKabs(((-1.5707963267949) + j5)))),
                                                     6.28318530717959)));
                              evalcond[1] = new_r12;
                              evalcond[2] = new_r02;
                              evalcond[3] = new_r20;
                              evalcond[4] = new_r21;
                              if (IKabs(evalcond[0]) < 0.0000050000000000 && IKabs(evalcond[1]) < 0.0000050000000000 &&
                                  IKabs(evalcond[2]) < 0.0000050000000000 && IKabs(evalcond[3]) < 0.0000050000000000 &&
                                  IKabs(evalcond[4]) < 0.0000050000000000)
                              {
                                bgotonextstatement = false;
                                {
                                  IkReal j4eval[3];
                                  sj5 = 1.0;
                                  cj5 = 0;
                                  j5 = 1.5707963267949;
                                  IkReal x295 = ((1.0) * sj6);
                                  IkReal x296 = (((new_r10 * new_r11)) + ((new_r00 * new_r01)));
                                  j4eval[0] = x296;
                                  j4eval[1] = IKsign(x296);
                                  j4eval[2] = ((IKabs(((((-1.0) * new_r10 * x295)) + ((new_r01 * sj6))))) +
                                               (IKabs(((((-1.0) * new_r11 * x295)) + (((-1.0) * new_r00 * x295))))));
                                  if (IKabs(j4eval[0]) < 0.0000010000000000 || IKabs(j4eval[1]) < 0.0000010000000000 ||
                                      IKabs(j4eval[2]) < 0.0000010000000000)
                                  {
                                    {
                                      IkReal j4eval[3];
                                      sj5 = 1.0;
                                      cj5 = 0;
                                      j5 = 1.5707963267949;
                                      IkReal x297 = ((1.0) * new_r11);
                                      IkReal x298 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                      j4eval[0] = x298;
                                      j4eval[1] = ((IKabs(((((-1.0) * new_r01 * sj6)) + (((-1.0) * cj6 * x297))))) +
                                                   (IKabs(((((-1.0) * sj6 * x297)) + ((cj6 * new_r01))))));
                                      j4eval[2] = IKsign(x298);
                                      if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                          IKabs(j4eval[1]) < 0.0000010000000000 ||
                                          IKabs(j4eval[2]) < 0.0000010000000000)
                                      {
                                        {
                                          IkReal j4eval[3];
                                          sj5 = 1.0;
                                          cj5 = 0;
                                          j5 = 1.5707963267949;
                                          IkReal x299 = (((new_r11 * sj6)) + ((cj6 * new_r01)));
                                          j4eval[0] = x299;
                                          j4eval[1] =
                                              ((IKabs(((-1.0) + (new_r01 * new_r01) + (cj6 * cj6)))) +
                                               (IKabs(((((-1.0) * new_r01 * new_r11)) + (((-1.0) * cj6 * sj6))))));
                                          j4eval[2] = IKsign(x299);
                                          if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                              IKabs(j4eval[1]) < 0.0000010000000000 ||
                                              IKabs(j4eval[2]) < 0.0000010000000000)
                                          {
                                            {
                                              IkReal evalcond[1];
                                              bool bgotonextstatement = true;
                                              do
                                              {
                                                IkReal x301 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                if (IKabs(x301) == 0)
                                                {
                                                  continue;
                                                }
                                                IkReal x300 = pow(x301, -0.5);
                                                CheckValue<IkReal> x302 = IKatan2WithCheck(
                                                    IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                if (!x302.valid)
                                                {
                                                  continue;
                                                }
                                                IkReal gconst0 = ((-1.0) * (x302.value));
                                                IkReal gconst1 = ((-1.0) * new_r01 * x300);
                                                IkReal gconst2 = (new_r11 * x300);
                                                CheckValue<IkReal> x303 = IKatan2WithCheck(
                                                    IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                if (!x303.valid)
                                                {
                                                  continue;
                                                }
                                                evalcond[0] =
                                                    ((-3.14159265358979) +
                                                     (IKfmod(((3.14159265358979) + (IKabs(((x303.value) + j6)))),
                                                             6.28318530717959)));
                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                {
                                                  bgotonextstatement = false;
                                                  {
                                                    IkReal j4eval[3];
                                                    CheckValue<IkReal> x306 = IKatan2WithCheck(
                                                        IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                    if (!x306.valid)
                                                    {
                                                      continue;
                                                    }
                                                    IkReal x304 = ((-1.0) * (x306.value));
                                                    IkReal x305 = x300;
                                                    sj5 = 1.0;
                                                    cj5 = 0;
                                                    j5 = 1.5707963267949;
                                                    sj6 = gconst1;
                                                    cj6 = gconst2;
                                                    j6 = x304;
                                                    IkReal gconst0 = x304;
                                                    IkReal gconst1 = ((-1.0) * new_r01 * x305);
                                                    IkReal gconst2 = (new_r11 * x305);
                                                    IkReal x307 = new_r01 * new_r01;
                                                    IkReal x308 = (new_r00 * new_r01);
                                                    IkReal x309 = (((new_r10 * new_r11)) + x308);
                                                    IkReal x310 = x300;
                                                    IkReal x311 = (new_r01 * x310);
                                                    j4eval[0] = x309;
                                                    j4eval[1] =
                                                        ((IKabs(((((-1.0) * x307 * x310)) + ((new_r10 * x311))))) +
                                                         (IKabs((((x308 * x310)) + ((new_r11 * x311))))));
                                                    j4eval[2] = IKsign(x309);
                                                    if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                        IKabs(j4eval[1]) < 0.0000010000000000 ||
                                                        IKabs(j4eval[2]) < 0.0000010000000000)
                                                    {
                                                      {
                                                        IkReal j4eval[2];
                                                        CheckValue<IkReal> x314 = IKatan2WithCheck(
                                                            IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x314.valid)
                                                        {
                                                          continue;
                                                        }
                                                        IkReal x312 = ((-1.0) * (x314.value));
                                                        IkReal x313 = x300;
                                                        sj5 = 1.0;
                                                        cj5 = 0;
                                                        j5 = 1.5707963267949;
                                                        sj6 = gconst1;
                                                        cj6 = gconst2;
                                                        j6 = x312;
                                                        IkReal gconst0 = x312;
                                                        IkReal gconst1 = ((-1.0) * new_r01 * x313);
                                                        IkReal gconst2 = (new_r11 * x313);
                                                        IkReal x315 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                        j4eval[0] = x315;
                                                        j4eval[1] = IKsign(x315);
                                                        if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                            IKabs(j4eval[1]) < 0.0000010000000000)
                                                        {
                                                          {
                                                            IkReal j4eval[1];
                                                            CheckValue<IkReal> x318 =
                                                                IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11),
                                                                                 IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x318.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x316 = ((-1.0) * (x318.value));
                                                            IkReal x317 = x300;
                                                            sj5 = 1.0;
                                                            cj5 = 0;
                                                            j5 = 1.5707963267949;
                                                            sj6 = gconst1;
                                                            cj6 = gconst2;
                                                            j6 = x316;
                                                            IkReal gconst0 = x316;
                                                            IkReal gconst1 = ((-1.0) * new_r01 * x317);
                                                            IkReal gconst2 = (new_r11 * x317);
                                                            IkReal x319 = new_r01 * new_r01;
                                                            IkReal x320 = new_r11 * new_r11;
                                                            IkReal x321 = ((1.0) * x319);
                                                            CheckValue<IkReal> x327 =
                                                                IKPowWithIntegerCheck((x320 + x319), -1);
                                                            if (!x327.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x322 = x327.value;
                                                            CheckValue<IkReal> x328 = IKPowWithIntegerCheck(
                                                                ((((-1.0) * x321)) + (((-1.0) * x320))), -1);
                                                            if (!x328.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x323 = x328.value;
                                                            IkReal x324 = ((1.0) * x323);
                                                            IkReal x325 = (new_r11 * x324);
                                                            IkReal x326 = (new_r01 * x324);
                                                            j4eval[0] =
                                                                ((IKabs((
                                                                     (((-1.0) * x325 * (new_r01 * new_r01 * new_r01))) +
                                                                     (((-1.0) * new_r01 * x325 * (new_r11 * new_r11))) +
                                                                     (((-1.0) * new_r01 * x325))))) +
                                                                 (IKabs(((((-1.0) * x321 * x322)) +
                                                                         ((x319 * x320 * x322)) +
                                                                         ((x322 * (x320 * x320)))))));
                                                            if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                            {
                                                              {
                                                                IkReal evalcond[2];
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r00)));
                                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                      IkReal j4eval[1];
                                                                      CheckValue<IkReal> x330 =
                                                                          IKatan2WithCheck(IkReal(new_r01), IkReal(0),
                                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x330.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      IkReal x329 = ((-1.0) * (x330.value));
                                                                      sj5 = 1.0;
                                                                      cj5 = 0;
                                                                      j5 = 1.5707963267949;
                                                                      sj6 = gconst1;
                                                                      cj6 = gconst2;
                                                                      j6 = x329;
                                                                      new_r11 = 0;
                                                                      new_r00 = 0;
                                                                      IkReal gconst0 = x329;
                                                                      IkReal x331 = new_r01 * new_r01;
                                                                      if (IKabs(x331) == 0)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      IkReal gconst1 =
                                                                          ((-1.0) * new_r01 * (pow(x331, -0.5)));
                                                                      IkReal gconst2 = 0;
                                                                      j4eval[0] = new_r01;
                                                                      if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                      {
                                                                        {
                                                                          IkReal j4eval[1];
                                                                          CheckValue<IkReal> x333 =
                                                                              IKatan2WithCheck(IkReal(new_r01),
                                                                                               IkReal(0),
                                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                                          if (!x333.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          IkReal x332 = ((-1.0) * (x333.value));
                                                                          sj5 = 1.0;
                                                                          cj5 = 0;
                                                                          j5 = 1.5707963267949;
                                                                          sj6 = gconst1;
                                                                          cj6 = gconst2;
                                                                          j6 = x332;
                                                                          new_r11 = 0;
                                                                          new_r00 = 0;
                                                                          IkReal gconst0 = x332;
                                                                          IkReal x334 = new_r01 * new_r01;
                                                                          if (IKabs(x334) == 0)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          IkReal gconst1 =
                                                                              ((-1.0) * new_r01 * (pow(x334, -0.5)));
                                                                          IkReal gconst2 = 0;
                                                                          j4eval[0] = new_r10;
                                                                          if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                          {
                                                                            {
                                                                              IkReal j4array[2], cj4array[2],
                                                                                  sj4array[2];
                                                                              bool j4valid[2] = { false };
                                                                              _nj4 = 2;
                                                                              CheckValue<IkReal> x335 =
                                                                                  IKPowWithIntegerCheck(gconst1, -1);
                                                                              if (!x335.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              cj4array[0] =
                                                                                  ((-1.0) * new_r01 * (x335.value));
                                                                              if (cj4array[0] >=
                                                                                      -1 - IKFAST_SINCOS_THRESH &&
                                                                                  cj4array[0] <=
                                                                                      1 + IKFAST_SINCOS_THRESH)
                                                                              {
                                                                                j4valid[0] = j4valid[1] = true;
                                                                                j4array[0] = IKacos(cj4array[0]);
                                                                                sj4array[0] = IKsin(j4array[0]);
                                                                                cj4array[1] = cj4array[0];
                                                                                j4array[1] = -j4array[0];
                                                                                sj4array[1] = -sj4array[0];
                                                                              }
                                                                              else if (isnan(cj4array[0]))
                                                                              {
                                                                                // probably any value will work
                                                                                j4valid[0] = true;
                                                                                cj4array[0] = 1;
                                                                                sj4array[0] = 0;
                                                                                j4array[0] = 0;
                                                                              }
                                                                              for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                              {
                                                                                if (!j4valid[ij4])
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                _ij4[0] = ij4;
                                                                                _ij4[1] = -1;
                                                                                for (int iij4 = ij4 + 1; iij4 < 2;
                                                                                     ++iij4)
                                                                                {
                                                                                  if (j4valid[iij4] &&
                                                                                      IKabs(cj4array[ij4] -
                                                                                            cj4array[iij4]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj4array[ij4] -
                                                                                            sj4array[iij4]) <
                                                                                          IKFAST_SOLUTION_THRESH)
                                                                                  {
                                                                                    j4valid[iij4] = false;
                                                                                    _ij4[1] = iij4;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j4 = j4array[ij4];
                                                                                cj4 = cj4array[ij4];
                                                                                sj4 = sj4array[ij4];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x336 = IKsin(j4);
                                                                                  IkReal x337 = IKcos(j4);
                                                                                  evalcond[0] = (new_r10 * x336);
                                                                                  evalcond[1] = (gconst1 * x336);
                                                                                  evalcond[2] =
                                                                                      ((-1.0) * new_r01 * x336);
                                                                                  evalcond[3] =
                                                                                      (((new_r01 * x337)) + gconst1);
                                                                                  evalcond[4] =
                                                                                      (gconst1 + ((new_r10 * x337)));
                                                                                  evalcond[5] =
                                                                                      (((gconst1 * x337)) + new_r10);
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 17;
                                                                                  vinfos[0].foffset = j0;
                                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                                  vinfos[0].maxsolutions = _nj0;
                                                                                  vinfos[1].jointtype = 17;
                                                                                  vinfos[1].foffset = j1;
                                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                                  vinfos[1].maxsolutions = _nj1;
                                                                                  vinfos[2].jointtype = 17;
                                                                                  vinfos[2].foffset = j2;
                                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                                  vinfos[2].maxsolutions = _nj2;
                                                                                  vinfos[3].jointtype = 17;
                                                                                  vinfos[3].foffset = j3;
                                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                                  vinfos[3].maxsolutions = _nj3;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j4;
                                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                                  vinfos[4].maxsolutions = _nj4;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j5;
                                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                                  vinfos[5].maxsolutions = _nj5;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j6;
                                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                                  vinfos[6].maxsolutions = _nj6;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            {
                                                                              IkReal j4array[2], cj4array[2],
                                                                                  sj4array[2];
                                                                              bool j4valid[2] = { false };
                                                                              _nj4 = 2;
                                                                              CheckValue<IkReal> x338 =
                                                                                  IKPowWithIntegerCheck(new_r10, -1);
                                                                              if (!x338.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              cj4array[0] =
                                                                                  ((-1.0) * gconst1 * (x338.value));
                                                                              if (cj4array[0] >=
                                                                                      -1 - IKFAST_SINCOS_THRESH &&
                                                                                  cj4array[0] <=
                                                                                      1 + IKFAST_SINCOS_THRESH)
                                                                              {
                                                                                j4valid[0] = j4valid[1] = true;
                                                                                j4array[0] = IKacos(cj4array[0]);
                                                                                sj4array[0] = IKsin(j4array[0]);
                                                                                cj4array[1] = cj4array[0];
                                                                                j4array[1] = -j4array[0];
                                                                                sj4array[1] = -sj4array[0];
                                                                              }
                                                                              else if (isnan(cj4array[0]))
                                                                              {
                                                                                // probably any value will work
                                                                                j4valid[0] = true;
                                                                                cj4array[0] = 1;
                                                                                sj4array[0] = 0;
                                                                                j4array[0] = 0;
                                                                              }
                                                                              for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                              {
                                                                                if (!j4valid[ij4])
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                _ij4[0] = ij4;
                                                                                _ij4[1] = -1;
                                                                                for (int iij4 = ij4 + 1; iij4 < 2;
                                                                                     ++iij4)
                                                                                {
                                                                                  if (j4valid[iij4] &&
                                                                                      IKabs(cj4array[ij4] -
                                                                                            cj4array[iij4]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj4array[ij4] -
                                                                                            sj4array[iij4]) <
                                                                                          IKFAST_SOLUTION_THRESH)
                                                                                  {
                                                                                    j4valid[iij4] = false;
                                                                                    _ij4[1] = iij4;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j4 = j4array[ij4];
                                                                                cj4 = cj4array[ij4];
                                                                                sj4 = sj4array[ij4];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x339 = IKsin(j4);
                                                                                  IkReal x340 = IKcos(j4);
                                                                                  IkReal x341 = (gconst1 * x340);
                                                                                  evalcond[0] = (new_r10 * x339);
                                                                                  evalcond[1] = (gconst1 * x339);
                                                                                  evalcond[2] =
                                                                                      ((-1.0) * new_r01 * x339);
                                                                                  evalcond[3] =
                                                                                      (gconst1 + ((new_r01 * x340)));
                                                                                  evalcond[4] = (x341 + new_r01);
                                                                                  evalcond[5] = (x341 + new_r10);
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 17;
                                                                                  vinfos[0].foffset = j0;
                                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                                  vinfos[0].maxsolutions = _nj0;
                                                                                  vinfos[1].jointtype = 17;
                                                                                  vinfos[1].foffset = j1;
                                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                                  vinfos[1].maxsolutions = _nj1;
                                                                                  vinfos[2].jointtype = 17;
                                                                                  vinfos[2].foffset = j2;
                                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                                  vinfos[2].maxsolutions = _nj2;
                                                                                  vinfos[3].jointtype = 17;
                                                                                  vinfos[3].foffset = j3;
                                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                                  vinfos[3].maxsolutions = _nj3;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j4;
                                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                                  vinfos[4].maxsolutions = _nj4;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j5;
                                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                                  vinfos[5].maxsolutions = _nj5;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j6;
                                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                                  vinfos[6].maxsolutions = _nj6;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      else
                                                                      {
                                                                        {
                                                                          IkReal j4array[2], cj4array[2], sj4array[2];
                                                                          bool j4valid[2] = { false };
                                                                          _nj4 = 2;
                                                                          CheckValue<IkReal> x342 =
                                                                              IKPowWithIntegerCheck(new_r01, -1);
                                                                          if (!x342.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          cj4array[0] =
                                                                              ((-1.0) * gconst1 * (x342.value));
                                                                          if (cj4array[0] >= -1 - IKFAST_SINCOS_THRESH &&
                                                                              cj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                          {
                                                                            j4valid[0] = j4valid[1] = true;
                                                                            j4array[0] = IKacos(cj4array[0]);
                                                                            sj4array[0] = IKsin(j4array[0]);
                                                                            cj4array[1] = cj4array[0];
                                                                            j4array[1] = -j4array[0];
                                                                            sj4array[1] = -sj4array[0];
                                                                          }
                                                                          else if (isnan(cj4array[0]))
                                                                          {
                                                                            // probably any value will work
                                                                            j4valid[0] = true;
                                                                            cj4array[0] = 1;
                                                                            sj4array[0] = 0;
                                                                            j4array[0] = 0;
                                                                          }
                                                                          for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                          {
                                                                            if (!j4valid[ij4])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij4[0] = ij4;
                                                                            _ij4[1] = -1;
                                                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                            {
                                                                              if (j4valid[iij4] &&
                                                                                  IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j4valid[iij4] = false;
                                                                                _ij4[1] = iij4;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j4 = j4array[ij4];
                                                                            cj4 = cj4array[ij4];
                                                                            sj4 = sj4array[ij4];
                                                                            {
                                                                              IkReal evalcond[6];
                                                                              IkReal x343 = IKsin(j4);
                                                                              IkReal x344 = IKcos(j4);
                                                                              IkReal x345 = (gconst1 * x344);
                                                                              evalcond[0] = (new_r10 * x343);
                                                                              evalcond[1] = (gconst1 * x343);
                                                                              evalcond[2] = ((-1.0) * new_r01 * x343);
                                                                              evalcond[3] =
                                                                                  (gconst1 + ((new_r10 * x344)));
                                                                              evalcond[4] = (x345 + new_r01);
                                                                              evalcond[5] = (x345 + new_r10);
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 17;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement)
                                                                {
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    evalcond[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                    evalcond[1] = gconst1;
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                        IKabs(evalcond[1]) < 0.0000050000000000)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j4eval[3];
                                                                        CheckValue<IkReal> x347 =
                                                                            IKatan2WithCheck(IkReal(new_r01),
                                                                                             IkReal(new_r11),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x347.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        IkReal x346 = ((-1.0) * (x347.value));
                                                                        sj5 = 1.0;
                                                                        cj5 = 0;
                                                                        j5 = 1.5707963267949;
                                                                        sj6 = gconst1;
                                                                        cj6 = gconst2;
                                                                        j6 = x346;
                                                                        new_r00 = 0;
                                                                        new_r10 = 0;
                                                                        new_r21 = 0;
                                                                        new_r22 = 0;
                                                                        IkReal gconst0 = x346;
                                                                        IkReal gconst1 = ((-1.0) * new_r01);
                                                                        IkReal gconst2 = new_r11;
                                                                        j4eval[0] = -1.0;
                                                                        j4eval[1] = ((IKabs(new_r01 * new_r01)) +
                                                                                     (IKabs((new_r01 * new_r11))));
                                                                        j4eval[2] = -1.0;
                                                                        if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                            IKabs(j4eval[1]) < 0.0000010000000000 ||
                                                                            IKabs(j4eval[2]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j4eval[3];
                                                                            CheckValue<IkReal> x349 = IKatan2WithCheck(
                                                                                IkReal(new_r01), IkReal(new_r11),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x349.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal x348 = ((-1.0) * (x349.value));
                                                                            sj5 = 1.0;
                                                                            cj5 = 0;
                                                                            j5 = 1.5707963267949;
                                                                            sj6 = gconst1;
                                                                            cj6 = gconst2;
                                                                            j6 = x348;
                                                                            new_r00 = 0;
                                                                            new_r10 = 0;
                                                                            new_r21 = 0;
                                                                            new_r22 = 0;
                                                                            IkReal gconst0 = x348;
                                                                            IkReal gconst1 = ((-1.0) * new_r01);
                                                                            IkReal gconst2 = new_r11;
                                                                            j4eval[0] = -1.0;
                                                                            j4eval[1] = -1.0;
                                                                            j4eval[2] =
                                                                                ((IKabs((new_r01 * new_r11))) +
                                                                                 (IKabs(((1.0) +
                                                                                         (((-1.0) *
                                                                                           (new_r01 * new_r01)))))));
                                                                            if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                                IKabs(j4eval[1]) < 0.0000010000000000 ||
                                                                                IKabs(j4eval[2]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal j4eval[3];
                                                                                CheckValue<IkReal> x351 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(new_r01),
                                                                                        IkReal(new_r11),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x351.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x350 = ((-1.0) * (x351.value));
                                                                                sj5 = 1.0;
                                                                                cj5 = 0;
                                                                                j5 = 1.5707963267949;
                                                                                sj6 = gconst1;
                                                                                cj6 = gconst2;
                                                                                j6 = x350;
                                                                                new_r00 = 0;
                                                                                new_r10 = 0;
                                                                                new_r21 = 0;
                                                                                new_r22 = 0;
                                                                                IkReal gconst0 = x350;
                                                                                IkReal gconst1 = ((-1.0) * new_r01);
                                                                                IkReal gconst2 = new_r11;
                                                                                j4eval[0] = 1.0;
                                                                                j4eval[1] =
                                                                                    ((((0.5) *
                                                                                       (IKabs(
                                                                                           ((-1.0) +
                                                                                            (((2.0) * (new_r01 *
                                                                                                       new_r01)))))))) +
                                                                                     (IKabs((new_r01 * new_r11))));
                                                                                j4eval[2] = 1.0;
                                                                                if (IKabs(j4eval[0]) <
                                                                                        0.0000010000000000 ||
                                                                                    IKabs(j4eval[1]) <
                                                                                        0.0000010000000000 ||
                                                                                    IKabs(j4eval[2]) <
                                                                                        0.0000010000000000)
                                                                                {
                                                                                  continue;  // 3 cases reached
                                                                                }
                                                                                else
                                                                                {
                                                                                  {
                                                                                    IkReal j4array[1], cj4array[1],
                                                                                        sj4array[1];
                                                                                    bool j4valid[1] = { false };
                                                                                    _nj4 = 1;
                                                                                    IkReal x352 = ((1.0) * new_r11);
                                                                                    CheckValue<IkReal> x353 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(
                                                                                                (((gconst2 * new_r01)) +
                                                                                                 (((-1.0) * gconst1 *
                                                                                                   x352)))),
                                                                                            IkReal(((((-1.0) * gconst1 *
                                                                                                      new_r01)) +
                                                                                                    (((-1.0) * gconst2 *
                                                                                                      x352)))),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x353.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x354 =
                                                                                        IKPowWithIntegerCheck(
                                                                                            IKsign(
                                                                                                ((new_r01 * new_r01) +
                                                                                                 (new_r11 * new_r11))),
                                                                                            -1);
                                                                                    if (!x354.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    j4array[0] = ((-1.5707963267949) +
                                                                                                  (x353.value) +
                                                                                                  (((1.5707963267949) *
                                                                                                    (x354.value))));
                                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                                    if (j4array[0] > IKPI)
                                                                                    {
                                                                                      j4array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j4array[0] < -IKPI)
                                                                                    {
                                                                                      j4array[0] += IK2PI;
                                                                                    }
                                                                                    j4valid[0] = true;
                                                                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                    {
                                                                                      if (!j4valid[ij4])
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      _ij4[0] = ij4;
                                                                                      _ij4[1] = -1;
                                                                                      for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                           ++iij4)
                                                                                      {
                                                                                        if (j4valid[iij4] &&
                                                                                            IKabs(cj4array[ij4] -
                                                                                                  cj4array[iij4]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj4array[ij4] -
                                                                                                  sj4array[iij4]) <
                                                                                                IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                          j4valid[iij4] = false;
                                                                                          _ij4[1] = iij4;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j4 = j4array[ij4];
                                                                                      cj4 = cj4array[ij4];
                                                                                      sj4 = sj4array[ij4];
                                                                                      {
                                                                                        IkReal evalcond[6];
                                                                                        IkReal x355 = IKsin(j4);
                                                                                        IkReal x356 = IKcos(j4);
                                                                                        IkReal x357 = (gconst1 * x356);
                                                                                        IkReal x358 = ((1.0) * x355);
                                                                                        IkReal x359 = (gconst2 * x356);
                                                                                        IkReal x360 = (gconst2 * x358);
                                                                                        evalcond[0] =
                                                                                            (((new_r01 * x356)) +
                                                                                             gconst1 +
                                                                                             ((new_r11 * x355)));
                                                                                        evalcond[1] =
                                                                                            (((gconst1 * x355)) + x359 +
                                                                                             new_r11);
                                                                                        evalcond[2] =
                                                                                            ((((-1.0) * x360)) + x357);
                                                                                        evalcond[3] =
                                                                                            (gconst2 +
                                                                                             (((-1.0) * new_r01 * x358)) +
                                                                                             ((new_r11 * x356)));
                                                                                        evalcond[4] =
                                                                                            ((((-1.0) * x360)) + x357 +
                                                                                             new_r01);
                                                                                        evalcond[5] =
                                                                                            ((((-1.0) * x359)) +
                                                                                             (((-1.0) * gconst1 *
                                                                                               x358)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[4]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[5]) >
                                                                                                IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 17;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 17;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 17;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 17;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j4array[1], cj4array[1],
                                                                                    sj4array[1];
                                                                                bool j4valid[1] = { false };
                                                                                _nj4 = 1;
                                                                                CheckValue<IkReal> x361 =
                                                                                    IKPowWithIntegerCheck(
                                                                                        IKsign(((((-1.0) * (gconst2 *
                                                                                                            gconst2))) +
                                                                                                (((-1.0) * (gconst1 *
                                                                                                            gconst1))))),
                                                                                        -1);
                                                                                if (!x361.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                CheckValue<IkReal> x362 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal((gconst1 * new_r11)),
                                                                                        IkReal((gconst2 * new_r11)),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x362.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                j4array[0] = ((-1.5707963267949) +
                                                                                              (((1.5707963267949) *
                                                                                                (x361.value))) +
                                                                                              (x362.value));
                                                                                sj4array[0] = IKsin(j4array[0]);
                                                                                cj4array[0] = IKcos(j4array[0]);
                                                                                if (j4array[0] > IKPI)
                                                                                {
                                                                                  j4array[0] -= IK2PI;
                                                                                }
                                                                                else if (j4array[0] < -IKPI)
                                                                                {
                                                                                  j4array[0] += IK2PI;
                                                                                }
                                                                                j4valid[0] = true;
                                                                                for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                {
                                                                                  if (!j4valid[ij4])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij4[0] = ij4;
                                                                                  _ij4[1] = -1;
                                                                                  for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                       ++iij4)
                                                                                  {
                                                                                    if (j4valid[iij4] &&
                                                                                        IKabs(cj4array[ij4] -
                                                                                              cj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj4array[ij4] -
                                                                                              sj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j4valid[iij4] = false;
                                                                                      _ij4[1] = iij4;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j4 = j4array[ij4];
                                                                                  cj4 = cj4array[ij4];
                                                                                  sj4 = sj4array[ij4];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x363 = IKsin(j4);
                                                                                    IkReal x364 = IKcos(j4);
                                                                                    IkReal x365 = (gconst1 * x364);
                                                                                    IkReal x366 = ((1.0) * x363);
                                                                                    IkReal x367 = (gconst2 * x364);
                                                                                    IkReal x368 = (gconst2 * x366);
                                                                                    evalcond[0] =
                                                                                        (gconst1 + ((new_r01 * x364)) +
                                                                                         ((new_r11 * x363)));
                                                                                    evalcond[1] =
                                                                                        (x367 + ((gconst1 * x363)) +
                                                                                         new_r11);
                                                                                    evalcond[2] =
                                                                                        ((((-1.0) * x368)) + x365);
                                                                                    evalcond[3] =
                                                                                        (gconst2 +
                                                                                         (((-1.0) * new_r01 * x366)) +
                                                                                         ((new_r11 * x364)));
                                                                                    evalcond[4] = ((((-1.0) * x368)) +
                                                                                                   x365 + new_r01);
                                                                                    evalcond[5] =
                                                                                        ((((-1.0) * x367)) +
                                                                                         (((-1.0) * gconst1 * x366)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                                            bool j4valid[1] = { false };
                                                                            _nj4 = 1;
                                                                            CheckValue<IkReal> x369 =
                                                                                IKPowWithIntegerCheck(
                                                                                    IKsign((((gconst1 * new_r01)) +
                                                                                            (((-1.0) * gconst2 *
                                                                                              new_r11)))),
                                                                                    -1);
                                                                            if (!x369.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x370 = IKatan2WithCheck(
                                                                                IkReal((gconst1 * gconst2)),
                                                                                IkReal(((-1.0) * (gconst1 * gconst1))),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x370.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            j4array[0] =
                                                                                ((-1.5707963267949) +
                                                                                 (((1.5707963267949) * (x369.value))) +
                                                                                 (x370.value));
                                                                            sj4array[0] = IKsin(j4array[0]);
                                                                            cj4array[0] = IKcos(j4array[0]);
                                                                            if (j4array[0] > IKPI)
                                                                            {
                                                                              j4array[0] -= IK2PI;
                                                                            }
                                                                            else if (j4array[0] < -IKPI)
                                                                            {
                                                                              j4array[0] += IK2PI;
                                                                            }
                                                                            j4valid[0] = true;
                                                                            for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                            {
                                                                              if (!j4valid[ij4])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij4[0] = ij4;
                                                                              _ij4[1] = -1;
                                                                              for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                              {
                                                                                if (j4valid[iij4] &&
                                                                                    IKabs(cj4array[ij4] -
                                                                                          cj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj4array[ij4] -
                                                                                          sj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j4valid[iij4] = false;
                                                                                  _ij4[1] = iij4;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j4 = j4array[ij4];
                                                                              cj4 = cj4array[ij4];
                                                                              sj4 = sj4array[ij4];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x371 = IKsin(j4);
                                                                                IkReal x372 = IKcos(j4);
                                                                                IkReal x373 = (gconst1 * x372);
                                                                                IkReal x374 = ((1.0) * x371);
                                                                                IkReal x375 = (gconst2 * x372);
                                                                                IkReal x376 = (gconst2 * x374);
                                                                                evalcond[0] =
                                                                                    (gconst1 + ((new_r01 * x372)) +
                                                                                     ((new_r11 * x371)));
                                                                                evalcond[1] =
                                                                                    (x375 + ((gconst1 * x371)) +
                                                                                     new_r11);
                                                                                evalcond[2] =
                                                                                    ((((-1.0) * x376)) + x373);
                                                                                evalcond[3] =
                                                                                    (gconst2 +
                                                                                     (((-1.0) * new_r01 * x374)) +
                                                                                     ((new_r11 * x372)));
                                                                                evalcond[4] = ((((-1.0) * x376)) +
                                                                                               x373 + new_r01);
                                                                                evalcond[5] =
                                                                                    ((((-1.0) * x375)) +
                                                                                     (((-1.0) * gconst1 * x374)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement)
                                                                  {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      evalcond[0] =
                                                                          ((IKabs(new_r10)) + (IKabs(new_r01)));
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j4array[2], cj4array[2], sj4array[2];
                                                                          bool j4valid[2] = { false };
                                                                          _nj4 = 2;
                                                                          CheckValue<IkReal> x377 =
                                                                              IKPowWithIntegerCheck(gconst2, -1);
                                                                          if (!x377.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          cj4array[0] = (new_r00 * (x377.value));
                                                                          if (cj4array[0] >= -1 - IKFAST_SINCOS_THRESH &&
                                                                              cj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                          {
                                                                            j4valid[0] = j4valid[1] = true;
                                                                            j4array[0] = IKacos(cj4array[0]);
                                                                            sj4array[0] = IKsin(j4array[0]);
                                                                            cj4array[1] = cj4array[0];
                                                                            j4array[1] = -j4array[0];
                                                                            sj4array[1] = -sj4array[0];
                                                                          }
                                                                          else if (isnan(cj4array[0]))
                                                                          {
                                                                            // probably any value will work
                                                                            j4valid[0] = true;
                                                                            cj4array[0] = 1;
                                                                            sj4array[0] = 0;
                                                                            j4array[0] = 0;
                                                                          }
                                                                          for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                          {
                                                                            if (!j4valid[ij4])
                                                                            {
                                                                              continue;
                                                                            }
                                                                            _ij4[0] = ij4;
                                                                            _ij4[1] = -1;
                                                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                            {
                                                                              if (j4valid[iij4] &&
                                                                                  IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                  IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                                      IKFAST_SOLUTION_THRESH)
                                                                              {
                                                                                j4valid[iij4] = false;
                                                                                _ij4[1] = iij4;
                                                                                break;
                                                                              }
                                                                            }
                                                                            j4 = j4array[ij4];
                                                                            cj4 = cj4array[ij4];
                                                                            sj4 = sj4array[ij4];
                                                                            {
                                                                              IkReal evalcond[6];
                                                                              IkReal x378 = IKsin(j4);
                                                                              IkReal x379 = IKcos(j4);
                                                                              IkReal x380 = ((-1.0) * x378);
                                                                              evalcond[0] = (new_r11 * x378);
                                                                              evalcond[1] = (new_r00 * x380);
                                                                              evalcond[2] = (gconst2 * x380);
                                                                              evalcond[3] =
                                                                                  (((gconst2 * x379)) + new_r11);
                                                                              evalcond[4] =
                                                                                  (gconst2 + ((new_r11 * x379)));
                                                                              evalcond[5] = ((((-1.0) * gconst2)) +
                                                                                             ((new_r00 * x379)));
                                                                              if (IKabs(evalcond[0]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[1]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[2]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[3]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[4]) >
                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                  IKabs(evalcond[5]) >
                                                                                      IKFAST_EVALCOND_THRESH)
                                                                              {
                                                                                continue;
                                                                              }
                                                                            }

                                                                            {
                                                                              std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                  vinfos(7);
                                                                              vinfos[0].jointtype = 17;
                                                                              vinfos[0].foffset = j0;
                                                                              vinfos[0].indices[0] = _ij0[0];
                                                                              vinfos[0].indices[1] = _ij0[1];
                                                                              vinfos[0].maxsolutions = _nj0;
                                                                              vinfos[1].jointtype = 17;
                                                                              vinfos[1].foffset = j1;
                                                                              vinfos[1].indices[0] = _ij1[0];
                                                                              vinfos[1].indices[1] = _ij1[1];
                                                                              vinfos[1].maxsolutions = _nj1;
                                                                              vinfos[2].jointtype = 17;
                                                                              vinfos[2].foffset = j2;
                                                                              vinfos[2].indices[0] = _ij2[0];
                                                                              vinfos[2].indices[1] = _ij2[1];
                                                                              vinfos[2].maxsolutions = _nj2;
                                                                              vinfos[3].jointtype = 17;
                                                                              vinfos[3].foffset = j3;
                                                                              vinfos[3].indices[0] = _ij3[0];
                                                                              vinfos[3].indices[1] = _ij3[1];
                                                                              vinfos[3].maxsolutions = _nj3;
                                                                              vinfos[4].jointtype = 1;
                                                                              vinfos[4].foffset = j4;
                                                                              vinfos[4].indices[0] = _ij4[0];
                                                                              vinfos[4].indices[1] = _ij4[1];
                                                                              vinfos[4].maxsolutions = _nj4;
                                                                              vinfos[5].jointtype = 1;
                                                                              vinfos[5].foffset = j5;
                                                                              vinfos[5].indices[0] = _ij5[0];
                                                                              vinfos[5].indices[1] = _ij5[1];
                                                                              vinfos[5].maxsolutions = _nj5;
                                                                              vinfos[6].jointtype = 1;
                                                                              vinfos[6].foffset = j6;
                                                                              vinfos[6].indices[0] = _ij6[0];
                                                                              vinfos[6].indices[1] = _ij6[1];
                                                                              vinfos[6].maxsolutions = _nj6;
                                                                              std::vector<int> vfree(0);
                                                                              solutions.AddSolution(vinfos, vfree);
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                      bool bgotonextstatement = true;
                                                                      do
                                                                      {
                                                                        evalcond[0] =
                                                                            ((IKabs(new_r00)) + (IKabs(new_r01)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j4eval[1];
                                                                            CheckValue<IkReal> x382 = IKatan2WithCheck(
                                                                                IkReal(0), IkReal(new_r11),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x382.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal x381 = ((-1.0) * (x382.value));
                                                                            sj5 = 1.0;
                                                                            cj5 = 0;
                                                                            j5 = 1.5707963267949;
                                                                            sj6 = gconst1;
                                                                            cj6 = gconst2;
                                                                            j6 = x381;
                                                                            new_r00 = 0;
                                                                            new_r01 = 0;
                                                                            new_r12 = 0;
                                                                            new_r22 = 0;
                                                                            IkReal gconst0 = x381;
                                                                            IkReal gconst1 = 0;
                                                                            IkReal x383 =
                                                                                ((1.0) +
                                                                                 (((-1.0) * (new_r10 * new_r10))));
                                                                            if (IKabs(x383) == 0)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal gconst2 =
                                                                                (new_r11 * (pow(x383, -0.5)));
                                                                            j4eval[0] =
                                                                                ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                            if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal j4eval[1];
                                                                                CheckValue<IkReal> x385 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(0), IkReal(new_r11),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x385.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x384 = ((-1.0) * (x385.value));
                                                                                sj5 = 1.0;
                                                                                cj5 = 0;
                                                                                j5 = 1.5707963267949;
                                                                                sj6 = gconst1;
                                                                                cj6 = gconst2;
                                                                                j6 = x384;
                                                                                new_r00 = 0;
                                                                                new_r01 = 0;
                                                                                new_r12 = 0;
                                                                                new_r22 = 0;
                                                                                IkReal gconst0 = x384;
                                                                                IkReal gconst1 = 0;
                                                                                IkReal x386 =
                                                                                    ((1.0) +
                                                                                     (((-1.0) * (new_r10 * new_r10))));
                                                                                if (IKabs(x386) == 0)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal gconst2 =
                                                                                    (new_r11 * (pow(x386, -0.5)));
                                                                                j4eval[0] = new_r11;
                                                                                if (IKabs(j4eval[0]) <
                                                                                    0.0000010000000000)
                                                                                {
                                                                                  {
                                                                                    IkReal j4eval[1];
                                                                                    CheckValue<IkReal> x388 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(0), IkReal(new_r11),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x388.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal x387 =
                                                                                        ((-1.0) * (x388.value));
                                                                                    sj5 = 1.0;
                                                                                    cj5 = 0;
                                                                                    j5 = 1.5707963267949;
                                                                                    sj6 = gconst1;
                                                                                    cj6 = gconst2;
                                                                                    j6 = x387;
                                                                                    new_r00 = 0;
                                                                                    new_r01 = 0;
                                                                                    new_r12 = 0;
                                                                                    new_r22 = 0;
                                                                                    IkReal gconst0 = x387;
                                                                                    IkReal gconst1 = 0;
                                                                                    IkReal x389 =
                                                                                        ((1.0) +
                                                                                         (((-1.0) *
                                                                                           (new_r10 * new_r10))));
                                                                                    if (IKabs(x389) == 0)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal gconst2 =
                                                                                        (new_r11 * (pow(x389, -0.5)));
                                                                                    j4eval[0] = new_r10;
                                                                                    if (IKabs(j4eval[0]) <
                                                                                        0.0000010000000000)
                                                                                    {
                                                                                      continue;  // 3 cases reached
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      {
                                                                                        IkReal j4array[1], cj4array[1],
                                                                                            sj4array[1];
                                                                                        bool j4valid[1] = { false };
                                                                                        _nj4 = 1;
                                                                                        CheckValue<IkReal> x390 =
                                                                                            IKPowWithIntegerCheck(
                                                                                                new_r10, -1);
                                                                                        if (!x390.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x391 =
                                                                                            IKPowWithIntegerCheck(
                                                                                                gconst2, -1);
                                                                                        if (!x391.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        if (IKabs((gconst2 *
                                                                                                   (x390.value))) <
                                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                                            IKabs(((-1.0) * new_r11 *
                                                                                                   (x391.value))) <
                                                                                                IKFAST_ATAN2_MAGTHRESH &&
                                                                                            IKabs(
                                                                                                IKsqr((gconst2 *
                                                                                                       (x390.value))) +
                                                                                                IKsqr(((-1.0) * new_r11 *
                                                                                                       (x391.value))) -
                                                                                                1) <=
                                                                                                IKFAST_SINCOS_THRESH)
                                                                                          continue;
                                                                                        j4array[0] = IKatan2(
                                                                                            (gconst2 * (x390.value)),
                                                                                            ((-1.0) * new_r11 *
                                                                                             (x391.value)));
                                                                                        sj4array[0] = IKsin(j4array[0]);
                                                                                        cj4array[0] = IKcos(j4array[0]);
                                                                                        if (j4array[0] > IKPI)
                                                                                        {
                                                                                          j4array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j4array[0] < -IKPI)
                                                                                        {
                                                                                          j4array[0] += IK2PI;
                                                                                        }
                                                                                        j4valid[0] = true;
                                                                                        for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                        {
                                                                                          if (!j4valid[ij4])
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          _ij4[0] = ij4;
                                                                                          _ij4[1] = -1;
                                                                                          for (int iij4 = ij4 + 1;
                                                                                               iij4 < 1; ++iij4)
                                                                                          {
                                                                                            if (j4valid[iij4] &&
                                                                                                IKabs(cj4array[ij4] -
                                                                                                      cj4array[iij4]) <
                                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                                IKabs(sj4array[ij4] -
                                                                                                      sj4array[iij4]) <
                                                                                                    IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                              j4valid[iij4] = false;
                                                                                              _ij4[1] = iij4;
                                                                                              break;
                                                                                            }
                                                                                          }
                                                                                          j4 = j4array[ij4];
                                                                                          cj4 = cj4array[ij4];
                                                                                          sj4 = sj4array[ij4];
                                                                                          {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x392 = IKsin(j4);
                                                                                            IkReal x393 = IKcos(j4);
                                                                                            IkReal x394 =
                                                                                                (gconst2 * x393);
                                                                                            IkReal x395 =
                                                                                                (gconst2 * x392);
                                                                                            evalcond[0] =
                                                                                                (new_r11 * x392);
                                                                                            evalcond[1] =
                                                                                                (new_r10 * x393);
                                                                                            evalcond[2] =
                                                                                                ((-1.0) * x395);
                                                                                            evalcond[3] =
                                                                                                ((-1.0) * x394);
                                                                                            evalcond[4] =
                                                                                                (x394 + new_r11);
                                                                                            evalcond[5] =
                                                                                                (((new_r11 * x393)) +
                                                                                                 gconst2);
                                                                                            evalcond[6] =
                                                                                                ((((-1.0) * x395)) +
                                                                                                 new_r10);
                                                                                            evalcond[7] =
                                                                                                ((((-1.0) * gconst2)) +
                                                                                                 ((new_r10 * x392)));
                                                                                            if (IKabs(evalcond[0]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[1]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[2]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[3]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[4]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[5]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[6]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[7]) >
                                                                                                    IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                          }

                                                                                          {
                                                                                            std::vector<
                                                                                                IkSingleDOFSolutionBase<
                                                                                                    IkReal> >
                                                                                                vinfos(7);
                                                                                            vinfos[0].jointtype = 17;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] =
                                                                                                _ij0[0];
                                                                                            vinfos[0].indices[1] =
                                                                                                _ij0[1];
                                                                                            vinfos[0].maxsolutions =
                                                                                                _nj0;
                                                                                            vinfos[1].jointtype = 17;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] =
                                                                                                _ij1[0];
                                                                                            vinfos[1].indices[1] =
                                                                                                _ij1[1];
                                                                                            vinfos[1].maxsolutions =
                                                                                                _nj1;
                                                                                            vinfos[2].jointtype = 17;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] =
                                                                                                _ij2[0];
                                                                                            vinfos[2].indices[1] =
                                                                                                _ij2[1];
                                                                                            vinfos[2].maxsolutions =
                                                                                                _nj2;
                                                                                            vinfos[3].jointtype = 17;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] =
                                                                                                _ij3[0];
                                                                                            vinfos[3].indices[1] =
                                                                                                _ij3[1];
                                                                                            vinfos[3].maxsolutions =
                                                                                                _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] =
                                                                                                _ij4[0];
                                                                                            vinfos[4].indices[1] =
                                                                                                _ij4[1];
                                                                                            vinfos[4].maxsolutions =
                                                                                                _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] =
                                                                                                _ij5[0];
                                                                                            vinfos[5].indices[1] =
                                                                                                _ij5[1];
                                                                                            vinfos[5].maxsolutions =
                                                                                                _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] =
                                                                                                _ij6[0];
                                                                                            vinfos[6].indices[1] =
                                                                                                _ij6[1];
                                                                                            vinfos[6].maxsolutions =
                                                                                                _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(
                                                                                                vinfos, vfree);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  {
                                                                                    IkReal j4array[1], cj4array[1],
                                                                                        sj4array[1];
                                                                                    bool j4valid[1] = { false };
                                                                                    _nj4 = 1;
                                                                                    CheckValue<IkReal> x396 =
                                                                                        IKPowWithIntegerCheck(gconst2,
                                                                                                              -1);
                                                                                    if (!x396.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x397 =
                                                                                        IKPowWithIntegerCheck(new_r11,
                                                                                                              -1);
                                                                                    if (!x397.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    if (IKabs((new_r10 * (x396.value))) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(((-1.0) * gconst2 *
                                                                                               (x397.value))) <
                                                                                            IKFAST_ATAN2_MAGTHRESH &&
                                                                                        IKabs(IKsqr((new_r10 *
                                                                                                     (x396.value))) +
                                                                                              IKsqr(((-1.0) * gconst2 *
                                                                                                     (x397.value))) -
                                                                                              1) <= IKFAST_SINCOS_THRESH)
                                                                                      continue;
                                                                                    j4array[0] = IKatan2(
                                                                                        (new_r10 * (x396.value)),
                                                                                        ((-1.0) * gconst2 *
                                                                                         (x397.value)));
                                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                                    if (j4array[0] > IKPI)
                                                                                    {
                                                                                      j4array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j4array[0] < -IKPI)
                                                                                    {
                                                                                      j4array[0] += IK2PI;
                                                                                    }
                                                                                    j4valid[0] = true;
                                                                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                    {
                                                                                      if (!j4valid[ij4])
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      _ij4[0] = ij4;
                                                                                      _ij4[1] = -1;
                                                                                      for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                           ++iij4)
                                                                                      {
                                                                                        if (j4valid[iij4] &&
                                                                                            IKabs(cj4array[ij4] -
                                                                                                  cj4array[iij4]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj4array[ij4] -
                                                                                                  sj4array[iij4]) <
                                                                                                IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                          j4valid[iij4] = false;
                                                                                          _ij4[1] = iij4;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j4 = j4array[ij4];
                                                                                      cj4 = cj4array[ij4];
                                                                                      sj4 = sj4array[ij4];
                                                                                      {
                                                                                        IkReal evalcond[8];
                                                                                        IkReal x398 = IKsin(j4);
                                                                                        IkReal x399 = IKcos(j4);
                                                                                        IkReal x400 = (gconst2 * x399);
                                                                                        IkReal x401 = (gconst2 * x398);
                                                                                        evalcond[0] = (new_r11 * x398);
                                                                                        evalcond[1] = (new_r10 * x399);
                                                                                        evalcond[2] = ((-1.0) * x401);
                                                                                        evalcond[3] = ((-1.0) * x400);
                                                                                        evalcond[4] = (x400 + new_r11);
                                                                                        evalcond[5] =
                                                                                            (((new_r11 * x399)) +
                                                                                             gconst2);
                                                                                        evalcond[6] =
                                                                                            (new_r10 +
                                                                                             (((-1.0) * x401)));
                                                                                        evalcond[7] =
                                                                                            ((((-1.0) * gconst2)) +
                                                                                             ((new_r10 * x398)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[4]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[5]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[6]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[7]) >
                                                                                                IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 17;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 17;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 17;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 17;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j4array[1], cj4array[1],
                                                                                    sj4array[1];
                                                                                bool j4valid[1] = { false };
                                                                                _nj4 = 1;
                                                                                CheckValue<IkReal> x402 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(new_r10),
                                                                                        IkReal(((-1.0) * new_r11)),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x402.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                CheckValue<IkReal> x403 =
                                                                                    IKPowWithIntegerCheck(
                                                                                        IKsign(gconst2), -1);
                                                                                if (!x403.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                j4array[0] =
                                                                                    ((-1.5707963267949) + (x402.value) +
                                                                                     (((1.5707963267949) *
                                                                                       (x403.value))));
                                                                                sj4array[0] = IKsin(j4array[0]);
                                                                                cj4array[0] = IKcos(j4array[0]);
                                                                                if (j4array[0] > IKPI)
                                                                                {
                                                                                  j4array[0] -= IK2PI;
                                                                                }
                                                                                else if (j4array[0] < -IKPI)
                                                                                {
                                                                                  j4array[0] += IK2PI;
                                                                                }
                                                                                j4valid[0] = true;
                                                                                for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                {
                                                                                  if (!j4valid[ij4])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij4[0] = ij4;
                                                                                  _ij4[1] = -1;
                                                                                  for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                       ++iij4)
                                                                                  {
                                                                                    if (j4valid[iij4] &&
                                                                                        IKabs(cj4array[ij4] -
                                                                                              cj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj4array[ij4] -
                                                                                              sj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j4valid[iij4] = false;
                                                                                      _ij4[1] = iij4;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j4 = j4array[ij4];
                                                                                  cj4 = cj4array[ij4];
                                                                                  sj4 = sj4array[ij4];
                                                                                  {
                                                                                    IkReal evalcond[8];
                                                                                    IkReal x404 = IKsin(j4);
                                                                                    IkReal x405 = IKcos(j4);
                                                                                    IkReal x406 = (gconst2 * x405);
                                                                                    IkReal x407 = (gconst2 * x404);
                                                                                    evalcond[0] = (new_r11 * x404);
                                                                                    evalcond[1] = (new_r10 * x405);
                                                                                    evalcond[2] = ((-1.0) * x407);
                                                                                    evalcond[3] = ((-1.0) * x406);
                                                                                    evalcond[4] = (x406 + new_r11);
                                                                                    evalcond[5] =
                                                                                        (gconst2 + ((new_r11 * x405)));
                                                                                    evalcond[6] =
                                                                                        (new_r10 + (((-1.0) * x407)));
                                                                                    evalcond[7] =
                                                                                        ((((-1.0) * gconst2)) +
                                                                                         ((new_r10 * x404)));
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[6]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[7]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement)
                                                                      {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                          evalcond[0] = IKabs(new_r01);
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                          {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j4eval[1];
                                                                              CheckValue<IkReal> x409 =
                                                                                  IKatan2WithCheck(
                                                                                      IkReal(0), IkReal(new_r11),
                                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x409.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal x408 = ((-1.0) * (x409.value));
                                                                              sj5 = 1.0;
                                                                              cj5 = 0;
                                                                              j5 = 1.5707963267949;
                                                                              sj6 = gconst1;
                                                                              cj6 = gconst2;
                                                                              j6 = x408;
                                                                              new_r01 = 0;
                                                                              IkReal gconst0 = x408;
                                                                              IkReal gconst1 = 0;
                                                                              IkReal x410 = new_r11 * new_r11;
                                                                              if (IKabs(x410) == 0)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal gconst2 =
                                                                                  (new_r11 * (pow(x410, -0.5)));
                                                                              j4eval[0] =
                                                                                  ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                              if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                              {
                                                                                {
                                                                                  IkReal j4eval[1];
                                                                                  CheckValue<IkReal> x412 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(0), IkReal(new_r11),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x412.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal x411 = ((-1.0) * (x412.value));
                                                                                  sj5 = 1.0;
                                                                                  cj5 = 0;
                                                                                  j5 = 1.5707963267949;
                                                                                  sj6 = gconst1;
                                                                                  cj6 = gconst2;
                                                                                  j6 = x411;
                                                                                  new_r01 = 0;
                                                                                  IkReal gconst0 = x411;
                                                                                  IkReal gconst1 = 0;
                                                                                  IkReal x413 = new_r11 * new_r11;
                                                                                  if (IKabs(x413) == 0)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal gconst2 =
                                                                                      (new_r11 * (pow(x413, -0.5)));
                                                                                  j4eval[0] = ((IKabs(new_r11)) +
                                                                                               (IKabs(new_r10)));
                                                                                  if (IKabs(j4eval[0]) <
                                                                                      0.0000010000000000)
                                                                                  {
                                                                                    {
                                                                                      IkReal j4eval[1];
                                                                                      CheckValue<IkReal> x415 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal(0),
                                                                                              IkReal(new_r11),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x415.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal x414 =
                                                                                          ((-1.0) * (x415.value));
                                                                                      sj5 = 1.0;
                                                                                      cj5 = 0;
                                                                                      j5 = 1.5707963267949;
                                                                                      sj6 = gconst1;
                                                                                      cj6 = gconst2;
                                                                                      j6 = x414;
                                                                                      new_r01 = 0;
                                                                                      IkReal gconst0 = x414;
                                                                                      IkReal gconst1 = 0;
                                                                                      IkReal x416 = new_r11 * new_r11;
                                                                                      if (IKabs(x416) == 0)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal gconst2 =
                                                                                          (new_r11 * (pow(x416, -0.5)));
                                                                                      j4eval[0] = new_r11;
                                                                                      if (IKabs(j4eval[0]) <
                                                                                          0.0000010000000000)
                                                                                      {
                                                                                        continue;  // 3 cases reached
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        {
                                                                                          IkReal j4array[1],
                                                                                              cj4array[1], sj4array[1];
                                                                                          bool j4valid[1] = { false };
                                                                                          _nj4 = 1;
                                                                                          CheckValue<IkReal> x417 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  gconst2, -1);
                                                                                          if (!x417.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          CheckValue<IkReal> x418 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  new_r11, -1);
                                                                                          if (!x418.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          if (IKabs((new_r10 *
                                                                                                     (x417.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(((-1.0) * gconst2 *
                                                                                                     (x418.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(
                                                                                                  IKsqr((new_r10 *
                                                                                                         (x417.value))) +
                                                                                                  IKsqr((
                                                                                                      (-1.0) * gconst2 *
                                                                                                      (x418.value))) -
                                                                                                  1) <=
                                                                                                  IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                          j4array[0] = IKatan2(
                                                                                              (new_r10 * (x417.value)),
                                                                                              ((-1.0) * gconst2 *
                                                                                               (x418.value)));
                                                                                          sj4array[0] =
                                                                                              IKsin(j4array[0]);
                                                                                          cj4array[0] =
                                                                                              IKcos(j4array[0]);
                                                                                          if (j4array[0] > IKPI)
                                                                                          {
                                                                                            j4array[0] -= IK2PI;
                                                                                          }
                                                                                          else if (j4array[0] < -IKPI)
                                                                                          {
                                                                                            j4array[0] += IK2PI;
                                                                                          }
                                                                                          j4valid[0] = true;
                                                                                          for (int ij4 = 0; ij4 < 1;
                                                                                               ++ij4)
                                                                                          {
                                                                                            if (!j4valid[ij4])
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            _ij4[0] = ij4;
                                                                                            _ij4[1] = -1;
                                                                                            for (int iij4 = ij4 + 1;
                                                                                                 iij4 < 1; ++iij4)
                                                                                            {
                                                                                              if (j4valid[iij4] &&
                                                                                                  IKabs(cj4array[ij4] -
                                                                                                        cj4array[iij4]) <
                                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                                  IKabs(sj4array[ij4] -
                                                                                                        sj4array[iij4]) <
                                                                                                      IKFAST_SOLUTION_THRESH)
                                                                                              {
                                                                                                j4valid[iij4] = false;
                                                                                                _ij4[1] = iij4;
                                                                                                break;
                                                                                              }
                                                                                            }
                                                                                            j4 = j4array[ij4];
                                                                                            cj4 = cj4array[ij4];
                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                              IkReal evalcond[8];
                                                                                              IkReal x419 = IKsin(j4);
                                                                                              IkReal x420 = IKcos(j4);
                                                                                              IkReal x421 =
                                                                                                  (gconst2 * x420);
                                                                                              IkReal x422 =
                                                                                                  (gconst2 * x419);
                                                                                              evalcond[0] =
                                                                                                  (new_r11 * x419);
                                                                                              evalcond[1] =
                                                                                                  ((-1.0) * x422);
                                                                                              evalcond[2] =
                                                                                                  (x421 + new_r11);
                                                                                              evalcond[3] =
                                                                                                  (gconst2 +
                                                                                                   ((new_r11 * x420)));
                                                                                              evalcond[4] =
                                                                                                  ((((-1.0) * x422)) +
                                                                                                   new_r10);
                                                                                              evalcond[5] =
                                                                                                  ((((-1.0) * x421)) +
                                                                                                   new_r00);
                                                                                              evalcond[6] =
                                                                                                  ((((-1.0) * new_r00 *
                                                                                                     x419)) +
                                                                                                   ((new_r10 * x420)));
                                                                                              evalcond[7] =
                                                                                                  ((((-1.0) * gconst2)) +
                                                                                                   ((new_r10 * x419)) +
                                                                                                   ((new_r00 * x420)));
                                                                                              if (IKabs(evalcond[0]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[1]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[2]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[3]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[4]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[5]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[6]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[7]) >
                                                                                                      IKFAST_EVALCOND_THRESH)
                                                                                              {
                                                                                                continue;
                                                                                              }
                                                                                            }

                                                                                            {
                                                                                              std::vector<
                                                                                                  IkSingleDOFSolutionBase<
                                                                                                      IkReal> >
                                                                                                  vinfos(7);
                                                                                              vinfos[0].jointtype = 17;
                                                                                              vinfos[0].foffset = j0;
                                                                                              vinfos[0].indices[0] =
                                                                                                  _ij0[0];
                                                                                              vinfos[0].indices[1] =
                                                                                                  _ij0[1];
                                                                                              vinfos[0].maxsolutions =
                                                                                                  _nj0;
                                                                                              vinfos[1].jointtype = 17;
                                                                                              vinfos[1].foffset = j1;
                                                                                              vinfos[1].indices[0] =
                                                                                                  _ij1[0];
                                                                                              vinfos[1].indices[1] =
                                                                                                  _ij1[1];
                                                                                              vinfos[1].maxsolutions =
                                                                                                  _nj1;
                                                                                              vinfos[2].jointtype = 17;
                                                                                              vinfos[2].foffset = j2;
                                                                                              vinfos[2].indices[0] =
                                                                                                  _ij2[0];
                                                                                              vinfos[2].indices[1] =
                                                                                                  _ij2[1];
                                                                                              vinfos[2].maxsolutions =
                                                                                                  _nj2;
                                                                                              vinfos[3].jointtype = 17;
                                                                                              vinfos[3].foffset = j3;
                                                                                              vinfos[3].indices[0] =
                                                                                                  _ij3[0];
                                                                                              vinfos[3].indices[1] =
                                                                                                  _ij3[1];
                                                                                              vinfos[3].maxsolutions =
                                                                                                  _nj3;
                                                                                              vinfos[4].jointtype = 1;
                                                                                              vinfos[4].foffset = j4;
                                                                                              vinfos[4].indices[0] =
                                                                                                  _ij4[0];
                                                                                              vinfos[4].indices[1] =
                                                                                                  _ij4[1];
                                                                                              vinfos[4].maxsolutions =
                                                                                                  _nj4;
                                                                                              vinfos[5].jointtype = 1;
                                                                                              vinfos[5].foffset = j5;
                                                                                              vinfos[5].indices[0] =
                                                                                                  _ij5[0];
                                                                                              vinfos[5].indices[1] =
                                                                                                  _ij5[1];
                                                                                              vinfos[5].maxsolutions =
                                                                                                  _nj5;
                                                                                              vinfos[6].jointtype = 1;
                                                                                              vinfos[6].foffset = j6;
                                                                                              vinfos[6].indices[0] =
                                                                                                  _ij6[0];
                                                                                              vinfos[6].indices[1] =
                                                                                                  _ij6[1];
                                                                                              vinfos[6].maxsolutions =
                                                                                                  _nj6;
                                                                                              std::vector<int> vfree(0);
                                                                                              solutions.AddSolution(
                                                                                                  vinfos, vfree);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    {
                                                                                      IkReal j4array[1], cj4array[1],
                                                                                          sj4array[1];
                                                                                      bool j4valid[1] = { false };
                                                                                      _nj4 = 1;
                                                                                      CheckValue<IkReal> x423 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal(new_r10),
                                                                                              IkReal(((-1.0) * new_r11)),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x423.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      CheckValue<IkReal> x424 =
                                                                                          IKPowWithIntegerCheck(
                                                                                              IKsign(gconst2), -1);
                                                                                      if (!x424.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      j4array[0] =
                                                                                          ((-1.5707963267949) +
                                                                                           (x423.value) +
                                                                                           (((1.5707963267949) *
                                                                                             (x424.value))));
                                                                                      sj4array[0] = IKsin(j4array[0]);
                                                                                      cj4array[0] = IKcos(j4array[0]);
                                                                                      if (j4array[0] > IKPI)
                                                                                      {
                                                                                        j4array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j4array[0] < -IKPI)
                                                                                      {
                                                                                        j4array[0] += IK2PI;
                                                                                      }
                                                                                      j4valid[0] = true;
                                                                                      for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                      {
                                                                                        if (!j4valid[ij4])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij4[0] = ij4;
                                                                                        _ij4[1] = -1;
                                                                                        for (int iij4 = ij4 + 1;
                                                                                             iij4 < 1; ++iij4)
                                                                                        {
                                                                                          if (j4valid[iij4] &&
                                                                                              IKabs(cj4array[ij4] -
                                                                                                    cj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj4array[ij4] -
                                                                                                    sj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j4valid[iij4] = false;
                                                                                            _ij4[1] = iij4;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j4 = j4array[ij4];
                                                                                        cj4 = cj4array[ij4];
                                                                                        sj4 = sj4array[ij4];
                                                                                        {
                                                                                          IkReal evalcond[8];
                                                                                          IkReal x425 = IKsin(j4);
                                                                                          IkReal x426 = IKcos(j4);
                                                                                          IkReal x427 =
                                                                                              (gconst2 * x426);
                                                                                          IkReal x428 =
                                                                                              (gconst2 * x425);
                                                                                          evalcond[0] =
                                                                                              (new_r11 * x425);
                                                                                          evalcond[1] = ((-1.0) * x428);
                                                                                          evalcond[2] =
                                                                                              (x427 + new_r11);
                                                                                          evalcond[3] =
                                                                                              (gconst2 +
                                                                                               ((new_r11 * x426)));
                                                                                          evalcond[4] =
                                                                                              ((((-1.0) * x428)) +
                                                                                               new_r10);
                                                                                          evalcond[5] =
                                                                                              ((((-1.0) * x427)) +
                                                                                               new_r00);
                                                                                          evalcond[6] =
                                                                                              ((((-1.0) * new_r00 *
                                                                                                 x425)) +
                                                                                               ((new_r10 * x426)));
                                                                                          evalcond[7] =
                                                                                              ((((-1.0) * gconst2)) +
                                                                                               ((new_r10 * x425)) +
                                                                                               ((new_r00 * x426)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[6]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[7]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j0;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij0[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij0[1];
                                                                                          vinfos[0].maxsolutions = _nj0;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j1;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij1[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij1[1];
                                                                                          vinfos[1].maxsolutions = _nj1;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j2;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[2].maxsolutions = _nj2;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j3;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[3].maxsolutions = _nj3;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j4;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[4].maxsolutions = _nj4;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j5;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[5].maxsolutions = _nj5;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j6;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij6[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij6[1];
                                                                                          vinfos[6].maxsolutions = _nj6;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                {
                                                                                  IkReal j4array[1], cj4array[1],
                                                                                      sj4array[1];
                                                                                  bool j4valid[1] = { false };
                                                                                  _nj4 = 1;
                                                                                  CheckValue<IkReal> x429 =
                                                                                      IKPowWithIntegerCheck(
                                                                                          IKsign(gconst2), -1);
                                                                                  if (!x429.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  CheckValue<IkReal> x430 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(new_r10),
                                                                                          IkReal(new_r00),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x430.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  j4array[0] = ((-1.5707963267949) +
                                                                                                (((1.5707963267949) *
                                                                                                  (x429.value))) +
                                                                                                (x430.value));
                                                                                  sj4array[0] = IKsin(j4array[0]);
                                                                                  cj4array[0] = IKcos(j4array[0]);
                                                                                  if (j4array[0] > IKPI)
                                                                                  {
                                                                                    j4array[0] -= IK2PI;
                                                                                  }
                                                                                  else if (j4array[0] < -IKPI)
                                                                                  {
                                                                                    j4array[0] += IK2PI;
                                                                                  }
                                                                                  j4valid[0] = true;
                                                                                  for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                  {
                                                                                    if (!j4valid[ij4])
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    _ij4[0] = ij4;
                                                                                    _ij4[1] = -1;
                                                                                    for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                         ++iij4)
                                                                                    {
                                                                                      if (j4valid[iij4] &&
                                                                                          IKabs(cj4array[ij4] -
                                                                                                cj4array[iij4]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj4array[ij4] -
                                                                                                sj4array[iij4]) <
                                                                                              IKFAST_SOLUTION_THRESH)
                                                                                      {
                                                                                        j4valid[iij4] = false;
                                                                                        _ij4[1] = iij4;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j4 = j4array[ij4];
                                                                                    cj4 = cj4array[ij4];
                                                                                    sj4 = sj4array[ij4];
                                                                                    {
                                                                                      IkReal evalcond[8];
                                                                                      IkReal x431 = IKsin(j4);
                                                                                      IkReal x432 = IKcos(j4);
                                                                                      IkReal x433 = (gconst2 * x432);
                                                                                      IkReal x434 = (gconst2 * x431);
                                                                                      evalcond[0] = (new_r11 * x431);
                                                                                      evalcond[1] = ((-1.0) * x434);
                                                                                      evalcond[2] = (x433 + new_r11);
                                                                                      evalcond[3] =
                                                                                          (gconst2 + ((new_r11 * x432)));
                                                                                      evalcond[4] =
                                                                                          ((((-1.0) * x434)) + new_r10);
                                                                                      evalcond[5] =
                                                                                          ((((-1.0) * x433)) + new_r00);
                                                                                      evalcond[6] =
                                                                                          (((new_r10 * x432)) +
                                                                                           (((-1.0) * new_r00 * x431)));
                                                                                      evalcond[7] =
                                                                                          (((new_r00 * x432)) +
                                                                                           (((-1.0) * gconst2)) +
                                                                                           ((new_r10 * x431)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[4]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[5]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[6]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[7]) >
                                                                                              IKFAST_EVALCOND_THRESH)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 17;
                                                                                      vinfos[0].foffset = j0;
                                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                                      vinfos[0].maxsolutions = _nj0;
                                                                                      vinfos[1].jointtype = 17;
                                                                                      vinfos[1].foffset = j1;
                                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                                      vinfos[1].maxsolutions = _nj1;
                                                                                      vinfos[2].jointtype = 17;
                                                                                      vinfos[2].foffset = j2;
                                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                                      vinfos[2].maxsolutions = _nj2;
                                                                                      vinfos[3].jointtype = 17;
                                                                                      vinfos[3].foffset = j3;
                                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                                      vinfos[3].maxsolutions = _nj3;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j4;
                                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                                      vinfos[4].maxsolutions = _nj4;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j5;
                                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                                      vinfos[5].maxsolutions = _nj5;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j6;
                                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                                      vinfos[6].maxsolutions = _nj6;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                          bool bgotonextstatement = true;
                                                                          do
                                                                          {
                                                                            if (1)
                                                                            {
                                                                              bgotonextstatement = false;
                                                                              continue;  // branch miss [j4]
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement) {}
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              {
                                                                IkReal j4array[1], cj4array[1], sj4array[1];
                                                                bool j4valid[1] = { false };
                                                                _nj4 = 1;
                                                                IkReal x435 = ((1.0) * new_r11);
                                                                CheckValue<IkReal> x436 = IKatan2WithCheck(
                                                                    IkReal(((((-1.0) * new_r01 * x435)) +
                                                                            ((gconst1 * gconst2)))),
                                                                    IkReal(((new_r11 * new_r11) +
                                                                            (((-1.0) * (gconst1 * gconst1))))),
                                                                    IKFAST_ATAN2_MAGTHRESH);
                                                                if (!x436.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                CheckValue<IkReal> x437 = IKPowWithIntegerCheck(
                                                                    IKsign(((((-1.0) * gconst2 * x435)) +
                                                                            ((gconst1 * new_r01)))),
                                                                    -1);
                                                                if (!x437.valid)
                                                                {
                                                                  continue;
                                                                }
                                                                j4array[0] = ((-1.5707963267949) + (x436.value) +
                                                                              (((1.5707963267949) * (x437.value))));
                                                                sj4array[0] = IKsin(j4array[0]);
                                                                cj4array[0] = IKcos(j4array[0]);
                                                                if (j4array[0] > IKPI)
                                                                {
                                                                  j4array[0] -= IK2PI;
                                                                }
                                                                else if (j4array[0] < -IKPI)
                                                                {
                                                                  j4array[0] += IK2PI;
                                                                }
                                                                j4valid[0] = true;
                                                                for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                {
                                                                  if (!j4valid[ij4])
                                                                  {
                                                                    continue;
                                                                  }
                                                                  _ij4[0] = ij4;
                                                                  _ij4[1] = -1;
                                                                  for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                  {
                                                                    if (j4valid[iij4] &&
                                                                        IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                            IKFAST_SOLUTION_THRESH &&
                                                                        IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                            IKFAST_SOLUTION_THRESH)
                                                                    {
                                                                      j4valid[iij4] = false;
                                                                      _ij4[1] = iij4;
                                                                      break;
                                                                    }
                                                                  }
                                                                  j4 = j4array[ij4];
                                                                  cj4 = cj4array[ij4];
                                                                  sj4 = sj4array[ij4];
                                                                  {
                                                                    IkReal evalcond[8];
                                                                    IkReal x438 = IKsin(j4);
                                                                    IkReal x439 = IKcos(j4);
                                                                    IkReal x440 = (gconst1 * x439);
                                                                    IkReal x441 = ((1.0) * x438);
                                                                    IkReal x442 = (gconst2 * x439);
                                                                    IkReal x443 = (gconst2 * x441);
                                                                    evalcond[0] = (((new_r01 * x439)) + gconst1 +
                                                                                   ((new_r11 * x438)));
                                                                    evalcond[1] = (((gconst1 * x438)) + x442 + new_r11);
                                                                    evalcond[2] = ((((-1.0) * new_r00 * x441)) +
                                                                                   gconst1 + ((new_r10 * x439)));
                                                                    evalcond[3] = ((((-1.0) * new_r01 * x441)) +
                                                                                   gconst2 + ((new_r11 * x439)));
                                                                    evalcond[4] = ((((-1.0) * x443)) + x440 + new_r01);
                                                                    evalcond[5] = ((((-1.0) * x443)) + x440 + new_r10);
                                                                    evalcond[6] =
                                                                        (((new_r00 * x439)) + (((-1.0) * gconst2)) +
                                                                         ((new_r10 * x438)));
                                                                    evalcond[7] = ((((-1.0) * x442)) + new_r00 +
                                                                                   (((-1.0) * gconst1 * x441)));
                                                                    if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                        IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                    {
                                                                      continue;
                                                                    }
                                                                  }

                                                                  {
                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                        7);
                                                                    vinfos[0].jointtype = 17;
                                                                    vinfos[0].foffset = j0;
                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                    vinfos[0].maxsolutions = _nj0;
                                                                    vinfos[1].jointtype = 17;
                                                                    vinfos[1].foffset = j1;
                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                    vinfos[1].maxsolutions = _nj1;
                                                                    vinfos[2].jointtype = 17;
                                                                    vinfos[2].foffset = j2;
                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                    vinfos[2].maxsolutions = _nj2;
                                                                    vinfos[3].jointtype = 17;
                                                                    vinfos[3].foffset = j3;
                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                    vinfos[3].maxsolutions = _nj3;
                                                                    vinfos[4].jointtype = 1;
                                                                    vinfos[4].foffset = j4;
                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                    vinfos[4].maxsolutions = _nj4;
                                                                    vinfos[5].jointtype = 1;
                                                                    vinfos[5].foffset = j5;
                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                    vinfos[5].maxsolutions = _nj5;
                                                                    vinfos[6].jointtype = 1;
                                                                    vinfos[6].foffset = j6;
                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                    vinfos[6].maxsolutions = _nj6;
                                                                    std::vector<int> vfree(0);
                                                                    solutions.AddSolution(vinfos, vfree);
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        else
                                                        {
                                                          {
                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                            bool j4valid[1] = { false };
                                                            _nj4 = 1;
                                                            IkReal x444 = ((1.0) * new_r11);
                                                            CheckValue<IkReal> x445 = IKatan2WithCheck(
                                                                IkReal((((gconst2 * new_r01)) +
                                                                        (((-1.0) * gconst1 * x444)))),
                                                                IkReal(((((-1.0) * gconst1 * new_r01)) +
                                                                        (((-1.0) * gconst2 * x444)))),
                                                                IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x445.valid)
                                                            {
                                                              continue;
                                                            }
                                                            CheckValue<IkReal> x446 = IKPowWithIntegerCheck(
                                                                IKsign(((new_r01 * new_r01) + (new_r11 * new_r11))), -1);
                                                            if (!x446.valid)
                                                            {
                                                              continue;
                                                            }
                                                            j4array[0] = ((-1.5707963267949) + (x445.value) +
                                                                          (((1.5707963267949) * (x446.value))));
                                                            sj4array[0] = IKsin(j4array[0]);
                                                            cj4array[0] = IKcos(j4array[0]);
                                                            if (j4array[0] > IKPI)
                                                            {
                                                              j4array[0] -= IK2PI;
                                                            }
                                                            else if (j4array[0] < -IKPI)
                                                            {
                                                              j4array[0] += IK2PI;
                                                            }
                                                            j4valid[0] = true;
                                                            for (int ij4 = 0; ij4 < 1; ++ij4)
                                                            {
                                                              if (!j4valid[ij4])
                                                              {
                                                                continue;
                                                              }
                                                              _ij4[0] = ij4;
                                                              _ij4[1] = -1;
                                                              for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                              {
                                                                if (j4valid[iij4] &&
                                                                    IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j4valid[iij4] = false;
                                                                  _ij4[1] = iij4;
                                                                  break;
                                                                }
                                                              }
                                                              j4 = j4array[ij4];
                                                              cj4 = cj4array[ij4];
                                                              sj4 = sj4array[ij4];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x447 = IKsin(j4);
                                                                IkReal x448 = IKcos(j4);
                                                                IkReal x449 = (gconst1 * x448);
                                                                IkReal x450 = ((1.0) * x447);
                                                                IkReal x451 = (gconst2 * x448);
                                                                IkReal x452 = (gconst2 * x450);
                                                                evalcond[0] =
                                                                    (((new_r01 * x448)) + gconst1 + ((new_r11 * x447)));
                                                                evalcond[1] = (((gconst1 * x447)) + x451 + new_r11);
                                                                evalcond[2] = (gconst1 + (((-1.0) * new_r00 * x450)) +
                                                                               ((new_r10 * x448)));
                                                                evalcond[3] = (gconst2 + (((-1.0) * new_r01 * x450)) +
                                                                               ((new_r11 * x448)));
                                                                evalcond[4] = ((((-1.0) * x452)) + x449 + new_r01);
                                                                evalcond[5] = ((((-1.0) * x452)) + x449 + new_r10);
                                                                evalcond[6] =
                                                                    (((new_r00 * x448)) + (((-1.0) * gconst2)) +
                                                                     ((new_r10 * x447)));
                                                                evalcond[7] = ((((-1.0) * x451)) +
                                                                               (((-1.0) * gconst1 * x450)) + new_r00);
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                    else
                                                    {
                                                      {
                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                        bool j4valid[1] = { false };
                                                        _nj4 = 1;
                                                        IkReal x453 = ((1.0) * gconst1);
                                                        CheckValue<IkReal> x454 =
                                                            IKatan2WithCheck(IkReal(((((-1.0) * new_r10 * x453)) +
                                                                                     ((gconst1 * new_r01)))),
                                                                             IkReal(((((-1.0) * new_r11 * x453)) +
                                                                                     (((-1.0) * new_r00 * x453)))),
                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                        if (!x454.valid)
                                                        {
                                                          continue;
                                                        }
                                                        CheckValue<IkReal> x455 = IKPowWithIntegerCheck(
                                                            IKsign((((new_r10 * new_r11)) + ((new_r00 * new_r01)))), -1);
                                                        if (!x455.valid)
                                                        {
                                                          continue;
                                                        }
                                                        j4array[0] = ((-1.5707963267949) + (x454.value) +
                                                                      (((1.5707963267949) * (x455.value))));
                                                        sj4array[0] = IKsin(j4array[0]);
                                                        cj4array[0] = IKcos(j4array[0]);
                                                        if (j4array[0] > IKPI)
                                                        {
                                                          j4array[0] -= IK2PI;
                                                        }
                                                        else if (j4array[0] < -IKPI)
                                                        {
                                                          j4array[0] += IK2PI;
                                                        }
                                                        j4valid[0] = true;
                                                        for (int ij4 = 0; ij4 < 1; ++ij4)
                                                        {
                                                          if (!j4valid[ij4])
                                                          {
                                                            continue;
                                                          }
                                                          _ij4[0] = ij4;
                                                          _ij4[1] = -1;
                                                          for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                          {
                                                            if (j4valid[iij4] &&
                                                                IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                    IKFAST_SOLUTION_THRESH &&
                                                                IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                    IKFAST_SOLUTION_THRESH)
                                                            {
                                                              j4valid[iij4] = false;
                                                              _ij4[1] = iij4;
                                                              break;
                                                            }
                                                          }
                                                          j4 = j4array[ij4];
                                                          cj4 = cj4array[ij4];
                                                          sj4 = sj4array[ij4];
                                                          {
                                                            IkReal evalcond[8];
                                                            IkReal x456 = IKsin(j4);
                                                            IkReal x457 = IKcos(j4);
                                                            IkReal x458 = (gconst1 * x457);
                                                            IkReal x459 = ((1.0) * x456);
                                                            IkReal x460 = (gconst2 * x457);
                                                            IkReal x461 = (gconst2 * x459);
                                                            evalcond[0] =
                                                                (((new_r11 * x456)) + ((new_r01 * x457)) + gconst1);
                                                            evalcond[1] = (((gconst1 * x456)) + x460 + new_r11);
                                                            evalcond[2] = (((new_r10 * x457)) + gconst1 +
                                                                           (((-1.0) * new_r00 * x459)));
                                                            evalcond[3] = (((new_r11 * x457)) + gconst2 +
                                                                           (((-1.0) * new_r01 * x459)));
                                                            evalcond[4] = ((((-1.0) * x461)) + x458 + new_r01);
                                                            evalcond[5] = ((((-1.0) * x461)) + x458 + new_r10);
                                                            evalcond[6] = (((new_r10 * x456)) + ((new_r00 * x457)) +
                                                                           (((-1.0) * gconst2)));
                                                            evalcond[7] = ((((-1.0) * x460)) +
                                                                           (((-1.0) * gconst1 * x459)) + new_r00);
                                                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                            {
                                                              continue;
                                                            }
                                                          }

                                                          {
                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                            vinfos[0].jointtype = 17;
                                                            vinfos[0].foffset = j0;
                                                            vinfos[0].indices[0] = _ij0[0];
                                                            vinfos[0].indices[1] = _ij0[1];
                                                            vinfos[0].maxsolutions = _nj0;
                                                            vinfos[1].jointtype = 17;
                                                            vinfos[1].foffset = j1;
                                                            vinfos[1].indices[0] = _ij1[0];
                                                            vinfos[1].indices[1] = _ij1[1];
                                                            vinfos[1].maxsolutions = _nj1;
                                                            vinfos[2].jointtype = 17;
                                                            vinfos[2].foffset = j2;
                                                            vinfos[2].indices[0] = _ij2[0];
                                                            vinfos[2].indices[1] = _ij2[1];
                                                            vinfos[2].maxsolutions = _nj2;
                                                            vinfos[3].jointtype = 17;
                                                            vinfos[3].foffset = j3;
                                                            vinfos[3].indices[0] = _ij3[0];
                                                            vinfos[3].indices[1] = _ij3[1];
                                                            vinfos[3].maxsolutions = _nj3;
                                                            vinfos[4].jointtype = 1;
                                                            vinfos[4].foffset = j4;
                                                            vinfos[4].indices[0] = _ij4[0];
                                                            vinfos[4].indices[1] = _ij4[1];
                                                            vinfos[4].maxsolutions = _nj4;
                                                            vinfos[5].jointtype = 1;
                                                            vinfos[5].foffset = j5;
                                                            vinfos[5].indices[0] = _ij5[0];
                                                            vinfos[5].indices[1] = _ij5[1];
                                                            vinfos[5].maxsolutions = _nj5;
                                                            vinfos[6].jointtype = 1;
                                                            vinfos[6].foffset = j6;
                                                            vinfos[6].indices[0] = _ij6[0];
                                                            vinfos[6].indices[1] = _ij6[1];
                                                            vinfos[6].maxsolutions = _nj6;
                                                            std::vector<int> vfree(0);
                                                            solutions.AddSolution(vinfos, vfree);
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              } while (0);
                                              if (bgotonextstatement)
                                              {
                                                bool bgotonextstatement = true;
                                                do
                                                {
                                                  IkReal x463 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                  if (IKabs(x463) == 0)
                                                  {
                                                    continue;
                                                  }
                                                  IkReal x462 = pow(x463, -0.5);
                                                  CheckValue<IkReal> x464 = IKatan2WithCheck(
                                                      IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x464.valid)
                                                  {
                                                    continue;
                                                  }
                                                  IkReal gconst3 = ((3.14159265358979) + (((-1.0) * (x464.value))));
                                                  IkReal gconst4 = ((1.0) * new_r01 * x462);
                                                  IkReal gconst5 = ((-1.0) * new_r11 * x462);
                                                  CheckValue<IkReal> x465 = IKatan2WithCheck(
                                                      IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x465.valid)
                                                  {
                                                    continue;
                                                  }
                                                  evalcond[0] =
                                                      ((-3.14159265358979) +
                                                       (IKfmod(((3.14159265358979) +
                                                                (IKabs(((-3.14159265358979) + (x465.value) + j6)))),
                                                               6.28318530717959)));
                                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                  {
                                                    bgotonextstatement = false;
                                                    {
                                                      IkReal j4eval[3];
                                                      CheckValue<IkReal> x468 = IKatan2WithCheck(
                                                          IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                      if (!x468.valid)
                                                      {
                                                        continue;
                                                      }
                                                      IkReal x466 = ((1.0) * (x468.value));
                                                      IkReal x467 = x462;
                                                      sj5 = 1.0;
                                                      cj5 = 0;
                                                      j5 = 1.5707963267949;
                                                      sj6 = gconst4;
                                                      cj6 = gconst5;
                                                      j6 = ((3.14159265) + (((-1.0) * x466)));
                                                      IkReal gconst3 = ((3.14159265358979) + (((-1.0) * x466)));
                                                      IkReal gconst4 = ((1.0) * new_r01 * x467);
                                                      IkReal gconst5 = ((-1.0) * new_r11 * x467);
                                                      IkReal x469 = new_r01 * new_r01;
                                                      IkReal x470 = (((new_r10 * new_r11)) + ((new_r00 * new_r01)));
                                                      IkReal x471 = x462;
                                                      IkReal x472 = ((1.0) * new_r01 * x471);
                                                      j4eval[0] = x470;
                                                      j4eval[1] = IKsign(x470);
                                                      j4eval[2] =
                                                          ((IKabs((((x469 * x471)) + (((-1.0) * new_r10 * x472))))) +
                                                           (IKabs(((((-1.0) * new_r00 * x472)) +
                                                                   (((-1.0) * new_r11 * x472))))));
                                                      if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                          IKabs(j4eval[1]) < 0.0000010000000000 ||
                                                          IKabs(j4eval[2]) < 0.0000010000000000)
                                                      {
                                                        {
                                                          IkReal j4eval[2];
                                                          CheckValue<IkReal> x475 = IKatan2WithCheck(
                                                              IkReal(new_r01), IkReal(new_r11), IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x475.valid)
                                                          {
                                                            continue;
                                                          }
                                                          IkReal x473 = ((1.0) * (x475.value));
                                                          IkReal x474 = x462;
                                                          sj5 = 1.0;
                                                          cj5 = 0;
                                                          j5 = 1.5707963267949;
                                                          sj6 = gconst4;
                                                          cj6 = gconst5;
                                                          j6 = ((3.14159265) + (((-1.0) * x473)));
                                                          IkReal gconst3 = ((3.14159265358979) + (((-1.0) * x473)));
                                                          IkReal gconst4 = ((1.0) * new_r01 * x474);
                                                          IkReal gconst5 = ((-1.0) * new_r11 * x474);
                                                          IkReal x476 = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                          j4eval[0] = x476;
                                                          j4eval[1] = IKsign(x476);
                                                          if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                              IKabs(j4eval[1]) < 0.0000010000000000)
                                                          {
                                                            {
                                                              IkReal j4eval[1];
                                                              CheckValue<IkReal> x479 =
                                                                  IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11),
                                                                                   IKFAST_ATAN2_MAGTHRESH);
                                                              if (!x479.valid)
                                                              {
                                                                continue;
                                                              }
                                                              IkReal x477 = ((1.0) * (x479.value));
                                                              IkReal x478 = x462;
                                                              sj5 = 1.0;
                                                              cj5 = 0;
                                                              j5 = 1.5707963267949;
                                                              sj6 = gconst4;
                                                              cj6 = gconst5;
                                                              j6 = ((3.14159265) + (((-1.0) * x477)));
                                                              IkReal gconst3 = ((3.14159265358979) + (((-1.0) * x477)));
                                                              IkReal gconst4 = ((1.0) * new_r01 * x478);
                                                              IkReal gconst5 = ((-1.0) * new_r11 * x478);
                                                              IkReal x480 = new_r01 * new_r01;
                                                              IkReal x481 = new_r11 * new_r11;
                                                              IkReal x482 = ((1.0) * x480);
                                                              CheckValue<IkReal> x488 =
                                                                  IKPowWithIntegerCheck((x481 + x480), -1);
                                                              if (!x488.valid)
                                                              {
                                                                continue;
                                                              }
                                                              IkReal x483 = x488.value;
                                                              CheckValue<IkReal> x489 = IKPowWithIntegerCheck(
                                                                  ((((-1.0) * x482)) + (((-1.0) * x481))), -1);
                                                              if (!x489.valid)
                                                              {
                                                                continue;
                                                              }
                                                              IkReal x484 = x489.value;
                                                              IkReal x485 = ((1.0) * x484);
                                                              IkReal x486 = (new_r11 * x485);
                                                              IkReal x487 = (new_r01 * x485);
                                                              j4eval[0] = ((IKabs(((((-1.0) * new_r01 * x486)) +
                                                                                   (((-1.0) * x486 *
                                                                                     (new_r01 * new_r01 * new_r01))) +
                                                                                   (((-1.0) * new_r01 * x486 *
                                                                                     (new_r11 * new_r11)))))) +
                                                                           (IKabs((((x483 * (x481 * x481))) +
                                                                                   (((-1.0) * x482 * x483)) +
                                                                                   ((x480 * x481 * x483))))));
                                                              if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                              {
                                                                {
                                                                  IkReal evalcond[2];
                                                                  bool bgotonextstatement = true;
                                                                  do
                                                                  {
                                                                    evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r00)));
                                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                    {
                                                                      bgotonextstatement = false;
                                                                      {
                                                                        IkReal j4eval[1];
                                                                        CheckValue<IkReal> x491 =
                                                                            IKatan2WithCheck(IkReal(new_r01), IkReal(0),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x491.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        IkReal x490 = ((1.0) * (x491.value));
                                                                        sj5 = 1.0;
                                                                        cj5 = 0;
                                                                        j5 = 1.5707963267949;
                                                                        sj6 = gconst4;
                                                                        cj6 = gconst5;
                                                                        j6 = ((3.14159265) + (((-1.0) * x490)));
                                                                        new_r11 = 0;
                                                                        new_r00 = 0;
                                                                        IkReal gconst3 =
                                                                            ((3.14159265358979) + (((-1.0) * x490)));
                                                                        IkReal x492 = new_r01 * new_r01;
                                                                        if (IKabs(x492) == 0)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        IkReal gconst4 =
                                                                            ((1.0) * new_r01 * (pow(x492, -0.5)));
                                                                        IkReal gconst5 = 0;
                                                                        j4eval[0] = new_r01;
                                                                        if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j4eval[1];
                                                                            CheckValue<IkReal> x494 = IKatan2WithCheck(
                                                                                IkReal(new_r01), IkReal(0),
                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                            if (!x494.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal x493 = ((1.0) * (x494.value));
                                                                            sj5 = 1.0;
                                                                            cj5 = 0;
                                                                            j5 = 1.5707963267949;
                                                                            sj6 = gconst4;
                                                                            cj6 = gconst5;
                                                                            j6 = ((3.14159265) + (((-1.0) * x493)));
                                                                            new_r11 = 0;
                                                                            new_r00 = 0;
                                                                            IkReal gconst3 = ((3.14159265358979) +
                                                                                              (((-1.0) * x493)));
                                                                            IkReal x495 = new_r01 * new_r01;
                                                                            if (IKabs(x495) == 0)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            IkReal gconst4 =
                                                                                ((1.0) * new_r01 * (pow(x495, -0.5)));
                                                                            IkReal gconst5 = 0;
                                                                            j4eval[0] = new_r10;
                                                                            if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal j4array[2], cj4array[2],
                                                                                    sj4array[2];
                                                                                bool j4valid[2] = { false };
                                                                                _nj4 = 2;
                                                                                CheckValue<IkReal> x496 =
                                                                                    IKPowWithIntegerCheck(gconst4, -1);
                                                                                if (!x496.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                cj4array[0] =
                                                                                    ((-1.0) * new_r01 * (x496.value));
                                                                                if (cj4array[0] >=
                                                                                        -1 - IKFAST_SINCOS_THRESH &&
                                                                                    cj4array[0] <=
                                                                                        1 + IKFAST_SINCOS_THRESH)
                                                                                {
                                                                                  j4valid[0] = j4valid[1] = true;
                                                                                  j4array[0] = IKacos(cj4array[0]);
                                                                                  sj4array[0] = IKsin(j4array[0]);
                                                                                  cj4array[1] = cj4array[0];
                                                                                  j4array[1] = -j4array[0];
                                                                                  sj4array[1] = -sj4array[0];
                                                                                }
                                                                                else if (isnan(cj4array[0]))
                                                                                {
                                                                                  // probably any value will work
                                                                                  j4valid[0] = true;
                                                                                  cj4array[0] = 1;
                                                                                  sj4array[0] = 0;
                                                                                  j4array[0] = 0;
                                                                                }
                                                                                for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                {
                                                                                  if (!j4valid[ij4])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij4[0] = ij4;
                                                                                  _ij4[1] = -1;
                                                                                  for (int iij4 = ij4 + 1; iij4 < 2;
                                                                                       ++iij4)
                                                                                  {
                                                                                    if (j4valid[iij4] &&
                                                                                        IKabs(cj4array[ij4] -
                                                                                              cj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj4array[ij4] -
                                                                                              sj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j4valid[iij4] = false;
                                                                                      _ij4[1] = iij4;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j4 = j4array[ij4];
                                                                                  cj4 = cj4array[ij4];
                                                                                  sj4 = sj4array[ij4];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x497 = IKsin(j4);
                                                                                    IkReal x498 = IKcos(j4);
                                                                                    evalcond[0] = (new_r10 * x497);
                                                                                    evalcond[1] = (gconst4 * x497);
                                                                                    evalcond[2] =
                                                                                        ((-1.0) * new_r01 * x497);
                                                                                    evalcond[3] =
                                                                                        (gconst4 + ((new_r01 * x498)));
                                                                                    evalcond[4] =
                                                                                        (gconst4 + ((new_r10 * x498)));
                                                                                    evalcond[5] =
                                                                                        (((gconst4 * x498)) + new_r10);
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j4array[2], cj4array[2],
                                                                                    sj4array[2];
                                                                                bool j4valid[2] = { false };
                                                                                _nj4 = 2;
                                                                                CheckValue<IkReal> x499 =
                                                                                    IKPowWithIntegerCheck(new_r10, -1);
                                                                                if (!x499.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                cj4array[0] =
                                                                                    ((-1.0) * gconst4 * (x499.value));
                                                                                if (cj4array[0] >=
                                                                                        -1 - IKFAST_SINCOS_THRESH &&
                                                                                    cj4array[0] <=
                                                                                        1 + IKFAST_SINCOS_THRESH)
                                                                                {
                                                                                  j4valid[0] = j4valid[1] = true;
                                                                                  j4array[0] = IKacos(cj4array[0]);
                                                                                  sj4array[0] = IKsin(j4array[0]);
                                                                                  cj4array[1] = cj4array[0];
                                                                                  j4array[1] = -j4array[0];
                                                                                  sj4array[1] = -sj4array[0];
                                                                                }
                                                                                else if (isnan(cj4array[0]))
                                                                                {
                                                                                  // probably any value will work
                                                                                  j4valid[0] = true;
                                                                                  cj4array[0] = 1;
                                                                                  sj4array[0] = 0;
                                                                                  j4array[0] = 0;
                                                                                }
                                                                                for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                {
                                                                                  if (!j4valid[ij4])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij4[0] = ij4;
                                                                                  _ij4[1] = -1;
                                                                                  for (int iij4 = ij4 + 1; iij4 < 2;
                                                                                       ++iij4)
                                                                                  {
                                                                                    if (j4valid[iij4] &&
                                                                                        IKabs(cj4array[ij4] -
                                                                                              cj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj4array[ij4] -
                                                                                              sj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j4valid[iij4] = false;
                                                                                      _ij4[1] = iij4;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j4 = j4array[ij4];
                                                                                  cj4 = cj4array[ij4];
                                                                                  sj4 = sj4array[ij4];
                                                                                  {
                                                                                    IkReal evalcond[6];
                                                                                    IkReal x500 = IKsin(j4);
                                                                                    IkReal x501 = IKcos(j4);
                                                                                    IkReal x502 = (gconst4 * x501);
                                                                                    evalcond[0] = (new_r10 * x500);
                                                                                    evalcond[1] = (gconst4 * x500);
                                                                                    evalcond[2] =
                                                                                        ((-1.0) * new_r01 * x500);
                                                                                    evalcond[3] =
                                                                                        (gconst4 + ((new_r01 * x501)));
                                                                                    evalcond[4] = (x502 + new_r01);
                                                                                    evalcond[5] = (x502 + new_r10);
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j4array[2], cj4array[2], sj4array[2];
                                                                            bool j4valid[2] = { false };
                                                                            _nj4 = 2;
                                                                            CheckValue<IkReal> x503 =
                                                                                IKPowWithIntegerCheck(new_r01, -1);
                                                                            if (!x503.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            cj4array[0] =
                                                                                ((-1.0) * gconst4 * (x503.value));
                                                                            if (cj4array[0] >=
                                                                                    -1 - IKFAST_SINCOS_THRESH &&
                                                                                cj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                            {
                                                                              j4valid[0] = j4valid[1] = true;
                                                                              j4array[0] = IKacos(cj4array[0]);
                                                                              sj4array[0] = IKsin(j4array[0]);
                                                                              cj4array[1] = cj4array[0];
                                                                              j4array[1] = -j4array[0];
                                                                              sj4array[1] = -sj4array[0];
                                                                            }
                                                                            else if (isnan(cj4array[0]))
                                                                            {
                                                                              // probably any value will work
                                                                              j4valid[0] = true;
                                                                              cj4array[0] = 1;
                                                                              sj4array[0] = 0;
                                                                              j4array[0] = 0;
                                                                            }
                                                                            for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                            {
                                                                              if (!j4valid[ij4])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij4[0] = ij4;
                                                                              _ij4[1] = -1;
                                                                              for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                              {
                                                                                if (j4valid[iij4] &&
                                                                                    IKabs(cj4array[ij4] -
                                                                                          cj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj4array[ij4] -
                                                                                          sj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j4valid[iij4] = false;
                                                                                  _ij4[1] = iij4;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j4 = j4array[ij4];
                                                                              cj4 = cj4array[ij4];
                                                                              sj4 = sj4array[ij4];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x504 = IKsin(j4);
                                                                                IkReal x505 = IKcos(j4);
                                                                                IkReal x506 = (gconst4 * x505);
                                                                                evalcond[0] = (new_r10 * x504);
                                                                                evalcond[1] = (gconst4 * x504);
                                                                                evalcond[2] = ((-1.0) * new_r01 * x504);
                                                                                evalcond[3] =
                                                                                    (gconst4 + ((new_r10 * x505)));
                                                                                evalcond[4] = (x506 + new_r01);
                                                                                evalcond[5] = (x506 + new_r10);
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  } while (0);
                                                                  if (bgotonextstatement)
                                                                  {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                      evalcond[0] =
                                                                          ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                      evalcond[1] = gconst4;
                                                                      if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                                                          IKabs(evalcond[1]) < 0.0000050000000000)
                                                                      {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                          IkReal j4eval[4];
                                                                          CheckValue<IkReal> x508 =
                                                                              IKatan2WithCheck(IkReal(new_r01),
                                                                                               IkReal(new_r11),
                                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                                          if (!x508.valid)
                                                                          {
                                                                            continue;
                                                                          }
                                                                          IkReal x507 = ((1.0) * (x508.value));
                                                                          sj5 = 1.0;
                                                                          cj5 = 0;
                                                                          j5 = 1.5707963267949;
                                                                          sj6 = gconst4;
                                                                          cj6 = gconst5;
                                                                          j6 = ((3.14159265) + (((-1.0) * x507)));
                                                                          new_r00 = 0;
                                                                          new_r10 = 0;
                                                                          new_r21 = 0;
                                                                          new_r22 = 0;
                                                                          IkReal gconst3 =
                                                                              ((3.14159265358979) + (((-1.0) * x507)));
                                                                          IkReal gconst4 = ((1.0) * new_r01);
                                                                          IkReal gconst5 = ((-1.0) * new_r11);
                                                                          j4eval[0] = 1.0;
                                                                          j4eval[1] = 1.0;
                                                                          j4eval[2] = new_r01;
                                                                          j4eval[3] = 1.0;
                                                                          if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                              IKabs(j4eval[1]) < 0.0000010000000000 ||
                                                                              IKabs(j4eval[2]) < 0.0000010000000000 ||
                                                                              IKabs(j4eval[3]) < 0.0000010000000000)
                                                                          {
                                                                            {
                                                                              IkReal j4eval[3];
                                                                              CheckValue<IkReal> x510 =
                                                                                  IKatan2WithCheck(
                                                                                      IkReal(new_r01), IkReal(new_r11),
                                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x510.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal x509 = ((1.0) * (x510.value));
                                                                              sj5 = 1.0;
                                                                              cj5 = 0;
                                                                              j5 = 1.5707963267949;
                                                                              sj6 = gconst4;
                                                                              cj6 = gconst5;
                                                                              j6 = ((3.14159265) + (((-1.0) * x509)));
                                                                              new_r00 = 0;
                                                                              new_r10 = 0;
                                                                              new_r21 = 0;
                                                                              new_r22 = 0;
                                                                              IkReal gconst3 = ((3.14159265358979) +
                                                                                                (((-1.0) * x509)));
                                                                              IkReal gconst4 = ((1.0) * new_r01);
                                                                              IkReal gconst5 = ((-1.0) * new_r11);
                                                                              j4eval[0] = -1.0;
                                                                              j4eval[1] =
                                                                                  ((IKabs(((-1.0) +
                                                                                           (new_r01 * new_r01)))) +
                                                                                   (IKabs(((1.0) * new_r01 * new_r11))));
                                                                              j4eval[2] = -1.0;
                                                                              if (IKabs(j4eval[0]) <
                                                                                      0.0000010000000000 ||
                                                                                  IKabs(j4eval[1]) <
                                                                                      0.0000010000000000 ||
                                                                                  IKabs(j4eval[2]) < 0.0000010000000000)
                                                                              {
                                                                                {
                                                                                  IkReal j4eval[3];
                                                                                  CheckValue<IkReal> x512 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(new_r01),
                                                                                          IkReal(new_r11),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x512.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal x511 = ((1.0) * (x512.value));
                                                                                  sj5 = 1.0;
                                                                                  cj5 = 0;
                                                                                  j5 = 1.5707963267949;
                                                                                  sj6 = gconst4;
                                                                                  cj6 = gconst5;
                                                                                  j6 = ((3.14159265) +
                                                                                        (((-1.0) * x511)));
                                                                                  new_r00 = 0;
                                                                                  new_r10 = 0;
                                                                                  new_r21 = 0;
                                                                                  new_r22 = 0;
                                                                                  IkReal gconst3 = ((3.14159265358979) +
                                                                                                    (((-1.0) * x511)));
                                                                                  IkReal gconst4 = ((1.0) * new_r01);
                                                                                  IkReal gconst5 = ((-1.0) * new_r11);
                                                                                  j4eval[0] = 1.0;
                                                                                  j4eval[1] =
                                                                                      ((IKabs(((2.0) * new_r01 *
                                                                                               new_r11))) +
                                                                                       (IKabs(((1.0) + (((-2.0) *
                                                                                                         (new_r01 *
                                                                                                          new_r01)))))));
                                                                                  j4eval[2] = 1.0;
                                                                                  if (IKabs(j4eval[0]) <
                                                                                          0.0000010000000000 ||
                                                                                      IKabs(j4eval[1]) <
                                                                                          0.0000010000000000 ||
                                                                                      IKabs(j4eval[2]) <
                                                                                          0.0000010000000000)
                                                                                  {
                                                                                    continue;  // 3 cases reached
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    {
                                                                                      IkReal j4array[1], cj4array[1],
                                                                                          sj4array[1];
                                                                                      bool j4valid[1] = { false };
                                                                                      _nj4 = 1;
                                                                                      IkReal x513 = ((1.0) * new_r11);
                                                                                      CheckValue<IkReal> x514 =
                                                                                          IKPowWithIntegerCheck(
                                                                                              IKsign((
                                                                                                  (new_r01 * new_r01) +
                                                                                                  (new_r11 * new_r11))),
                                                                                              -1);
                                                                                      if (!x514.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      CheckValue<IkReal> x515 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal((
                                                                                                  ((gconst5 * new_r01)) +
                                                                                                  (((-1.0) * gconst4 *
                                                                                                    x513)))),
                                                                                              IkReal(
                                                                                                  ((((-1.0) * gconst4 *
                                                                                                     new_r01)) +
                                                                                                   (((-1.0) * gconst5 *
                                                                                                     x513)))),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x515.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      j4array[0] =
                                                                                          ((-1.5707963267949) +
                                                                                           (((1.5707963267949) *
                                                                                             (x514.value))) +
                                                                                           (x515.value));
                                                                                      sj4array[0] = IKsin(j4array[0]);
                                                                                      cj4array[0] = IKcos(j4array[0]);
                                                                                      if (j4array[0] > IKPI)
                                                                                      {
                                                                                        j4array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j4array[0] < -IKPI)
                                                                                      {
                                                                                        j4array[0] += IK2PI;
                                                                                      }
                                                                                      j4valid[0] = true;
                                                                                      for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                      {
                                                                                        if (!j4valid[ij4])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij4[0] = ij4;
                                                                                        _ij4[1] = -1;
                                                                                        for (int iij4 = ij4 + 1;
                                                                                             iij4 < 1; ++iij4)
                                                                                        {
                                                                                          if (j4valid[iij4] &&
                                                                                              IKabs(cj4array[ij4] -
                                                                                                    cj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj4array[ij4] -
                                                                                                    sj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j4valid[iij4] = false;
                                                                                            _ij4[1] = iij4;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j4 = j4array[ij4];
                                                                                        cj4 = cj4array[ij4];
                                                                                        sj4 = sj4array[ij4];
                                                                                        {
                                                                                          IkReal evalcond[6];
                                                                                          IkReal x516 = IKsin(j4);
                                                                                          IkReal x517 = IKcos(j4);
                                                                                          IkReal x518 =
                                                                                              (gconst4 * x517);
                                                                                          IkReal x519 =
                                                                                              (gconst4 * x516);
                                                                                          IkReal x520 =
                                                                                              (gconst5 * x517);
                                                                                          IkReal x521 = ((1.0) * x516);
                                                                                          IkReal x522 =
                                                                                              (gconst5 * x521);
                                                                                          evalcond[0] =
                                                                                              (((new_r01 * x517)) +
                                                                                               ((new_r11 * x516)) +
                                                                                               gconst4);
                                                                                          evalcond[1] =
                                                                                              (x520 + x519 + new_r11);
                                                                                          evalcond[2] =
                                                                                              ((((-1.0) * x522)) + x518);
                                                                                          evalcond[3] =
                                                                                              (((new_r11 * x517)) +
                                                                                               gconst5 +
                                                                                               (((-1.0) * new_r01 *
                                                                                                 x521)));
                                                                                          evalcond[4] =
                                                                                              ((((-1.0) * x522)) +
                                                                                               x518 + new_r01);
                                                                                          evalcond[5] =
                                                                                              ((((-1.0) * x520)) +
                                                                                               (((-1.0) * x519)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j0;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij0[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij0[1];
                                                                                          vinfos[0].maxsolutions = _nj0;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j1;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij1[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij1[1];
                                                                                          vinfos[1].maxsolutions = _nj1;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j2;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[2].maxsolutions = _nj2;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j3;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[3].maxsolutions = _nj3;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j4;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[4].maxsolutions = _nj4;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j5;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[5].maxsolutions = _nj5;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j6;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij6[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij6[1];
                                                                                          vinfos[6].maxsolutions = _nj6;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                {
                                                                                  IkReal j4array[1], cj4array[1],
                                                                                      sj4array[1];
                                                                                  bool j4valid[1] = { false };
                                                                                  _nj4 = 1;
                                                                                  CheckValue<IkReal> x523 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal((gconst4 * new_r11)),
                                                                                          IkReal((gconst5 * new_r11)),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x523.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  CheckValue<IkReal> x524 =
                                                                                      IKPowWithIntegerCheck(
                                                                                          IKsign(
                                                                                              ((((-1.0) *
                                                                                                 (gconst4 * gconst4))) +
                                                                                               (((-1.0) * (gconst5 *
                                                                                                           gconst5))))),
                                                                                          -1);
                                                                                  if (!x524.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  j4array[0] = ((-1.5707963267949) +
                                                                                                (x523.value) +
                                                                                                (((1.5707963267949) *
                                                                                                  (x524.value))));
                                                                                  sj4array[0] = IKsin(j4array[0]);
                                                                                  cj4array[0] = IKcos(j4array[0]);
                                                                                  if (j4array[0] > IKPI)
                                                                                  {
                                                                                    j4array[0] -= IK2PI;
                                                                                  }
                                                                                  else if (j4array[0] < -IKPI)
                                                                                  {
                                                                                    j4array[0] += IK2PI;
                                                                                  }
                                                                                  j4valid[0] = true;
                                                                                  for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                  {
                                                                                    if (!j4valid[ij4])
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    _ij4[0] = ij4;
                                                                                    _ij4[1] = -1;
                                                                                    for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                         ++iij4)
                                                                                    {
                                                                                      if (j4valid[iij4] &&
                                                                                          IKabs(cj4array[ij4] -
                                                                                                cj4array[iij4]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj4array[ij4] -
                                                                                                sj4array[iij4]) <
                                                                                              IKFAST_SOLUTION_THRESH)
                                                                                      {
                                                                                        j4valid[iij4] = false;
                                                                                        _ij4[1] = iij4;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j4 = j4array[ij4];
                                                                                    cj4 = cj4array[ij4];
                                                                                    sj4 = sj4array[ij4];
                                                                                    {
                                                                                      IkReal evalcond[6];
                                                                                      IkReal x525 = IKsin(j4);
                                                                                      IkReal x526 = IKcos(j4);
                                                                                      IkReal x527 = (gconst4 * x526);
                                                                                      IkReal x528 = (gconst4 * x525);
                                                                                      IkReal x529 = (gconst5 * x526);
                                                                                      IkReal x530 = ((1.0) * x525);
                                                                                      IkReal x531 = (gconst5 * x530);
                                                                                      evalcond[0] =
                                                                                          (((new_r01 * x526)) +
                                                                                           gconst4 + ((new_r11 * x525)));
                                                                                      evalcond[1] =
                                                                                          (x528 + x529 + new_r11);
                                                                                      evalcond[2] =
                                                                                          ((((-1.0) * x531)) + x527);
                                                                                      evalcond[3] =
                                                                                          (gconst5 + ((new_r11 * x526)) +
                                                                                           (((-1.0) * new_r01 * x530)));
                                                                                      evalcond[4] = ((((-1.0) * x531)) +
                                                                                                     x527 + new_r01);
                                                                                      evalcond[5] = ((((-1.0) * x528)) +
                                                                                                     (((-1.0) * x529)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[4]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[5]) >
                                                                                              IKFAST_EVALCOND_THRESH)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 17;
                                                                                      vinfos[0].foffset = j0;
                                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                                      vinfos[0].maxsolutions = _nj0;
                                                                                      vinfos[1].jointtype = 17;
                                                                                      vinfos[1].foffset = j1;
                                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                                      vinfos[1].maxsolutions = _nj1;
                                                                                      vinfos[2].jointtype = 17;
                                                                                      vinfos[2].foffset = j2;
                                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                                      vinfos[2].maxsolutions = _nj2;
                                                                                      vinfos[3].jointtype = 17;
                                                                                      vinfos[3].foffset = j3;
                                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                                      vinfos[3].maxsolutions = _nj3;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j4;
                                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                                      vinfos[4].maxsolutions = _nj4;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j5;
                                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                                      vinfos[5].maxsolutions = _nj5;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j6;
                                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                                      vinfos[6].maxsolutions = _nj6;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                          else
                                                                          {
                                                                            {
                                                                              IkReal j4array[1], cj4array[1],
                                                                                  sj4array[1];
                                                                              bool j4valid[1] = { false };
                                                                              _nj4 = 1;
                                                                              CheckValue<IkReal> x532 = IKatan2WithCheck(
                                                                                  IkReal((gconst4 * gconst5)),
                                                                                  IkReal(((-1.0) * (gconst4 * gconst4))),
                                                                                  IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x532.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              CheckValue<IkReal> x533 =
                                                                                  IKPowWithIntegerCheck(
                                                                                      IKsign((((gconst4 * new_r01)) +
                                                                                              (((-1.0) * gconst5 *
                                                                                                new_r11)))),
                                                                                      -1);
                                                                              if (!x533.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              j4array[0] =
                                                                                  ((-1.5707963267949) + (x532.value) +
                                                                                   (((1.5707963267949) * (x533.value))));
                                                                              sj4array[0] = IKsin(j4array[0]);
                                                                              cj4array[0] = IKcos(j4array[0]);
                                                                              if (j4array[0] > IKPI)
                                                                              {
                                                                                j4array[0] -= IK2PI;
                                                                              }
                                                                              else if (j4array[0] < -IKPI)
                                                                              {
                                                                                j4array[0] += IK2PI;
                                                                              }
                                                                              j4valid[0] = true;
                                                                              for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                              {
                                                                                if (!j4valid[ij4])
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                _ij4[0] = ij4;
                                                                                _ij4[1] = -1;
                                                                                for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                     ++iij4)
                                                                                {
                                                                                  if (j4valid[iij4] &&
                                                                                      IKabs(cj4array[ij4] -
                                                                                            cj4array[iij4]) <
                                                                                          IKFAST_SOLUTION_THRESH &&
                                                                                      IKabs(sj4array[ij4] -
                                                                                            sj4array[iij4]) <
                                                                                          IKFAST_SOLUTION_THRESH)
                                                                                  {
                                                                                    j4valid[iij4] = false;
                                                                                    _ij4[1] = iij4;
                                                                                    break;
                                                                                  }
                                                                                }
                                                                                j4 = j4array[ij4];
                                                                                cj4 = cj4array[ij4];
                                                                                sj4 = sj4array[ij4];
                                                                                {
                                                                                  IkReal evalcond[6];
                                                                                  IkReal x534 = IKsin(j4);
                                                                                  IkReal x535 = IKcos(j4);
                                                                                  IkReal x536 = (gconst4 * x535);
                                                                                  IkReal x537 = (gconst4 * x534);
                                                                                  IkReal x538 = (gconst5 * x535);
                                                                                  IkReal x539 = ((1.0) * x534);
                                                                                  IkReal x540 = (gconst5 * x539);
                                                                                  evalcond[0] =
                                                                                      (((new_r01 * x535)) + gconst4 +
                                                                                       ((new_r11 * x534)));
                                                                                  evalcond[1] = (x537 + x538 + new_r11);
                                                                                  evalcond[2] =
                                                                                      ((((-1.0) * x540)) + x536);
                                                                                  evalcond[3] =
                                                                                      (gconst5 + ((new_r11 * x535)) +
                                                                                       (((-1.0) * new_r01 * x539)));
                                                                                  evalcond[4] = ((((-1.0) * x540)) +
                                                                                                 x536 + new_r01);
                                                                                  evalcond[5] = ((((-1.0) * x538)) +
                                                                                                 (((-1.0) * x537)));
                                                                                  if (IKabs(evalcond[0]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[1]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[2]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[3]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[4]) >
                                                                                          IKFAST_EVALCOND_THRESH ||
                                                                                      IKabs(evalcond[5]) >
                                                                                          IKFAST_EVALCOND_THRESH)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                }

                                                                                {
                                                                                  std::vector<
                                                                                      IkSingleDOFSolutionBase<IkReal> >
                                                                                      vinfos(7);
                                                                                  vinfos[0].jointtype = 17;
                                                                                  vinfos[0].foffset = j0;
                                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                                  vinfos[0].maxsolutions = _nj0;
                                                                                  vinfos[1].jointtype = 17;
                                                                                  vinfos[1].foffset = j1;
                                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                                  vinfos[1].maxsolutions = _nj1;
                                                                                  vinfos[2].jointtype = 17;
                                                                                  vinfos[2].foffset = j2;
                                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                                  vinfos[2].maxsolutions = _nj2;
                                                                                  vinfos[3].jointtype = 17;
                                                                                  vinfos[3].foffset = j3;
                                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                                  vinfos[3].maxsolutions = _nj3;
                                                                                  vinfos[4].jointtype = 1;
                                                                                  vinfos[4].foffset = j4;
                                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                                  vinfos[4].maxsolutions = _nj4;
                                                                                  vinfos[5].jointtype = 1;
                                                                                  vinfos[5].foffset = j5;
                                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                                  vinfos[5].maxsolutions = _nj5;
                                                                                  vinfos[6].jointtype = 1;
                                                                                  vinfos[6].foffset = j6;
                                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                                  vinfos[6].maxsolutions = _nj6;
                                                                                  std::vector<int> vfree(0);
                                                                                  solutions.AddSolution(vinfos, vfree);
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    } while (0);
                                                                    if (bgotonextstatement)
                                                                    {
                                                                      bool bgotonextstatement = true;
                                                                      do
                                                                      {
                                                                        evalcond[0] =
                                                                            ((IKabs(new_r10)) + (IKabs(new_r01)));
                                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                        {
                                                                          bgotonextstatement = false;
                                                                          {
                                                                            IkReal j4array[2], cj4array[2], sj4array[2];
                                                                            bool j4valid[2] = { false };
                                                                            _nj4 = 2;
                                                                            CheckValue<IkReal> x541 =
                                                                                IKPowWithIntegerCheck(gconst5, -1);
                                                                            if (!x541.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            cj4array[0] = (new_r00 * (x541.value));
                                                                            if (cj4array[0] >=
                                                                                    -1 - IKFAST_SINCOS_THRESH &&
                                                                                cj4array[0] <= 1 + IKFAST_SINCOS_THRESH)
                                                                            {
                                                                              j4valid[0] = j4valid[1] = true;
                                                                              j4array[0] = IKacos(cj4array[0]);
                                                                              sj4array[0] = IKsin(j4array[0]);
                                                                              cj4array[1] = cj4array[0];
                                                                              j4array[1] = -j4array[0];
                                                                              sj4array[1] = -sj4array[0];
                                                                            }
                                                                            else if (isnan(cj4array[0]))
                                                                            {
                                                                              // probably any value will work
                                                                              j4valid[0] = true;
                                                                              cj4array[0] = 1;
                                                                              sj4array[0] = 0;
                                                                              j4array[0] = 0;
                                                                            }
                                                                            for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                            {
                                                                              if (!j4valid[ij4])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij4[0] = ij4;
                                                                              _ij4[1] = -1;
                                                                              for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                              {
                                                                                if (j4valid[iij4] &&
                                                                                    IKabs(cj4array[ij4] -
                                                                                          cj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj4array[ij4] -
                                                                                          sj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j4valid[iij4] = false;
                                                                                  _ij4[1] = iij4;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j4 = j4array[ij4];
                                                                              cj4 = cj4array[ij4];
                                                                              sj4 = sj4array[ij4];
                                                                              {
                                                                                IkReal evalcond[6];
                                                                                IkReal x542 = IKsin(j4);
                                                                                IkReal x543 = IKcos(j4);
                                                                                IkReal x544 = ((-1.0) * x542);
                                                                                evalcond[0] = (new_r11 * x542);
                                                                                evalcond[1] = (new_r00 * x544);
                                                                                evalcond[2] = (gconst5 * x544);
                                                                                evalcond[3] =
                                                                                    (((gconst5 * x543)) + new_r11);
                                                                                evalcond[4] =
                                                                                    (gconst5 + ((new_r11 * x543)));
                                                                                evalcond[5] = (((new_r00 * x543)) +
                                                                                               (((-1.0) * gconst5)));
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      } while (0);
                                                                      if (bgotonextstatement)
                                                                      {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                          evalcond[0] =
                                                                              ((IKabs(new_r00)) + (IKabs(new_r01)));
                                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                          {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                              IkReal j4eval[1];
                                                                              CheckValue<IkReal> x546 =
                                                                                  IKatan2WithCheck(
                                                                                      IkReal(0), IkReal(new_r11),
                                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                              if (!x546.valid)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal x545 = ((1.0) * (x546.value));
                                                                              sj5 = 1.0;
                                                                              cj5 = 0;
                                                                              j5 = 1.5707963267949;
                                                                              sj6 = gconst4;
                                                                              cj6 = gconst5;
                                                                              j6 = ((3.14159265) + (((-1.0) * x545)));
                                                                              new_r00 = 0;
                                                                              new_r01 = 0;
                                                                              new_r12 = 0;
                                                                              new_r22 = 0;
                                                                              IkReal gconst3 = ((3.14159265358979) +
                                                                                                (((-1.0) * x545)));
                                                                              IkReal gconst4 = 0;
                                                                              IkReal x547 =
                                                                                  ((1.0) +
                                                                                   (((-1.0) * (new_r10 * new_r10))));
                                                                              if (IKabs(x547) == 0)
                                                                              {
                                                                                continue;
                                                                              }
                                                                              IkReal gconst5 = ((-1.0) * new_r11 *
                                                                                                (pow(x547, -0.5)));
                                                                              j4eval[0] =
                                                                                  ((IKabs(new_r11)) + (IKabs(new_r10)));
                                                                              if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                              {
                                                                                {
                                                                                  IkReal j4eval[1];
                                                                                  CheckValue<IkReal> x549 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(0), IkReal(new_r11),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x549.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal x548 = ((1.0) * (x549.value));
                                                                                  sj5 = 1.0;
                                                                                  cj5 = 0;
                                                                                  j5 = 1.5707963267949;
                                                                                  sj6 = gconst4;
                                                                                  cj6 = gconst5;
                                                                                  j6 = ((3.14159265) +
                                                                                        (((-1.0) * x548)));
                                                                                  new_r00 = 0;
                                                                                  new_r01 = 0;
                                                                                  new_r12 = 0;
                                                                                  new_r22 = 0;
                                                                                  IkReal gconst3 = ((3.14159265358979) +
                                                                                                    (((-1.0) * x548)));
                                                                                  IkReal gconst4 = 0;
                                                                                  IkReal x550 =
                                                                                      ((1.0) + (((-1.0) *
                                                                                                 (new_r10 * new_r10))));
                                                                                  if (IKabs(x550) == 0)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  IkReal gconst5 = ((-1.0) * new_r11 *
                                                                                                    (pow(x550, -0.5)));
                                                                                  j4eval[0] = new_r11;
                                                                                  if (IKabs(j4eval[0]) <
                                                                                      0.0000010000000000)
                                                                                  {
                                                                                    {
                                                                                      IkReal j4eval[1];
                                                                                      CheckValue<IkReal> x552 =
                                                                                          IKatan2WithCheck(
                                                                                              IkReal(0),
                                                                                              IkReal(new_r11),
                                                                                              IKFAST_ATAN2_MAGTHRESH);
                                                                                      if (!x552.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal x551 =
                                                                                          ((1.0) * (x552.value));
                                                                                      sj5 = 1.0;
                                                                                      cj5 = 0;
                                                                                      j5 = 1.5707963267949;
                                                                                      sj6 = gconst4;
                                                                                      cj6 = gconst5;
                                                                                      j6 = ((3.14159265) +
                                                                                            (((-1.0) * x551)));
                                                                                      new_r00 = 0;
                                                                                      new_r01 = 0;
                                                                                      new_r12 = 0;
                                                                                      new_r22 = 0;
                                                                                      IkReal gconst3 =
                                                                                          ((3.14159265358979) +
                                                                                           (((-1.0) * x551)));
                                                                                      IkReal gconst4 = 0;
                                                                                      IkReal x553 =
                                                                                          ((1.0) +
                                                                                           (((-1.0) *
                                                                                             (new_r10 * new_r10))));
                                                                                      if (IKabs(x553) == 0)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      IkReal gconst5 =
                                                                                          ((-1.0) * new_r11 *
                                                                                           (pow(x553, -0.5)));
                                                                                      j4eval[0] = new_r10;
                                                                                      if (IKabs(j4eval[0]) <
                                                                                          0.0000010000000000)
                                                                                      {
                                                                                        continue;  // 3 cases reached
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        {
                                                                                          IkReal j4array[1],
                                                                                              cj4array[1], sj4array[1];
                                                                                          bool j4valid[1] = { false };
                                                                                          _nj4 = 1;
                                                                                          CheckValue<IkReal> x554 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  new_r10, -1);
                                                                                          if (!x554.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          CheckValue<IkReal> x555 =
                                                                                              IKPowWithIntegerCheck(
                                                                                                  gconst5, -1);
                                                                                          if (!x555.valid)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          if (IKabs((gconst5 *
                                                                                                     (x554.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(((-1.0) * new_r11 *
                                                                                                     (x555.value))) <
                                                                                                  IKFAST_ATAN2_MAGTHRESH &&
                                                                                              IKabs(
                                                                                                  IKsqr((gconst5 *
                                                                                                         (x554.value))) +
                                                                                                  IKsqr((
                                                                                                      (-1.0) * new_r11 *
                                                                                                      (x555.value))) -
                                                                                                  1) <=
                                                                                                  IKFAST_SINCOS_THRESH)
                                                                                            continue;
                                                                                          j4array[0] = IKatan2(
                                                                                              (gconst5 * (x554.value)),
                                                                                              ((-1.0) * new_r11 *
                                                                                               (x555.value)));
                                                                                          sj4array[0] =
                                                                                              IKsin(j4array[0]);
                                                                                          cj4array[0] =
                                                                                              IKcos(j4array[0]);
                                                                                          if (j4array[0] > IKPI)
                                                                                          {
                                                                                            j4array[0] -= IK2PI;
                                                                                          }
                                                                                          else if (j4array[0] < -IKPI)
                                                                                          {
                                                                                            j4array[0] += IK2PI;
                                                                                          }
                                                                                          j4valid[0] = true;
                                                                                          for (int ij4 = 0; ij4 < 1;
                                                                                               ++ij4)
                                                                                          {
                                                                                            if (!j4valid[ij4])
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            _ij4[0] = ij4;
                                                                                            _ij4[1] = -1;
                                                                                            for (int iij4 = ij4 + 1;
                                                                                                 iij4 < 1; ++iij4)
                                                                                            {
                                                                                              if (j4valid[iij4] &&
                                                                                                  IKabs(cj4array[ij4] -
                                                                                                        cj4array[iij4]) <
                                                                                                      IKFAST_SOLUTION_THRESH &&
                                                                                                  IKabs(sj4array[ij4] -
                                                                                                        sj4array[iij4]) <
                                                                                                      IKFAST_SOLUTION_THRESH)
                                                                                              {
                                                                                                j4valid[iij4] = false;
                                                                                                _ij4[1] = iij4;
                                                                                                break;
                                                                                              }
                                                                                            }
                                                                                            j4 = j4array[ij4];
                                                                                            cj4 = cj4array[ij4];
                                                                                            sj4 = sj4array[ij4];
                                                                                            {
                                                                                              IkReal evalcond[8];
                                                                                              IkReal x556 = IKsin(j4);
                                                                                              IkReal x557 = IKcos(j4);
                                                                                              IkReal x558 =
                                                                                                  ((1.0) * gconst5);
                                                                                              IkReal x559 =
                                                                                                  ((-1.0) * gconst5);
                                                                                              evalcond[0] =
                                                                                                  (new_r11 * x556);
                                                                                              evalcond[1] =
                                                                                                  (new_r10 * x557);
                                                                                              evalcond[2] =
                                                                                                  (x556 * x559);
                                                                                              evalcond[3] =
                                                                                                  (x557 * x559);
                                                                                              evalcond[4] =
                                                                                                  (((gconst5 * x557)) +
                                                                                                   new_r11);
                                                                                              evalcond[5] =
                                                                                                  (((new_r11 * x557)) +
                                                                                                   gconst5);
                                                                                              evalcond[6] =
                                                                                                  ((((-1.0) * x556 *
                                                                                                     x558)) +
                                                                                                   new_r10);
                                                                                              evalcond[7] =
                                                                                                  (((new_r10 * x556)) +
                                                                                                   (((-1.0) * x558)));
                                                                                              if (IKabs(evalcond[0]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[1]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[2]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[3]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[4]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[5]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[6]) >
                                                                                                      IKFAST_EVALCOND_THRESH ||
                                                                                                  IKabs(evalcond[7]) >
                                                                                                      IKFAST_EVALCOND_THRESH)
                                                                                              {
                                                                                                continue;
                                                                                              }
                                                                                            }

                                                                                            {
                                                                                              std::vector<
                                                                                                  IkSingleDOFSolutionBase<
                                                                                                      IkReal> >
                                                                                                  vinfos(7);
                                                                                              vinfos[0].jointtype = 17;
                                                                                              vinfos[0].foffset = j0;
                                                                                              vinfos[0].indices[0] =
                                                                                                  _ij0[0];
                                                                                              vinfos[0].indices[1] =
                                                                                                  _ij0[1];
                                                                                              vinfos[0].maxsolutions =
                                                                                                  _nj0;
                                                                                              vinfos[1].jointtype = 17;
                                                                                              vinfos[1].foffset = j1;
                                                                                              vinfos[1].indices[0] =
                                                                                                  _ij1[0];
                                                                                              vinfos[1].indices[1] =
                                                                                                  _ij1[1];
                                                                                              vinfos[1].maxsolutions =
                                                                                                  _nj1;
                                                                                              vinfos[2].jointtype = 17;
                                                                                              vinfos[2].foffset = j2;
                                                                                              vinfos[2].indices[0] =
                                                                                                  _ij2[0];
                                                                                              vinfos[2].indices[1] =
                                                                                                  _ij2[1];
                                                                                              vinfos[2].maxsolutions =
                                                                                                  _nj2;
                                                                                              vinfos[3].jointtype = 17;
                                                                                              vinfos[3].foffset = j3;
                                                                                              vinfos[3].indices[0] =
                                                                                                  _ij3[0];
                                                                                              vinfos[3].indices[1] =
                                                                                                  _ij3[1];
                                                                                              vinfos[3].maxsolutions =
                                                                                                  _nj3;
                                                                                              vinfos[4].jointtype = 1;
                                                                                              vinfos[4].foffset = j4;
                                                                                              vinfos[4].indices[0] =
                                                                                                  _ij4[0];
                                                                                              vinfos[4].indices[1] =
                                                                                                  _ij4[1];
                                                                                              vinfos[4].maxsolutions =
                                                                                                  _nj4;
                                                                                              vinfos[5].jointtype = 1;
                                                                                              vinfos[5].foffset = j5;
                                                                                              vinfos[5].indices[0] =
                                                                                                  _ij5[0];
                                                                                              vinfos[5].indices[1] =
                                                                                                  _ij5[1];
                                                                                              vinfos[5].maxsolutions =
                                                                                                  _nj5;
                                                                                              vinfos[6].jointtype = 1;
                                                                                              vinfos[6].foffset = j6;
                                                                                              vinfos[6].indices[0] =
                                                                                                  _ij6[0];
                                                                                              vinfos[6].indices[1] =
                                                                                                  _ij6[1];
                                                                                              vinfos[6].maxsolutions =
                                                                                                  _nj6;
                                                                                              std::vector<int> vfree(0);
                                                                                              solutions.AddSolution(
                                                                                                  vinfos, vfree);
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    {
                                                                                      IkReal j4array[1], cj4array[1],
                                                                                          sj4array[1];
                                                                                      bool j4valid[1] = { false };
                                                                                      _nj4 = 1;
                                                                                      CheckValue<IkReal> x560 =
                                                                                          IKPowWithIntegerCheck(gconst5,
                                                                                                                -1);
                                                                                      if (!x560.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      CheckValue<IkReal> x561 =
                                                                                          IKPowWithIntegerCheck(new_r11,
                                                                                                                -1);
                                                                                      if (!x561.valid)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      if (IKabs((new_r10 *
                                                                                                 (x560.value))) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(((-1.0) * gconst5 *
                                                                                                 (x561.value))) <
                                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                                          IKabs(IKsqr((new_r10 *
                                                                                                       (x560.value))) +
                                                                                                IKsqr(((-1.0) * gconst5 *
                                                                                                       (x561.value))) -
                                                                                                1) <=
                                                                                              IKFAST_SINCOS_THRESH)
                                                                                        continue;
                                                                                      j4array[0] = IKatan2(
                                                                                          (new_r10 * (x560.value)),
                                                                                          ((-1.0) * gconst5 *
                                                                                           (x561.value)));
                                                                                      sj4array[0] = IKsin(j4array[0]);
                                                                                      cj4array[0] = IKcos(j4array[0]);
                                                                                      if (j4array[0] > IKPI)
                                                                                      {
                                                                                        j4array[0] -= IK2PI;
                                                                                      }
                                                                                      else if (j4array[0] < -IKPI)
                                                                                      {
                                                                                        j4array[0] += IK2PI;
                                                                                      }
                                                                                      j4valid[0] = true;
                                                                                      for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                      {
                                                                                        if (!j4valid[ij4])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij4[0] = ij4;
                                                                                        _ij4[1] = -1;
                                                                                        for (int iij4 = ij4 + 1;
                                                                                             iij4 < 1; ++iij4)
                                                                                        {
                                                                                          if (j4valid[iij4] &&
                                                                                              IKabs(cj4array[ij4] -
                                                                                                    cj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj4array[ij4] -
                                                                                                    sj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j4valid[iij4] = false;
                                                                                            _ij4[1] = iij4;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j4 = j4array[ij4];
                                                                                        cj4 = cj4array[ij4];
                                                                                        sj4 = sj4array[ij4];
                                                                                        {
                                                                                          IkReal evalcond[8];
                                                                                          IkReal x562 = IKsin(j4);
                                                                                          IkReal x563 = IKcos(j4);
                                                                                          IkReal x564 =
                                                                                              ((1.0) * gconst5);
                                                                                          IkReal x565 =
                                                                                              ((-1.0) * gconst5);
                                                                                          evalcond[0] =
                                                                                              (new_r11 * x562);
                                                                                          evalcond[1] =
                                                                                              (new_r10 * x563);
                                                                                          evalcond[2] = (x562 * x565);
                                                                                          evalcond[3] = (x563 * x565);
                                                                                          evalcond[4] =
                                                                                              (((gconst5 * x563)) +
                                                                                               new_r11);
                                                                                          evalcond[5] =
                                                                                              (gconst5 +
                                                                                               ((new_r11 * x563)));
                                                                                          evalcond[6] =
                                                                                              ((((-1.0) * x562 * x564)) +
                                                                                               new_r10);
                                                                                          evalcond[7] =
                                                                                              (((new_r10 * x562)) +
                                                                                               (((-1.0) * x564)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[6]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[7]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j0;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij0[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij0[1];
                                                                                          vinfos[0].maxsolutions = _nj0;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j1;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij1[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij1[1];
                                                                                          vinfos[1].maxsolutions = _nj1;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j2;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[2].maxsolutions = _nj2;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j3;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[3].maxsolutions = _nj3;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j4;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[4].maxsolutions = _nj4;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j5;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[5].maxsolutions = _nj5;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j6;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij6[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij6[1];
                                                                                          vinfos[6].maxsolutions = _nj6;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              else
                                                                              {
                                                                                {
                                                                                  IkReal j4array[1], cj4array[1],
                                                                                      sj4array[1];
                                                                                  bool j4valid[1] = { false };
                                                                                  _nj4 = 1;
                                                                                  CheckValue<IkReal> x566 =
                                                                                      IKatan2WithCheck(
                                                                                          IkReal(new_r10),
                                                                                          IkReal(((-1.0) * new_r11)),
                                                                                          IKFAST_ATAN2_MAGTHRESH);
                                                                                  if (!x566.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  CheckValue<IkReal> x567 =
                                                                                      IKPowWithIntegerCheck(
                                                                                          IKsign(gconst5), -1);
                                                                                  if (!x567.valid)
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  j4array[0] = ((-1.5707963267949) +
                                                                                                (x566.value) +
                                                                                                (((1.5707963267949) *
                                                                                                  (x567.value))));
                                                                                  sj4array[0] = IKsin(j4array[0]);
                                                                                  cj4array[0] = IKcos(j4array[0]);
                                                                                  if (j4array[0] > IKPI)
                                                                                  {
                                                                                    j4array[0] -= IK2PI;
                                                                                  }
                                                                                  else if (j4array[0] < -IKPI)
                                                                                  {
                                                                                    j4array[0] += IK2PI;
                                                                                  }
                                                                                  j4valid[0] = true;
                                                                                  for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                  {
                                                                                    if (!j4valid[ij4])
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    _ij4[0] = ij4;
                                                                                    _ij4[1] = -1;
                                                                                    for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                         ++iij4)
                                                                                    {
                                                                                      if (j4valid[iij4] &&
                                                                                          IKabs(cj4array[ij4] -
                                                                                                cj4array[iij4]) <
                                                                                              IKFAST_SOLUTION_THRESH &&
                                                                                          IKabs(sj4array[ij4] -
                                                                                                sj4array[iij4]) <
                                                                                              IKFAST_SOLUTION_THRESH)
                                                                                      {
                                                                                        j4valid[iij4] = false;
                                                                                        _ij4[1] = iij4;
                                                                                        break;
                                                                                      }
                                                                                    }
                                                                                    j4 = j4array[ij4];
                                                                                    cj4 = cj4array[ij4];
                                                                                    sj4 = sj4array[ij4];
                                                                                    {
                                                                                      IkReal evalcond[8];
                                                                                      IkReal x568 = IKsin(j4);
                                                                                      IkReal x569 = IKcos(j4);
                                                                                      IkReal x570 = ((1.0) * gconst5);
                                                                                      IkReal x571 = ((-1.0) * gconst5);
                                                                                      evalcond[0] = (new_r11 * x568);
                                                                                      evalcond[1] = (new_r10 * x569);
                                                                                      evalcond[2] = (x568 * x571);
                                                                                      evalcond[3] = (x569 * x571);
                                                                                      evalcond[4] =
                                                                                          (((gconst5 * x569)) + new_r11);
                                                                                      evalcond[5] =
                                                                                          (gconst5 + ((new_r11 * x569)));
                                                                                      evalcond[6] =
                                                                                          ((((-1.0) * x568 * x570)) +
                                                                                           new_r10);
                                                                                      evalcond[7] =
                                                                                          ((((-1.0) * x570)) +
                                                                                           ((new_r10 * x568)));
                                                                                      if (IKabs(evalcond[0]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[1]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[2]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[3]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[4]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[5]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[6]) >
                                                                                              IKFAST_EVALCOND_THRESH ||
                                                                                          IKabs(evalcond[7]) >
                                                                                              IKFAST_EVALCOND_THRESH)
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                    }

                                                                                    {
                                                                                      std::vector<
                                                                                          IkSingleDOFSolutionBase<IkReal> >
                                                                                          vinfos(7);
                                                                                      vinfos[0].jointtype = 17;
                                                                                      vinfos[0].foffset = j0;
                                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                                      vinfos[0].maxsolutions = _nj0;
                                                                                      vinfos[1].jointtype = 17;
                                                                                      vinfos[1].foffset = j1;
                                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                                      vinfos[1].maxsolutions = _nj1;
                                                                                      vinfos[2].jointtype = 17;
                                                                                      vinfos[2].foffset = j2;
                                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                                      vinfos[2].maxsolutions = _nj2;
                                                                                      vinfos[3].jointtype = 17;
                                                                                      vinfos[3].foffset = j3;
                                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                                      vinfos[3].maxsolutions = _nj3;
                                                                                      vinfos[4].jointtype = 1;
                                                                                      vinfos[4].foffset = j4;
                                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                                      vinfos[4].maxsolutions = _nj4;
                                                                                      vinfos[5].jointtype = 1;
                                                                                      vinfos[5].foffset = j5;
                                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                                      vinfos[5].maxsolutions = _nj5;
                                                                                      vinfos[6].jointtype = 1;
                                                                                      vinfos[6].foffset = j6;
                                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                                      vinfos[6].maxsolutions = _nj6;
                                                                                      std::vector<int> vfree(0);
                                                                                      solutions.AddSolution(vinfos,
                                                                                                            vfree);
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        } while (0);
                                                                        if (bgotonextstatement)
                                                                        {
                                                                          bool bgotonextstatement = true;
                                                                          do
                                                                          {
                                                                            evalcond[0] = IKabs(new_r01);
                                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                            {
                                                                              bgotonextstatement = false;
                                                                              {
                                                                                IkReal j4eval[1];
                                                                                CheckValue<IkReal> x573 =
                                                                                    IKatan2WithCheck(
                                                                                        IkReal(0), IkReal(new_r11),
                                                                                        IKFAST_ATAN2_MAGTHRESH);
                                                                                if (!x573.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x572 = ((1.0) * (x573.value));
                                                                                sj5 = 1.0;
                                                                                cj5 = 0;
                                                                                j5 = 1.5707963267949;
                                                                                sj6 = gconst4;
                                                                                cj6 = gconst5;
                                                                                j6 = ((3.14159265) + (((-1.0) * x572)));
                                                                                new_r01 = 0;
                                                                                IkReal gconst3 = ((3.14159265358979) +
                                                                                                  (((-1.0) * x572)));
                                                                                IkReal gconst4 = 0;
                                                                                IkReal x574 = new_r11 * new_r11;
                                                                                if (IKabs(x574) == 0)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal gconst5 = ((-1.0) * new_r11 *
                                                                                                  (pow(x574, -0.5)));
                                                                                j4eval[0] = ((IKabs(new_r10)) +
                                                                                             (IKabs(new_r00)));
                                                                                if (IKabs(j4eval[0]) <
                                                                                    0.0000010000000000)
                                                                                {
                                                                                  {
                                                                                    IkReal j4eval[1];
                                                                                    CheckValue<IkReal> x576 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(0), IkReal(new_r11),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x576.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal x575 =
                                                                                        ((1.0) * (x576.value));
                                                                                    sj5 = 1.0;
                                                                                    cj5 = 0;
                                                                                    j5 = 1.5707963267949;
                                                                                    sj6 = gconst4;
                                                                                    cj6 = gconst5;
                                                                                    j6 = ((3.14159265) +
                                                                                          (((-1.0) * x575)));
                                                                                    new_r01 = 0;
                                                                                    IkReal gconst3 =
                                                                                        ((3.14159265358979) +
                                                                                         (((-1.0) * x575)));
                                                                                    IkReal gconst4 = 0;
                                                                                    IkReal x577 = new_r11 * new_r11;
                                                                                    if (IKabs(x577) == 0)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    IkReal gconst5 =
                                                                                        ((-1.0) * new_r11 *
                                                                                         (pow(x577, -0.5)));
                                                                                    j4eval[0] = ((IKabs(new_r11)) +
                                                                                                 (IKabs(new_r10)));
                                                                                    if (IKabs(j4eval[0]) <
                                                                                        0.0000010000000000)
                                                                                    {
                                                                                      {
                                                                                        IkReal j4eval[1];
                                                                                        CheckValue<IkReal> x579 =
                                                                                            IKatan2WithCheck(
                                                                                                IkReal(0),
                                                                                                IkReal(new_r11),
                                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x579.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        IkReal x578 =
                                                                                            ((1.0) * (x579.value));
                                                                                        sj5 = 1.0;
                                                                                        cj5 = 0;
                                                                                        j5 = 1.5707963267949;
                                                                                        sj6 = gconst4;
                                                                                        cj6 = gconst5;
                                                                                        j6 = ((3.14159265) +
                                                                                              (((-1.0) * x578)));
                                                                                        new_r01 = 0;
                                                                                        IkReal gconst3 =
                                                                                            ((3.14159265358979) +
                                                                                             (((-1.0) * x578)));
                                                                                        IkReal gconst4 = 0;
                                                                                        IkReal x580 = new_r11 * new_r11;
                                                                                        if (IKabs(x580) == 0)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        IkReal gconst5 =
                                                                                            ((-1.0) * new_r11 *
                                                                                             (pow(x580, -0.5)));
                                                                                        j4eval[0] = new_r11;
                                                                                        if (IKabs(j4eval[0]) <
                                                                                            0.0000010000000000)
                                                                                        {
                                                                                          continue;  // 3 cases reached
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          {
                                                                                            IkReal j4array[1],
                                                                                                cj4array[1],
                                                                                                sj4array[1];
                                                                                            bool j4valid[1] = { false };
                                                                                            _nj4 = 1;
                                                                                            CheckValue<IkReal> x581 =
                                                                                                IKPowWithIntegerCheck(
                                                                                                    gconst5, -1);
                                                                                            if (!x581.valid)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x582 =
                                                                                                IKPowWithIntegerCheck(
                                                                                                    new_r11, -1);
                                                                                            if (!x582.valid)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                            if (IKabs((new_r10 *
                                                                                                       (x581.value))) <
                                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                                IKabs(((-1.0) * gconst5 *
                                                                                                       (x582.value))) <
                                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                                IKabs(
                                                                                                    IKsqr((
                                                                                                        new_r10 *
                                                                                                        (x581.value))) +
                                                                                                    IKsqr((
                                                                                                        (-1.0) * gconst5 *
                                                                                                        (x582.value))) -
                                                                                                    1) <=
                                                                                                    IKFAST_SINCOS_THRESH)
                                                                                              continue;
                                                                                            j4array[0] = IKatan2(
                                                                                                (new_r10 * (x581.value)),
                                                                                                ((-1.0) * gconst5 *
                                                                                                 (x582.value)));
                                                                                            sj4array[0] =
                                                                                                IKsin(j4array[0]);
                                                                                            cj4array[0] =
                                                                                                IKcos(j4array[0]);
                                                                                            if (j4array[0] > IKPI)
                                                                                            {
                                                                                              j4array[0] -= IK2PI;
                                                                                            }
                                                                                            else if (j4array[0] < -IKPI)
                                                                                            {
                                                                                              j4array[0] += IK2PI;
                                                                                            }
                                                                                            j4valid[0] = true;
                                                                                            for (int ij4 = 0; ij4 < 1;
                                                                                                 ++ij4)
                                                                                            {
                                                                                              if (!j4valid[ij4])
                                                                                              {
                                                                                                continue;
                                                                                              }
                                                                                              _ij4[0] = ij4;
                                                                                              _ij4[1] = -1;
                                                                                              for (int iij4 = ij4 + 1;
                                                                                                   iij4 < 1; ++iij4)
                                                                                              {
                                                                                                if (j4valid[iij4] &&
                                                                                                    IKabs(
                                                                                                        cj4array[ij4] -
                                                                                                        cj4array[iij4]) <
                                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                                    IKabs(
                                                                                                        sj4array[ij4] -
                                                                                                        sj4array[iij4]) <
                                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                                {
                                                                                                  j4valid[iij4] = false;
                                                                                                  _ij4[1] = iij4;
                                                                                                  break;
                                                                                                }
                                                                                              }
                                                                                              j4 = j4array[ij4];
                                                                                              cj4 = cj4array[ij4];
                                                                                              sj4 = sj4array[ij4];
                                                                                              {
                                                                                                IkReal evalcond[8];
                                                                                                IkReal x583 = IKsin(j4);
                                                                                                IkReal x584 = IKcos(j4);
                                                                                                IkReal x585 =
                                                                                                    ((1.0) * gconst5);
                                                                                                IkReal x586 =
                                                                                                    (gconst5 * x583);
                                                                                                evalcond[0] =
                                                                                                    (new_r11 * x583);
                                                                                                evalcond[1] =
                                                                                                    ((-1.0) * x586);
                                                                                                evalcond[2] =
                                                                                                    (((gconst5 * x584)) +
                                                                                                     new_r11);
                                                                                                evalcond[3] =
                                                                                                    (gconst5 +
                                                                                                     ((new_r11 * x584)));
                                                                                                evalcond[4] =
                                                                                                    ((((-1.0) * x583 *
                                                                                                       x585)) +
                                                                                                     new_r10);
                                                                                                evalcond[5] =
                                                                                                    ((((-1.0) * x584 *
                                                                                                       x585)) +
                                                                                                     new_r00);
                                                                                                evalcond[6] =
                                                                                                    ((((-1.0) *
                                                                                                       new_r00 * x583)) +
                                                                                                     ((new_r10 * x584)));
                                                                                                evalcond[7] =
                                                                                                    (((new_r00 * x584)) +
                                                                                                     (((-1.0) * x585)) +
                                                                                                     ((new_r10 * x583)));
                                                                                                if (IKabs(evalcond[0]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[1]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[2]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[3]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[4]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[5]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[6]) >
                                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                                    IKabs(evalcond[7]) >
                                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                                {
                                                                                                  continue;
                                                                                                }
                                                                                              }

                                                                                              {
                                                                                                std::vector<
                                                                                                    IkSingleDOFSolutionBase<
                                                                                                        IkReal> >
                                                                                                    vinfos(7);
                                                                                                vinfos[0].jointtype =
                                                                                                    17;
                                                                                                vinfos[0].foffset = j0;
                                                                                                vinfos[0].indices[0] =
                                                                                                    _ij0[0];
                                                                                                vinfos[0].indices[1] =
                                                                                                    _ij0[1];
                                                                                                vinfos[0].maxsolutions =
                                                                                                    _nj0;
                                                                                                vinfos[1].jointtype =
                                                                                                    17;
                                                                                                vinfos[1].foffset = j1;
                                                                                                vinfos[1].indices[0] =
                                                                                                    _ij1[0];
                                                                                                vinfos[1].indices[1] =
                                                                                                    _ij1[1];
                                                                                                vinfos[1].maxsolutions =
                                                                                                    _nj1;
                                                                                                vinfos[2].jointtype =
                                                                                                    17;
                                                                                                vinfos[2].foffset = j2;
                                                                                                vinfos[2].indices[0] =
                                                                                                    _ij2[0];
                                                                                                vinfos[2].indices[1] =
                                                                                                    _ij2[1];
                                                                                                vinfos[2].maxsolutions =
                                                                                                    _nj2;
                                                                                                vinfos[3].jointtype =
                                                                                                    17;
                                                                                                vinfos[3].foffset = j3;
                                                                                                vinfos[3].indices[0] =
                                                                                                    _ij3[0];
                                                                                                vinfos[3].indices[1] =
                                                                                                    _ij3[1];
                                                                                                vinfos[3].maxsolutions =
                                                                                                    _nj3;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j4;
                                                                                                vinfos[4].indices[0] =
                                                                                                    _ij4[0];
                                                                                                vinfos[4].indices[1] =
                                                                                                    _ij4[1];
                                                                                                vinfos[4].maxsolutions =
                                                                                                    _nj4;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j5;
                                                                                                vinfos[5].indices[0] =
                                                                                                    _ij5[0];
                                                                                                vinfos[5].indices[1] =
                                                                                                    _ij5[1];
                                                                                                vinfos[5].maxsolutions =
                                                                                                    _nj5;
                                                                                                vinfos[6].jointtype = 1;
                                                                                                vinfos[6].foffset = j6;
                                                                                                vinfos[6].indices[0] =
                                                                                                    _ij6[0];
                                                                                                vinfos[6].indices[1] =
                                                                                                    _ij6[1];
                                                                                                vinfos[6].maxsolutions =
                                                                                                    _nj6;
                                                                                                std::vector<int> vfree(
                                                                                                    0);
                                                                                                solutions.AddSolution(
                                                                                                    vinfos, vfree);
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      {
                                                                                        IkReal j4array[1], cj4array[1],
                                                                                            sj4array[1];
                                                                                        bool j4valid[1] = { false };
                                                                                        _nj4 = 1;
                                                                                        CheckValue<IkReal> x587 =
                                                                                            IKatan2WithCheck(
                                                                                                IkReal(new_r10),
                                                                                                IkReal(
                                                                                                    ((-1.0) * new_r11)),
                                                                                                IKFAST_ATAN2_MAGTHRESH);
                                                                                        if (!x587.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x588 =
                                                                                            IKPowWithIntegerCheck(
                                                                                                IKsign(gconst5), -1);
                                                                                        if (!x588.valid)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        j4array[0] =
                                                                                            ((-1.5707963267949) +
                                                                                             (x587.value) +
                                                                                             (((1.5707963267949) *
                                                                                               (x588.value))));
                                                                                        sj4array[0] = IKsin(j4array[0]);
                                                                                        cj4array[0] = IKcos(j4array[0]);
                                                                                        if (j4array[0] > IKPI)
                                                                                        {
                                                                                          j4array[0] -= IK2PI;
                                                                                        }
                                                                                        else if (j4array[0] < -IKPI)
                                                                                        {
                                                                                          j4array[0] += IK2PI;
                                                                                        }
                                                                                        j4valid[0] = true;
                                                                                        for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                        {
                                                                                          if (!j4valid[ij4])
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          _ij4[0] = ij4;
                                                                                          _ij4[1] = -1;
                                                                                          for (int iij4 = ij4 + 1;
                                                                                               iij4 < 1; ++iij4)
                                                                                          {
                                                                                            if (j4valid[iij4] &&
                                                                                                IKabs(cj4array[ij4] -
                                                                                                      cj4array[iij4]) <
                                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                                IKabs(sj4array[ij4] -
                                                                                                      sj4array[iij4]) <
                                                                                                    IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                              j4valid[iij4] = false;
                                                                                              _ij4[1] = iij4;
                                                                                              break;
                                                                                            }
                                                                                          }
                                                                                          j4 = j4array[ij4];
                                                                                          cj4 = cj4array[ij4];
                                                                                          sj4 = sj4array[ij4];
                                                                                          {
                                                                                            IkReal evalcond[8];
                                                                                            IkReal x589 = IKsin(j4);
                                                                                            IkReal x590 = IKcos(j4);
                                                                                            IkReal x591 =
                                                                                                ((1.0) * gconst5);
                                                                                            IkReal x592 =
                                                                                                (gconst5 * x589);
                                                                                            evalcond[0] =
                                                                                                (new_r11 * x589);
                                                                                            evalcond[1] =
                                                                                                ((-1.0) * x592);
                                                                                            evalcond[2] =
                                                                                                (((gconst5 * x590)) +
                                                                                                 new_r11);
                                                                                            evalcond[3] =
                                                                                                (((new_r11 * x590)) +
                                                                                                 gconst5);
                                                                                            evalcond[4] =
                                                                                                ((((-1.0) * x589 *
                                                                                                   x591)) +
                                                                                                 new_r10);
                                                                                            evalcond[5] =
                                                                                                ((((-1.0) * x590 *
                                                                                                   x591)) +
                                                                                                 new_r00);
                                                                                            evalcond[6] =
                                                                                                (((new_r10 * x590)) +
                                                                                                 (((-1.0) * new_r00 *
                                                                                                   x589)));
                                                                                            evalcond[7] =
                                                                                                (((new_r00 * x590)) +
                                                                                                 (((-1.0) * x591)) +
                                                                                                 ((new_r10 * x589)));
                                                                                            if (IKabs(evalcond[0]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[1]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[2]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[3]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[4]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[5]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[6]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[7]) >
                                                                                                    IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                          }

                                                                                          {
                                                                                            std::vector<
                                                                                                IkSingleDOFSolutionBase<
                                                                                                    IkReal> >
                                                                                                vinfos(7);
                                                                                            vinfos[0].jointtype = 17;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] =
                                                                                                _ij0[0];
                                                                                            vinfos[0].indices[1] =
                                                                                                _ij0[1];
                                                                                            vinfos[0].maxsolutions =
                                                                                                _nj0;
                                                                                            vinfos[1].jointtype = 17;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] =
                                                                                                _ij1[0];
                                                                                            vinfos[1].indices[1] =
                                                                                                _ij1[1];
                                                                                            vinfos[1].maxsolutions =
                                                                                                _nj1;
                                                                                            vinfos[2].jointtype = 17;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] =
                                                                                                _ij2[0];
                                                                                            vinfos[2].indices[1] =
                                                                                                _ij2[1];
                                                                                            vinfos[2].maxsolutions =
                                                                                                _nj2;
                                                                                            vinfos[3].jointtype = 17;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] =
                                                                                                _ij3[0];
                                                                                            vinfos[3].indices[1] =
                                                                                                _ij3[1];
                                                                                            vinfos[3].maxsolutions =
                                                                                                _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] =
                                                                                                _ij4[0];
                                                                                            vinfos[4].indices[1] =
                                                                                                _ij4[1];
                                                                                            vinfos[4].maxsolutions =
                                                                                                _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] =
                                                                                                _ij5[0];
                                                                                            vinfos[5].indices[1] =
                                                                                                _ij5[1];
                                                                                            vinfos[5].maxsolutions =
                                                                                                _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] =
                                                                                                _ij6[0];
                                                                                            vinfos[6].indices[1] =
                                                                                                _ij6[1];
                                                                                            vinfos[6].maxsolutions =
                                                                                                _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(
                                                                                                vinfos, vfree);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                                else
                                                                                {
                                                                                  {
                                                                                    IkReal j4array[1], cj4array[1],
                                                                                        sj4array[1];
                                                                                    bool j4valid[1] = { false };
                                                                                    _nj4 = 1;
                                                                                    CheckValue<IkReal> x593 =
                                                                                        IKatan2WithCheck(
                                                                                            IkReal(new_r10),
                                                                                            IkReal(new_r00),
                                                                                            IKFAST_ATAN2_MAGTHRESH);
                                                                                    if (!x593.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x594 =
                                                                                        IKPowWithIntegerCheck(
                                                                                            IKsign(gconst5), -1);
                                                                                    if (!x594.valid)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                    j4array[0] = ((-1.5707963267949) +
                                                                                                  (x593.value) +
                                                                                                  (((1.5707963267949) *
                                                                                                    (x594.value))));
                                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                                    if (j4array[0] > IKPI)
                                                                                    {
                                                                                      j4array[0] -= IK2PI;
                                                                                    }
                                                                                    else if (j4array[0] < -IKPI)
                                                                                    {
                                                                                      j4array[0] += IK2PI;
                                                                                    }
                                                                                    j4valid[0] = true;
                                                                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                    {
                                                                                      if (!j4valid[ij4])
                                                                                      {
                                                                                        continue;
                                                                                      }
                                                                                      _ij4[0] = ij4;
                                                                                      _ij4[1] = -1;
                                                                                      for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                           ++iij4)
                                                                                      {
                                                                                        if (j4valid[iij4] &&
                                                                                            IKabs(cj4array[ij4] -
                                                                                                  cj4array[iij4]) <
                                                                                                IKFAST_SOLUTION_THRESH &&
                                                                                            IKabs(sj4array[ij4] -
                                                                                                  sj4array[iij4]) <
                                                                                                IKFAST_SOLUTION_THRESH)
                                                                                        {
                                                                                          j4valid[iij4] = false;
                                                                                          _ij4[1] = iij4;
                                                                                          break;
                                                                                        }
                                                                                      }
                                                                                      j4 = j4array[ij4];
                                                                                      cj4 = cj4array[ij4];
                                                                                      sj4 = sj4array[ij4];
                                                                                      {
                                                                                        IkReal evalcond[8];
                                                                                        IkReal x595 = IKsin(j4);
                                                                                        IkReal x596 = IKcos(j4);
                                                                                        IkReal x597 = ((1.0) * gconst5);
                                                                                        IkReal x598 = (gconst5 * x595);
                                                                                        evalcond[0] = (new_r11 * x595);
                                                                                        evalcond[1] = ((-1.0) * x598);
                                                                                        evalcond[2] =
                                                                                            (((gconst5 * x596)) +
                                                                                             new_r11);
                                                                                        evalcond[3] =
                                                                                            (((new_r11 * x596)) +
                                                                                             gconst5);
                                                                                        evalcond[4] =
                                                                                            ((((-1.0) * x595 * x597)) +
                                                                                             new_r10);
                                                                                        evalcond[5] =
                                                                                            ((((-1.0) * x596 * x597)) +
                                                                                             new_r00);
                                                                                        evalcond[6] =
                                                                                            (((new_r10 * x596)) +
                                                                                             (((-1.0) * new_r00 *
                                                                                               x595)));
                                                                                        evalcond[7] =
                                                                                            (((new_r10 * x595)) +
                                                                                             ((new_r00 * x596)) +
                                                                                             (((-1.0) * x597)));
                                                                                        if (IKabs(evalcond[0]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[1]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[2]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[3]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[4]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[5]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[6]) >
                                                                                                IKFAST_EVALCOND_THRESH ||
                                                                                            IKabs(evalcond[7]) >
                                                                                                IKFAST_EVALCOND_THRESH)
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                      }

                                                                                      {
                                                                                        std::vector<
                                                                                            IkSingleDOFSolutionBase<IkReal> >
                                                                                            vinfos(7);
                                                                                        vinfos[0].jointtype = 17;
                                                                                        vinfos[0].foffset = j0;
                                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                                        vinfos[0].maxsolutions = _nj0;
                                                                                        vinfos[1].jointtype = 17;
                                                                                        vinfos[1].foffset = j1;
                                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                                        vinfos[1].maxsolutions = _nj1;
                                                                                        vinfos[2].jointtype = 17;
                                                                                        vinfos[2].foffset = j2;
                                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                                        vinfos[2].maxsolutions = _nj2;
                                                                                        vinfos[3].jointtype = 17;
                                                                                        vinfos[3].foffset = j3;
                                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                                        vinfos[3].maxsolutions = _nj3;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j4;
                                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                                        vinfos[4].maxsolutions = _nj4;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j5;
                                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                                        vinfos[5].maxsolutions = _nj5;
                                                                                        vinfos[6].jointtype = 1;
                                                                                        vinfos[6].foffset = j6;
                                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                                        vinfos[6].maxsolutions = _nj6;
                                                                                        std::vector<int> vfree(0);
                                                                                        solutions.AddSolution(vinfos,
                                                                                                              vfree);
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          } while (0);
                                                                          if (bgotonextstatement)
                                                                          {
                                                                            bool bgotonextstatement = true;
                                                                            do
                                                                            {
                                                                              if (1)
                                                                              {
                                                                                bgotonextstatement = false;
                                                                                continue;  // branch miss [j4]
                                                                              }
                                                                            } while (0);
                                                                            if (bgotonextstatement) {}
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              else
                                                              {
                                                                {
                                                                  IkReal j4array[1], cj4array[1], sj4array[1];
                                                                  bool j4valid[1] = { false };
                                                                  _nj4 = 1;
                                                                  IkReal x599 = ((1.0) * new_r11);
                                                                  CheckValue<IkReal> x600 = IKatan2WithCheck(
                                                                      IkReal(((((-1.0) * new_r01 * x599)) +
                                                                              ((gconst4 * gconst5)))),
                                                                      IkReal(((new_r11 * new_r11) +
                                                                              (((-1.0) * (gconst4 * gconst4))))),
                                                                      IKFAST_ATAN2_MAGTHRESH);
                                                                  if (!x600.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  CheckValue<IkReal> x601 = IKPowWithIntegerCheck(
                                                                      IKsign((((gconst4 * new_r01)) +
                                                                              (((-1.0) * gconst5 * x599)))),
                                                                      -1);
                                                                  if (!x601.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  j4array[0] = ((-1.5707963267949) + (x600.value) +
                                                                                (((1.5707963267949) * (x601.value))));
                                                                  sj4array[0] = IKsin(j4array[0]);
                                                                  cj4array[0] = IKcos(j4array[0]);
                                                                  if (j4array[0] > IKPI)
                                                                  {
                                                                    j4array[0] -= IK2PI;
                                                                  }
                                                                  else if (j4array[0] < -IKPI)
                                                                  {
                                                                    j4array[0] += IK2PI;
                                                                  }
                                                                  j4valid[0] = true;
                                                                  for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                  {
                                                                    if (!j4valid[ij4])
                                                                    {
                                                                      continue;
                                                                    }
                                                                    _ij4[0] = ij4;
                                                                    _ij4[1] = -1;
                                                                    for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                    {
                                                                      if (j4valid[iij4] &&
                                                                          IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                              IKFAST_SOLUTION_THRESH)
                                                                      {
                                                                        j4valid[iij4] = false;
                                                                        _ij4[1] = iij4;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j4 = j4array[ij4];
                                                                    cj4 = cj4array[ij4];
                                                                    sj4 = sj4array[ij4];
                                                                    {
                                                                      IkReal evalcond[8];
                                                                      IkReal x602 = IKsin(j4);
                                                                      IkReal x603 = IKcos(j4);
                                                                      IkReal x604 = ((1.0) * gconst5);
                                                                      IkReal x605 = (gconst4 * x603);
                                                                      IkReal x606 = ((1.0) * x602);
                                                                      IkReal x607 = (x602 * x604);
                                                                      evalcond[0] = (gconst4 + ((new_r11 * x602)) +
                                                                                     ((new_r01 * x603)));
                                                                      evalcond[1] = (((gconst5 * x603)) +
                                                                                     ((gconst4 * x602)) + new_r11);
                                                                      evalcond[2] = (gconst4 + ((new_r10 * x603)) +
                                                                                     (((-1.0) * new_r00 * x606)));
                                                                      evalcond[3] = (gconst5 + ((new_r11 * x603)) +
                                                                                     (((-1.0) * new_r01 * x606)));
                                                                      evalcond[4] =
                                                                          (x605 + (((-1.0) * x607)) + new_r01);
                                                                      evalcond[5] =
                                                                          (x605 + (((-1.0) * x607)) + new_r10);
                                                                      evalcond[6] =
                                                                          (((new_r10 * x602)) + ((new_r00 * x603)) +
                                                                           (((-1.0) * x604)));
                                                                      evalcond[7] =
                                                                          ((((-1.0) * x603 * x604)) + new_r00 +
                                                                           (((-1.0) * gconst4 * x606)));
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                      {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 17;
                                                                      vinfos[0].foffset = j0;
                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                      vinfos[0].maxsolutions = _nj0;
                                                                      vinfos[1].jointtype = 17;
                                                                      vinfos[1].foffset = j1;
                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                      vinfos[1].maxsolutions = _nj1;
                                                                      vinfos[2].jointtype = 17;
                                                                      vinfos[2].foffset = j2;
                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                      vinfos[2].maxsolutions = _nj2;
                                                                      vinfos[3].jointtype = 17;
                                                                      vinfos[3].foffset = j3;
                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                      vinfos[3].maxsolutions = _nj3;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j4;
                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                      vinfos[4].maxsolutions = _nj4;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j5;
                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                      vinfos[5].maxsolutions = _nj5;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j6;
                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                      vinfos[6].maxsolutions = _nj6;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                          else
                                                          {
                                                            {
                                                              IkReal j4array[1], cj4array[1], sj4array[1];
                                                              bool j4valid[1] = { false };
                                                              _nj4 = 1;
                                                              IkReal x608 = ((1.0) * new_r11);
                                                              CheckValue<IkReal> x609 = IKatan2WithCheck(
                                                                  IkReal((((gconst5 * new_r01)) +
                                                                          (((-1.0) * gconst4 * x608)))),
                                                                  IkReal(((((-1.0) * gconst4 * new_r01)) +
                                                                          (((-1.0) * gconst5 * x608)))),
                                                                  IKFAST_ATAN2_MAGTHRESH);
                                                              if (!x609.valid)
                                                              {
                                                                continue;
                                                              }
                                                              CheckValue<IkReal> x610 = IKPowWithIntegerCheck(
                                                                  IKsign(((new_r01 * new_r01) + (new_r11 * new_r11))),
                                                                  -1);
                                                              if (!x610.valid)
                                                              {
                                                                continue;
                                                              }
                                                              j4array[0] = ((-1.5707963267949) + (x609.value) +
                                                                            (((1.5707963267949) * (x610.value))));
                                                              sj4array[0] = IKsin(j4array[0]);
                                                              cj4array[0] = IKcos(j4array[0]);
                                                              if (j4array[0] > IKPI)
                                                              {
                                                                j4array[0] -= IK2PI;
                                                              }
                                                              else if (j4array[0] < -IKPI)
                                                              {
                                                                j4array[0] += IK2PI;
                                                              }
                                                              j4valid[0] = true;
                                                              for (int ij4 = 0; ij4 < 1; ++ij4)
                                                              {
                                                                if (!j4valid[ij4])
                                                                {
                                                                  continue;
                                                                }
                                                                _ij4[0] = ij4;
                                                                _ij4[1] = -1;
                                                                for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                {
                                                                  if (j4valid[iij4] &&
                                                                      IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                          IKFAST_SOLUTION_THRESH &&
                                                                      IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                          IKFAST_SOLUTION_THRESH)
                                                                  {
                                                                    j4valid[iij4] = false;
                                                                    _ij4[1] = iij4;
                                                                    break;
                                                                  }
                                                                }
                                                                j4 = j4array[ij4];
                                                                cj4 = cj4array[ij4];
                                                                sj4 = sj4array[ij4];
                                                                {
                                                                  IkReal evalcond[8];
                                                                  IkReal x611 = IKsin(j4);
                                                                  IkReal x612 = IKcos(j4);
                                                                  IkReal x613 = ((1.0) * gconst5);
                                                                  IkReal x614 = (gconst4 * x612);
                                                                  IkReal x615 = ((1.0) * x611);
                                                                  IkReal x616 = (x611 * x613);
                                                                  evalcond[0] = (gconst4 + ((new_r11 * x611)) +
                                                                                 ((new_r01 * x612)));
                                                                  evalcond[1] = (((gconst4 * x611)) +
                                                                                 ((gconst5 * x612)) + new_r11);
                                                                  evalcond[2] = (gconst4 + ((new_r10 * x612)) +
                                                                                 (((-1.0) * new_r00 * x615)));
                                                                  evalcond[3] = (gconst5 + ((new_r11 * x612)) +
                                                                                 (((-1.0) * new_r01 * x615)));
                                                                  evalcond[4] = ((((-1.0) * x616)) + x614 + new_r01);
                                                                  evalcond[5] = ((((-1.0) * x616)) + x614 + new_r10);
                                                                  evalcond[6] =
                                                                      (((new_r10 * x611)) + (((-1.0) * x613)) +
                                                                       ((new_r00 * x612)));
                                                                  evalcond[7] = ((((-1.0) * x612 * x613)) +
                                                                                 (((-1.0) * gconst4 * x615)) + new_r00);
                                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                  {
                                                                    continue;
                                                                  }
                                                                }

                                                                {
                                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(
                                                                      7);
                                                                  vinfos[0].jointtype = 17;
                                                                  vinfos[0].foffset = j0;
                                                                  vinfos[0].indices[0] = _ij0[0];
                                                                  vinfos[0].indices[1] = _ij0[1];
                                                                  vinfos[0].maxsolutions = _nj0;
                                                                  vinfos[1].jointtype = 17;
                                                                  vinfos[1].foffset = j1;
                                                                  vinfos[1].indices[0] = _ij1[0];
                                                                  vinfos[1].indices[1] = _ij1[1];
                                                                  vinfos[1].maxsolutions = _nj1;
                                                                  vinfos[2].jointtype = 17;
                                                                  vinfos[2].foffset = j2;
                                                                  vinfos[2].indices[0] = _ij2[0];
                                                                  vinfos[2].indices[1] = _ij2[1];
                                                                  vinfos[2].maxsolutions = _nj2;
                                                                  vinfos[3].jointtype = 17;
                                                                  vinfos[3].foffset = j3;
                                                                  vinfos[3].indices[0] = _ij3[0];
                                                                  vinfos[3].indices[1] = _ij3[1];
                                                                  vinfos[3].maxsolutions = _nj3;
                                                                  vinfos[4].jointtype = 1;
                                                                  vinfos[4].foffset = j4;
                                                                  vinfos[4].indices[0] = _ij4[0];
                                                                  vinfos[4].indices[1] = _ij4[1];
                                                                  vinfos[4].maxsolutions = _nj4;
                                                                  vinfos[5].jointtype = 1;
                                                                  vinfos[5].foffset = j5;
                                                                  vinfos[5].indices[0] = _ij5[0];
                                                                  vinfos[5].indices[1] = _ij5[1];
                                                                  vinfos[5].maxsolutions = _nj5;
                                                                  vinfos[6].jointtype = 1;
                                                                  vinfos[6].foffset = j6;
                                                                  vinfos[6].indices[0] = _ij6[0];
                                                                  vinfos[6].indices[1] = _ij6[1];
                                                                  vinfos[6].maxsolutions = _nj6;
                                                                  std::vector<int> vfree(0);
                                                                  solutions.AddSolution(vinfos, vfree);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                      else
                                                      {
                                                        {
                                                          IkReal j4array[1], cj4array[1], sj4array[1];
                                                          bool j4valid[1] = { false };
                                                          _nj4 = 1;
                                                          IkReal x617 = ((1.0) * gconst4);
                                                          CheckValue<IkReal> x618 =
                                                              IKatan2WithCheck(IkReal((((gconst4 * new_r01)) +
                                                                                       (((-1.0) * new_r10 * x617)))),
                                                                               IkReal(((((-1.0) * new_r11 * x617)) +
                                                                                       (((-1.0) * new_r00 * x617)))),
                                                                               IKFAST_ATAN2_MAGTHRESH);
                                                          if (!x618.valid)
                                                          {
                                                            continue;
                                                          }
                                                          CheckValue<IkReal> x619 = IKPowWithIntegerCheck(
                                                              IKsign((((new_r10 * new_r11)) + ((new_r00 * new_r01)))),
                                                              -1);
                                                          if (!x619.valid)
                                                          {
                                                            continue;
                                                          }
                                                          j4array[0] = ((-1.5707963267949) + (x618.value) +
                                                                        (((1.5707963267949) * (x619.value))));
                                                          sj4array[0] = IKsin(j4array[0]);
                                                          cj4array[0] = IKcos(j4array[0]);
                                                          if (j4array[0] > IKPI)
                                                          {
                                                            j4array[0] -= IK2PI;
                                                          }
                                                          else if (j4array[0] < -IKPI)
                                                          {
                                                            j4array[0] += IK2PI;
                                                          }
                                                          j4valid[0] = true;
                                                          for (int ij4 = 0; ij4 < 1; ++ij4)
                                                          {
                                                            if (!j4valid[ij4])
                                                            {
                                                              continue;
                                                            }
                                                            _ij4[0] = ij4;
                                                            _ij4[1] = -1;
                                                            for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                            {
                                                              if (j4valid[iij4] &&
                                                                  IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j4valid[iij4] = false;
                                                                _ij4[1] = iij4;
                                                                break;
                                                              }
                                                            }
                                                            j4 = j4array[ij4];
                                                            cj4 = cj4array[ij4];
                                                            sj4 = sj4array[ij4];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x620 = IKsin(j4);
                                                              IkReal x621 = IKcos(j4);
                                                              IkReal x622 = ((1.0) * gconst5);
                                                              IkReal x623 = (gconst4 * x621);
                                                              IkReal x624 = ((1.0) * x620);
                                                              IkReal x625 = (x620 * x622);
                                                              evalcond[0] =
                                                                  (gconst4 + ((new_r01 * x621)) + ((new_r11 * x620)));
                                                              evalcond[1] =
                                                                  (((gconst5 * x621)) + ((gconst4 * x620)) + new_r11);
                                                              evalcond[2] = ((((-1.0) * new_r00 * x624)) + gconst4 +
                                                                             ((new_r10 * x621)));
                                                              evalcond[3] = ((((-1.0) * new_r01 * x624)) + gconst5 +
                                                                             ((new_r11 * x621)));
                                                              evalcond[4] = ((((-1.0) * x625)) + x623 + new_r01);
                                                              evalcond[5] = ((((-1.0) * x625)) + x623 + new_r10);
                                                              evalcond[6] = ((((-1.0) * x622)) + ((new_r00 * x621)) +
                                                                             ((new_r10 * x620)));
                                                              evalcond[7] = ((((-1.0) * gconst4 * x624)) +
                                                                             (((-1.0) * x621 * x622)) + new_r00);
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 17;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                } while (0);
                                                if (bgotonextstatement)
                                                {
                                                  bool bgotonextstatement = true;
                                                  do
                                                  {
                                                    evalcond[0] = ((new_r01 * new_r01) + (new_r11 * new_r11));
                                                    if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                    {
                                                      bgotonextstatement = false;
                                                      {
                                                        IkReal j4eval[1];
                                                        sj5 = 1.0;
                                                        cj5 = 0;
                                                        j5 = 1.5707963267949;
                                                        new_r01 = 0;
                                                        new_r11 = 0;
                                                        j4eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                        if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                        {
                                                          continue;  // 3 cases reached
                                                        }
                                                        else
                                                        {
                                                          {
                                                            IkReal j4array[2], cj4array[2], sj4array[2];
                                                            bool j4valid[2] = { false };
                                                            _nj4 = 2;
                                                            CheckValue<IkReal> x627 =
                                                                IKatan2WithCheck(IkReal(new_r00), IkReal(new_r10),
                                                                                 IKFAST_ATAN2_MAGTHRESH);
                                                            if (!x627.valid)
                                                            {
                                                              continue;
                                                            }
                                                            IkReal x626 = x627.value;
                                                            j4array[0] = ((-1.0) * x626);
                                                            sj4array[0] = IKsin(j4array[0]);
                                                            cj4array[0] = IKcos(j4array[0]);
                                                            j4array[1] = ((3.14159265358979) + (((-1.0) * x626)));
                                                            sj4array[1] = IKsin(j4array[1]);
                                                            cj4array[1] = IKcos(j4array[1]);
                                                            if (j4array[0] > IKPI)
                                                            {
                                                              j4array[0] -= IK2PI;
                                                            }
                                                            else if (j4array[0] < -IKPI)
                                                            {
                                                              j4array[0] += IK2PI;
                                                            }
                                                            j4valid[0] = true;
                                                            if (j4array[1] > IKPI)
                                                            {
                                                              j4array[1] -= IK2PI;
                                                            }
                                                            else if (j4array[1] < -IKPI)
                                                            {
                                                              j4array[1] += IK2PI;
                                                            }
                                                            j4valid[1] = true;
                                                            for (int ij4 = 0; ij4 < 2; ++ij4)
                                                            {
                                                              if (!j4valid[ij4])
                                                              {
                                                                continue;
                                                              }
                                                              _ij4[0] = ij4;
                                                              _ij4[1] = -1;
                                                              for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                              {
                                                                if (j4valid[iij4] &&
                                                                    IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j4valid[iij4] = false;
                                                                  _ij4[1] = iij4;
                                                                  break;
                                                                }
                                                              }
                                                              j4 = j4array[ij4];
                                                              cj4 = cj4array[ij4];
                                                              sj4 = sj4array[ij4];
                                                              {
                                                                IkReal evalcond[1];
                                                                evalcond[0] = (((new_r10 * (IKcos(j4)))) +
                                                                               (((-1.0) * new_r00 * (IKsin(j4)))));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  } while (0);
                                                  if (bgotonextstatement)
                                                  {
                                                    bool bgotonextstatement = true;
                                                    do
                                                    {
                                                      evalcond[0] = ((-3.14159265358979) +
                                                                     (IKfmod(((3.14159265358979) + (IKabs(j6))),
                                                                             6.28318530717959)));
                                                      if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                      {
                                                        bgotonextstatement = false;
                                                        {
                                                          IkReal j4array[1], cj4array[1], sj4array[1];
                                                          bool j4valid[1] = { false };
                                                          _nj4 = 1;
                                                          if (IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(((-1.0) * new_r11)) < IKFAST_ATAN2_MAGTHRESH &&
                                                              IKabs(IKsqr(new_r01) + IKsqr(((-1.0) * new_r11)) - 1) <=
                                                                  IKFAST_SINCOS_THRESH)
                                                            continue;
                                                          j4array[0] = IKatan2(new_r01, ((-1.0) * new_r11));
                                                          sj4array[0] = IKsin(j4array[0]);
                                                          cj4array[0] = IKcos(j4array[0]);
                                                          if (j4array[0] > IKPI)
                                                          {
                                                            j4array[0] -= IK2PI;
                                                          }
                                                          else if (j4array[0] < -IKPI)
                                                          {
                                                            j4array[0] += IK2PI;
                                                          }
                                                          j4valid[0] = true;
                                                          for (int ij4 = 0; ij4 < 1; ++ij4)
                                                          {
                                                            if (!j4valid[ij4])
                                                            {
                                                              continue;
                                                            }
                                                            _ij4[0] = ij4;
                                                            _ij4[1] = -1;
                                                            for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                            {
                                                              if (j4valid[iij4] &&
                                                                  IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                      IKFAST_SOLUTION_THRESH &&
                                                                  IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                      IKFAST_SOLUTION_THRESH)
                                                              {
                                                                j4valid[iij4] = false;
                                                                _ij4[1] = iij4;
                                                                break;
                                                              }
                                                            }
                                                            j4 = j4array[ij4];
                                                            cj4 = cj4array[ij4];
                                                            sj4 = sj4array[ij4];
                                                            {
                                                              IkReal evalcond[8];
                                                              IkReal x628 = IKcos(j4);
                                                              IkReal x629 = IKsin(j4);
                                                              IkReal x630 = ((1.0) * x629);
                                                              evalcond[0] = (x628 + new_r11);
                                                              evalcond[1] = ((((-1.0) * x630)) + new_r01);
                                                              evalcond[2] = ((((-1.0) * x630)) + new_r10);
                                                              evalcond[3] = ((((-1.0) * x628)) + new_r00);
                                                              evalcond[4] = (((new_r01 * x628)) + ((new_r11 * x629)));
                                                              evalcond[5] =
                                                                  ((-1.0) + ((new_r00 * x628)) + ((new_r10 * x629)));
                                                              evalcond[6] =
                                                                  ((((-1.0) * new_r00 * x630)) + ((new_r10 * x628)));
                                                              evalcond[7] = ((1.0) + (((-1.0) * new_r01 * x630)) +
                                                                             ((new_r11 * x628)));
                                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                              {
                                                                continue;
                                                              }
                                                            }

                                                            {
                                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                              vinfos[0].jointtype = 17;
                                                              vinfos[0].foffset = j0;
                                                              vinfos[0].indices[0] = _ij0[0];
                                                              vinfos[0].indices[1] = _ij0[1];
                                                              vinfos[0].maxsolutions = _nj0;
                                                              vinfos[1].jointtype = 17;
                                                              vinfos[1].foffset = j1;
                                                              vinfos[1].indices[0] = _ij1[0];
                                                              vinfos[1].indices[1] = _ij1[1];
                                                              vinfos[1].maxsolutions = _nj1;
                                                              vinfos[2].jointtype = 17;
                                                              vinfos[2].foffset = j2;
                                                              vinfos[2].indices[0] = _ij2[0];
                                                              vinfos[2].indices[1] = _ij2[1];
                                                              vinfos[2].maxsolutions = _nj2;
                                                              vinfos[3].jointtype = 17;
                                                              vinfos[3].foffset = j3;
                                                              vinfos[3].indices[0] = _ij3[0];
                                                              vinfos[3].indices[1] = _ij3[1];
                                                              vinfos[3].maxsolutions = _nj3;
                                                              vinfos[4].jointtype = 1;
                                                              vinfos[4].foffset = j4;
                                                              vinfos[4].indices[0] = _ij4[0];
                                                              vinfos[4].indices[1] = _ij4[1];
                                                              vinfos[4].maxsolutions = _nj4;
                                                              vinfos[5].jointtype = 1;
                                                              vinfos[5].foffset = j5;
                                                              vinfos[5].indices[0] = _ij5[0];
                                                              vinfos[5].indices[1] = _ij5[1];
                                                              vinfos[5].maxsolutions = _nj5;
                                                              vinfos[6].jointtype = 1;
                                                              vinfos[6].foffset = j6;
                                                              vinfos[6].indices[0] = _ij6[0];
                                                              vinfos[6].indices[1] = _ij6[1];
                                                              vinfos[6].maxsolutions = _nj6;
                                                              std::vector<int> vfree(0);
                                                              solutions.AddSolution(vinfos, vfree);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } while (0);
                                                    if (bgotonextstatement)
                                                    {
                                                      bool bgotonextstatement = true;
                                                      do
                                                      {
                                                        evalcond[0] = ((-3.14159265358979) +
                                                                       (IKfmod(((3.14159265358979) +
                                                                                (IKabs(((-3.14159265358979) + j6)))),
                                                                               6.28318530717959)));
                                                        if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                        {
                                                          bgotonextstatement = false;
                                                          {
                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                            bool j4valid[1] = { false };
                                                            _nj4 = 1;
                                                            if (IKabs(((-1.0) * new_r01)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(((-1.0) * new_r00)) < IKFAST_ATAN2_MAGTHRESH &&
                                                                IKabs(IKsqr(((-1.0) * new_r01)) +
                                                                      IKsqr(((-1.0) * new_r00)) - 1) <=
                                                                    IKFAST_SINCOS_THRESH)
                                                              continue;
                                                            j4array[0] =
                                                                IKatan2(((-1.0) * new_r01), ((-1.0) * new_r00));
                                                            sj4array[0] = IKsin(j4array[0]);
                                                            cj4array[0] = IKcos(j4array[0]);
                                                            if (j4array[0] > IKPI)
                                                            {
                                                              j4array[0] -= IK2PI;
                                                            }
                                                            else if (j4array[0] < -IKPI)
                                                            {
                                                              j4array[0] += IK2PI;
                                                            }
                                                            j4valid[0] = true;
                                                            for (int ij4 = 0; ij4 < 1; ++ij4)
                                                            {
                                                              if (!j4valid[ij4])
                                                              {
                                                                continue;
                                                              }
                                                              _ij4[0] = ij4;
                                                              _ij4[1] = -1;
                                                              for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                              {
                                                                if (j4valid[iij4] &&
                                                                    IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                        IKFAST_SOLUTION_THRESH &&
                                                                    IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                        IKFAST_SOLUTION_THRESH)
                                                                {
                                                                  j4valid[iij4] = false;
                                                                  _ij4[1] = iij4;
                                                                  break;
                                                                }
                                                              }
                                                              j4 = j4array[ij4];
                                                              cj4 = cj4array[ij4];
                                                              sj4 = sj4array[ij4];
                                                              {
                                                                IkReal evalcond[8];
                                                                IkReal x631 = IKsin(j4);
                                                                IkReal x632 = IKcos(j4);
                                                                IkReal x633 = ((1.0) * x631);
                                                                evalcond[0] = (x631 + new_r01);
                                                                evalcond[1] = (x631 + new_r10);
                                                                evalcond[2] = (x632 + new_r00);
                                                                evalcond[3] = ((((-1.0) * x632)) + new_r11);
                                                                evalcond[4] = (((new_r01 * x632)) + ((new_r11 * x631)));
                                                                evalcond[5] =
                                                                    ((1.0) + ((new_r00 * x632)) + ((new_r10 * x631)));
                                                                evalcond[6] =
                                                                    ((((-1.0) * new_r00 * x633)) + ((new_r10 * x632)));
                                                                evalcond[7] = ((-1.0) + (((-1.0) * new_r01 * x633)) +
                                                                               ((new_r11 * x632)));
                                                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                                {
                                                                  continue;
                                                                }
                                                              }

                                                              {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                                vinfos[0].jointtype = 17;
                                                                vinfos[0].foffset = j0;
                                                                vinfos[0].indices[0] = _ij0[0];
                                                                vinfos[0].indices[1] = _ij0[1];
                                                                vinfos[0].maxsolutions = _nj0;
                                                                vinfos[1].jointtype = 17;
                                                                vinfos[1].foffset = j1;
                                                                vinfos[1].indices[0] = _ij1[0];
                                                                vinfos[1].indices[1] = _ij1[1];
                                                                vinfos[1].maxsolutions = _nj1;
                                                                vinfos[2].jointtype = 17;
                                                                vinfos[2].foffset = j2;
                                                                vinfos[2].indices[0] = _ij2[0];
                                                                vinfos[2].indices[1] = _ij2[1];
                                                                vinfos[2].maxsolutions = _nj2;
                                                                vinfos[3].jointtype = 17;
                                                                vinfos[3].foffset = j3;
                                                                vinfos[3].indices[0] = _ij3[0];
                                                                vinfos[3].indices[1] = _ij3[1];
                                                                vinfos[3].maxsolutions = _nj3;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j4;
                                                                vinfos[4].indices[0] = _ij4[0];
                                                                vinfos[4].indices[1] = _ij4[1];
                                                                vinfos[4].maxsolutions = _nj4;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j5;
                                                                vinfos[5].indices[0] = _ij5[0];
                                                                vinfos[5].indices[1] = _ij5[1];
                                                                vinfos[5].maxsolutions = _nj5;
                                                                vinfos[6].jointtype = 1;
                                                                vinfos[6].foffset = j6;
                                                                vinfos[6].indices[0] = _ij6[0];
                                                                vinfos[6].indices[1] = _ij6[1];
                                                                vinfos[6].maxsolutions = _nj6;
                                                                std::vector<int> vfree(0);
                                                                solutions.AddSolution(vinfos, vfree);
                                                              }
                                                            }
                                                          }
                                                        }
                                                      } while (0);
                                                      if (bgotonextstatement)
                                                      {
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                          evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r00)));
                                                          if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                          {
                                                            bgotonextstatement = false;
                                                            {
                                                              IkReal j4eval[3];
                                                              sj5 = 1.0;
                                                              cj5 = 0;
                                                              j5 = 1.5707963267949;
                                                              new_r11 = 0;
                                                              new_r00 = 0;
                                                              j4eval[0] = new_r01;
                                                              j4eval[1] = IKsign(new_r01);
                                                              j4eval[2] = ((IKabs(cj6)) + (IKabs(sj6)));
                                                              if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                  IKabs(j4eval[1]) < 0.0000010000000000 ||
                                                                  IKabs(j4eval[2]) < 0.0000010000000000)
                                                              {
                                                                {
                                                                  IkReal j4eval[2];
                                                                  sj5 = 1.0;
                                                                  cj5 = 0;
                                                                  j5 = 1.5707963267949;
                                                                  new_r11 = 0;
                                                                  new_r00 = 0;
                                                                  j4eval[0] = new_r01;
                                                                  j4eval[1] = new_r10;
                                                                  if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                      IKabs(j4eval[1]) < 0.0000010000000000)
                                                                  {
                                                                    continue;  // no branches [j4]
                                                                  }
                                                                  else
                                                                  {
                                                                    {
                                                                      IkReal j4array[1], cj4array[1], sj4array[1];
                                                                      bool j4valid[1] = { false };
                                                                      _nj4 = 1;
                                                                      CheckValue<IkReal> x634 =
                                                                          IKPowWithIntegerCheck(new_r01, -1);
                                                                      if (!x634.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      CheckValue<IkReal> x635 =
                                                                          IKPowWithIntegerCheck(new_r10, -1);
                                                                      if (!x635.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      if (IKabs((cj6 * (x634.value))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(((-1.0) * sj6 * (x635.value))) <
                                                                              IKFAST_ATAN2_MAGTHRESH &&
                                                                          IKabs(IKsqr((cj6 * (x634.value))) +
                                                                                IKsqr(((-1.0) * sj6 * (x635.value))) -
                                                                                1) <= IKFAST_SINCOS_THRESH)
                                                                        continue;
                                                                      j4array[0] =
                                                                          IKatan2((cj6 * (x634.value)),
                                                                                  ((-1.0) * sj6 * (x635.value)));
                                                                      sj4array[0] = IKsin(j4array[0]);
                                                                      cj4array[0] = IKcos(j4array[0]);
                                                                      if (j4array[0] > IKPI)
                                                                      {
                                                                        j4array[0] -= IK2PI;
                                                                      }
                                                                      else if (j4array[0] < -IKPI)
                                                                      {
                                                                        j4array[0] += IK2PI;
                                                                      }
                                                                      j4valid[0] = true;
                                                                      for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                      {
                                                                        if (!j4valid[ij4])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij4[0] = ij4;
                                                                        _ij4[1] = -1;
                                                                        for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                        {
                                                                          if (j4valid[iij4] &&
                                                                              IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j4valid[iij4] = false;
                                                                            _ij4[1] = iij4;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j4 = j4array[ij4];
                                                                        cj4 = cj4array[ij4];
                                                                        sj4 = sj4array[ij4];
                                                                        {
                                                                          IkReal evalcond[7];
                                                                          IkReal x636 = IKcos(j4);
                                                                          IkReal x637 = IKsin(j4);
                                                                          IkReal x638 = ((1.0) * cj6);
                                                                          IkReal x639 = (sj6 * x636);
                                                                          IkReal x640 = (x637 * x638);
                                                                          evalcond[0] = (sj6 + ((new_r01 * x636)));
                                                                          evalcond[1] = (sj6 + ((new_r10 * x636)));
                                                                          evalcond[2] =
                                                                              ((((-1.0) * new_r01 * x637)) + cj6);
                                                                          evalcond[3] =
                                                                              ((((-1.0) * x638)) + ((new_r10 * x637)));
                                                                          evalcond[4] =
                                                                              (((sj6 * x637)) + ((cj6 * x636)));
                                                                          evalcond[5] =
                                                                              ((((-1.0) * x640)) + x639 + new_r01);
                                                                          evalcond[6] =
                                                                              ((((-1.0) * x640)) + x639 + new_r10);
                                                                          if (IKabs(evalcond[0]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[1]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[2]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[3]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[4]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[5]) >
                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                              IKabs(evalcond[6]) >
                                                                                  IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 17;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              else
                                                              {
                                                                {
                                                                  IkReal j4array[1], cj4array[1], sj4array[1];
                                                                  bool j4valid[1] = { false };
                                                                  _nj4 = 1;
                                                                  CheckValue<IkReal> x641 =
                                                                      IKPowWithIntegerCheck(IKsign(new_r01), -1);
                                                                  if (!x641.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  CheckValue<IkReal> x642 =
                                                                      IKatan2WithCheck(IkReal(cj6),
                                                                                       IkReal(((-1.0) * sj6)),
                                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                                  if (!x642.valid)
                                                                  {
                                                                    continue;
                                                                  }
                                                                  j4array[0] = ((-1.5707963267949) +
                                                                                (((1.5707963267949) * (x641.value))) +
                                                                                (x642.value));
                                                                  sj4array[0] = IKsin(j4array[0]);
                                                                  cj4array[0] = IKcos(j4array[0]);
                                                                  if (j4array[0] > IKPI)
                                                                  {
                                                                    j4array[0] -= IK2PI;
                                                                  }
                                                                  else if (j4array[0] < -IKPI)
                                                                  {
                                                                    j4array[0] += IK2PI;
                                                                  }
                                                                  j4valid[0] = true;
                                                                  for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                  {
                                                                    if (!j4valid[ij4])
                                                                    {
                                                                      continue;
                                                                    }
                                                                    _ij4[0] = ij4;
                                                                    _ij4[1] = -1;
                                                                    for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                    {
                                                                      if (j4valid[iij4] &&
                                                                          IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                              IKFAST_SOLUTION_THRESH &&
                                                                          IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                              IKFAST_SOLUTION_THRESH)
                                                                      {
                                                                        j4valid[iij4] = false;
                                                                        _ij4[1] = iij4;
                                                                        break;
                                                                      }
                                                                    }
                                                                    j4 = j4array[ij4];
                                                                    cj4 = cj4array[ij4];
                                                                    sj4 = sj4array[ij4];
                                                                    {
                                                                      IkReal evalcond[7];
                                                                      IkReal x643 = IKcos(j4);
                                                                      IkReal x644 = IKsin(j4);
                                                                      IkReal x645 = ((1.0) * cj6);
                                                                      IkReal x646 = (sj6 * x643);
                                                                      IkReal x647 = (x644 * x645);
                                                                      evalcond[0] = (sj6 + ((new_r01 * x643)));
                                                                      evalcond[1] = (sj6 + ((new_r10 * x643)));
                                                                      evalcond[2] = (cj6 + (((-1.0) * new_r01 * x644)));
                                                                      evalcond[3] =
                                                                          ((((-1.0) * x645)) + ((new_r10 * x644)));
                                                                      evalcond[4] = (((sj6 * x644)) + ((cj6 * x643)));
                                                                      evalcond[5] =
                                                                          ((((-1.0) * x647)) + x646 + new_r01);
                                                                      evalcond[6] =
                                                                          ((((-1.0) * x647)) + x646 + new_r10);
                                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                                          IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH)
                                                                      {
                                                                        continue;
                                                                      }
                                                                    }

                                                                    {
                                                                      std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                          vinfos(7);
                                                                      vinfos[0].jointtype = 17;
                                                                      vinfos[0].foffset = j0;
                                                                      vinfos[0].indices[0] = _ij0[0];
                                                                      vinfos[0].indices[1] = _ij0[1];
                                                                      vinfos[0].maxsolutions = _nj0;
                                                                      vinfos[1].jointtype = 17;
                                                                      vinfos[1].foffset = j1;
                                                                      vinfos[1].indices[0] = _ij1[0];
                                                                      vinfos[1].indices[1] = _ij1[1];
                                                                      vinfos[1].maxsolutions = _nj1;
                                                                      vinfos[2].jointtype = 17;
                                                                      vinfos[2].foffset = j2;
                                                                      vinfos[2].indices[0] = _ij2[0];
                                                                      vinfos[2].indices[1] = _ij2[1];
                                                                      vinfos[2].maxsolutions = _nj2;
                                                                      vinfos[3].jointtype = 17;
                                                                      vinfos[3].foffset = j3;
                                                                      vinfos[3].indices[0] = _ij3[0];
                                                                      vinfos[3].indices[1] = _ij3[1];
                                                                      vinfos[3].maxsolutions = _nj3;
                                                                      vinfos[4].jointtype = 1;
                                                                      vinfos[4].foffset = j4;
                                                                      vinfos[4].indices[0] = _ij4[0];
                                                                      vinfos[4].indices[1] = _ij4[1];
                                                                      vinfos[4].maxsolutions = _nj4;
                                                                      vinfos[5].jointtype = 1;
                                                                      vinfos[5].foffset = j5;
                                                                      vinfos[5].indices[0] = _ij5[0];
                                                                      vinfos[5].indices[1] = _ij5[1];
                                                                      vinfos[5].maxsolutions = _nj5;
                                                                      vinfos[6].jointtype = 1;
                                                                      vinfos[6].foffset = j6;
                                                                      vinfos[6].indices[0] = _ij6[0];
                                                                      vinfos[6].indices[1] = _ij6[1];
                                                                      vinfos[6].maxsolutions = _nj6;
                                                                      std::vector<int> vfree(0);
                                                                      solutions.AddSolution(vinfos, vfree);
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        } while (0);
                                                        if (bgotonextstatement)
                                                        {
                                                          bool bgotonextstatement = true;
                                                          do
                                                          {
                                                            evalcond[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                                            if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                            {
                                                              bgotonextstatement = false;
                                                              {
                                                                IkReal j4eval[1];
                                                                sj5 = 1.0;
                                                                cj5 = 0;
                                                                j5 = 1.5707963267949;
                                                                new_r11 = 0;
                                                                new_r01 = 0;
                                                                new_r22 = 0;
                                                                new_r20 = 0;
                                                                j4eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                                if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                {
                                                                  continue;  // no branches [j4]
                                                                }
                                                                else
                                                                {
                                                                  {
                                                                    IkReal j4array[2], cj4array[2], sj4array[2];
                                                                    bool j4valid[2] = { false };
                                                                    _nj4 = 2;
                                                                    CheckValue<IkReal> x649 =
                                                                        IKatan2WithCheck(IkReal(new_r00),
                                                                                         IkReal(new_r10),
                                                                                         IKFAST_ATAN2_MAGTHRESH);
                                                                    if (!x649.valid)
                                                                    {
                                                                      continue;
                                                                    }
                                                                    IkReal x648 = x649.value;
                                                                    j4array[0] = ((-1.0) * x648);
                                                                    sj4array[0] = IKsin(j4array[0]);
                                                                    cj4array[0] = IKcos(j4array[0]);
                                                                    j4array[1] =
                                                                        ((3.14159265358979) + (((-1.0) * x648)));
                                                                    sj4array[1] = IKsin(j4array[1]);
                                                                    cj4array[1] = IKcos(j4array[1]);
                                                                    if (j4array[0] > IKPI)
                                                                    {
                                                                      j4array[0] -= IK2PI;
                                                                    }
                                                                    else if (j4array[0] < -IKPI)
                                                                    {
                                                                      j4array[0] += IK2PI;
                                                                    }
                                                                    j4valid[0] = true;
                                                                    if (j4array[1] > IKPI)
                                                                    {
                                                                      j4array[1] -= IK2PI;
                                                                    }
                                                                    else if (j4array[1] < -IKPI)
                                                                    {
                                                                      j4array[1] += IK2PI;
                                                                    }
                                                                    j4valid[1] = true;
                                                                    for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                    {
                                                                      if (!j4valid[ij4])
                                                                      {
                                                                        continue;
                                                                      }
                                                                      _ij4[0] = ij4;
                                                                      _ij4[1] = -1;
                                                                      for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                      {
                                                                        if (j4valid[iij4] &&
                                                                            IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                                IKFAST_SOLUTION_THRESH &&
                                                                            IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                                IKFAST_SOLUTION_THRESH)
                                                                        {
                                                                          j4valid[iij4] = false;
                                                                          _ij4[1] = iij4;
                                                                          break;
                                                                        }
                                                                      }
                                                                      j4 = j4array[ij4];
                                                                      cj4 = cj4array[ij4];
                                                                      sj4 = sj4array[ij4];
                                                                      {
                                                                        IkReal evalcond[1];
                                                                        evalcond[0] =
                                                                            (((new_r10 * (IKcos(j4)))) +
                                                                             (((-1.0) * new_r00 * (IKsin(j4)))));
                                                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH)
                                                                        {
                                                                          continue;
                                                                        }
                                                                      }

                                                                      {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                            vinfos(7);
                                                                        vinfos[0].jointtype = 17;
                                                                        vinfos[0].foffset = j0;
                                                                        vinfos[0].indices[0] = _ij0[0];
                                                                        vinfos[0].indices[1] = _ij0[1];
                                                                        vinfos[0].maxsolutions = _nj0;
                                                                        vinfos[1].jointtype = 17;
                                                                        vinfos[1].foffset = j1;
                                                                        vinfos[1].indices[0] = _ij1[0];
                                                                        vinfos[1].indices[1] = _ij1[1];
                                                                        vinfos[1].maxsolutions = _nj1;
                                                                        vinfos[2].jointtype = 17;
                                                                        vinfos[2].foffset = j2;
                                                                        vinfos[2].indices[0] = _ij2[0];
                                                                        vinfos[2].indices[1] = _ij2[1];
                                                                        vinfos[2].maxsolutions = _nj2;
                                                                        vinfos[3].jointtype = 17;
                                                                        vinfos[3].foffset = j3;
                                                                        vinfos[3].indices[0] = _ij3[0];
                                                                        vinfos[3].indices[1] = _ij3[1];
                                                                        vinfos[3].maxsolutions = _nj3;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j4;
                                                                        vinfos[4].indices[0] = _ij4[0];
                                                                        vinfos[4].indices[1] = _ij4[1];
                                                                        vinfos[4].maxsolutions = _nj4;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j5;
                                                                        vinfos[5].indices[0] = _ij5[0];
                                                                        vinfos[5].indices[1] = _ij5[1];
                                                                        vinfos[5].maxsolutions = _nj5;
                                                                        vinfos[6].jointtype = 1;
                                                                        vinfos[6].foffset = j6;
                                                                        vinfos[6].indices[0] = _ij6[0];
                                                                        vinfos[6].indices[1] = _ij6[1];
                                                                        vinfos[6].maxsolutions = _nj6;
                                                                        std::vector<int> vfree(0);
                                                                        solutions.AddSolution(vinfos, vfree);
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          } while (0);
                                                          if (bgotonextstatement)
                                                          {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                              evalcond[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                                              if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                              {
                                                                bgotonextstatement = false;
                                                                {
                                                                  IkReal j4eval[1];
                                                                  sj5 = 1.0;
                                                                  cj5 = 0;
                                                                  j5 = 1.5707963267949;
                                                                  new_r00 = 0;
                                                                  new_r10 = 0;
                                                                  new_r21 = 0;
                                                                  new_r22 = 0;
                                                                  j4eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                                                  if (IKabs(j4eval[0]) < 0.0000010000000000)
                                                                  {
                                                                    continue;  // no branches [j4]
                                                                  }
                                                                  else
                                                                  {
                                                                    {
                                                                      IkReal j4array[2], cj4array[2], sj4array[2];
                                                                      bool j4valid[2] = { false };
                                                                      _nj4 = 2;
                                                                      CheckValue<IkReal> x651 =
                                                                          IKatan2WithCheck(IkReal(new_r01),
                                                                                           IkReal(new_r11),
                                                                                           IKFAST_ATAN2_MAGTHRESH);
                                                                      if (!x651.valid)
                                                                      {
                                                                        continue;
                                                                      }
                                                                      IkReal x650 = x651.value;
                                                                      j4array[0] = ((-1.0) * x650);
                                                                      sj4array[0] = IKsin(j4array[0]);
                                                                      cj4array[0] = IKcos(j4array[0]);
                                                                      j4array[1] =
                                                                          ((3.14159265358979) + (((-1.0) * x650)));
                                                                      sj4array[1] = IKsin(j4array[1]);
                                                                      cj4array[1] = IKcos(j4array[1]);
                                                                      if (j4array[0] > IKPI)
                                                                      {
                                                                        j4array[0] -= IK2PI;
                                                                      }
                                                                      else if (j4array[0] < -IKPI)
                                                                      {
                                                                        j4array[0] += IK2PI;
                                                                      }
                                                                      j4valid[0] = true;
                                                                      if (j4array[1] > IKPI)
                                                                      {
                                                                        j4array[1] -= IK2PI;
                                                                      }
                                                                      else if (j4array[1] < -IKPI)
                                                                      {
                                                                        j4array[1] += IK2PI;
                                                                      }
                                                                      j4valid[1] = true;
                                                                      for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                      {
                                                                        if (!j4valid[ij4])
                                                                        {
                                                                          continue;
                                                                        }
                                                                        _ij4[0] = ij4;
                                                                        _ij4[1] = -1;
                                                                        for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                                        {
                                                                          if (j4valid[iij4] &&
                                                                              IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                              IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                                  IKFAST_SOLUTION_THRESH)
                                                                          {
                                                                            j4valid[iij4] = false;
                                                                            _ij4[1] = iij4;
                                                                            break;
                                                                          }
                                                                        }
                                                                        j4 = j4array[ij4];
                                                                        cj4 = cj4array[ij4];
                                                                        sj4 = sj4array[ij4];
                                                                        {
                                                                          IkReal evalcond[1];
                                                                          evalcond[0] =
                                                                              (((new_r11 * (IKcos(j4)))) +
                                                                               (((-1.0) * new_r01 * (IKsin(j4)))));
                                                                          if (IKabs(evalcond[0]) >
                                                                              IKFAST_EVALCOND_THRESH)
                                                                          {
                                                                            continue;
                                                                          }
                                                                        }

                                                                        {
                                                                          std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                              vinfos(7);
                                                                          vinfos[0].jointtype = 17;
                                                                          vinfos[0].foffset = j0;
                                                                          vinfos[0].indices[0] = _ij0[0];
                                                                          vinfos[0].indices[1] = _ij0[1];
                                                                          vinfos[0].maxsolutions = _nj0;
                                                                          vinfos[1].jointtype = 17;
                                                                          vinfos[1].foffset = j1;
                                                                          vinfos[1].indices[0] = _ij1[0];
                                                                          vinfos[1].indices[1] = _ij1[1];
                                                                          vinfos[1].maxsolutions = _nj1;
                                                                          vinfos[2].jointtype = 17;
                                                                          vinfos[2].foffset = j2;
                                                                          vinfos[2].indices[0] = _ij2[0];
                                                                          vinfos[2].indices[1] = _ij2[1];
                                                                          vinfos[2].maxsolutions = _nj2;
                                                                          vinfos[3].jointtype = 17;
                                                                          vinfos[3].foffset = j3;
                                                                          vinfos[3].indices[0] = _ij3[0];
                                                                          vinfos[3].indices[1] = _ij3[1];
                                                                          vinfos[3].maxsolutions = _nj3;
                                                                          vinfos[4].jointtype = 1;
                                                                          vinfos[4].foffset = j4;
                                                                          vinfos[4].indices[0] = _ij4[0];
                                                                          vinfos[4].indices[1] = _ij4[1];
                                                                          vinfos[4].maxsolutions = _nj4;
                                                                          vinfos[5].jointtype = 1;
                                                                          vinfos[5].foffset = j5;
                                                                          vinfos[5].indices[0] = _ij5[0];
                                                                          vinfos[5].indices[1] = _ij5[1];
                                                                          vinfos[5].maxsolutions = _nj5;
                                                                          vinfos[6].jointtype = 1;
                                                                          vinfos[6].foffset = j6;
                                                                          vinfos[6].indices[0] = _ij6[0];
                                                                          vinfos[6].indices[1] = _ij6[1];
                                                                          vinfos[6].maxsolutions = _nj6;
                                                                          std::vector<int> vfree(0);
                                                                          solutions.AddSolution(vinfos, vfree);
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            } while (0);
                                                            if (bgotonextstatement)
                                                            {
                                                              bool bgotonextstatement = true;
                                                              do
                                                              {
                                                                evalcond[0] = ((IKabs(new_r10)) + (IKabs(new_r01)));
                                                                if (IKabs(evalcond[0]) < 0.0000050000000000)
                                                                {
                                                                  bgotonextstatement = false;
                                                                  {
                                                                    IkReal j4eval[3];
                                                                    sj5 = 1.0;
                                                                    cj5 = 0;
                                                                    j5 = 1.5707963267949;
                                                                    new_r01 = 0;
                                                                    new_r10 = 0;
                                                                    j4eval[0] = new_r11;
                                                                    j4eval[1] = IKsign(new_r11);
                                                                    j4eval[2] = ((IKabs(cj6)) + (IKabs(sj6)));
                                                                    if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                        IKabs(j4eval[1]) < 0.0000010000000000 ||
                                                                        IKabs(j4eval[2]) < 0.0000010000000000)
                                                                    {
                                                                      {
                                                                        IkReal j4eval[2];
                                                                        sj5 = 1.0;
                                                                        cj5 = 0;
                                                                        j5 = 1.5707963267949;
                                                                        new_r01 = 0;
                                                                        new_r10 = 0;
                                                                        j4eval[0] = new_r00;
                                                                        j4eval[1] = new_r11;
                                                                        if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                            IKabs(j4eval[1]) < 0.0000010000000000)
                                                                        {
                                                                          {
                                                                            IkReal j4eval[2];
                                                                            sj5 = 1.0;
                                                                            cj5 = 0;
                                                                            j5 = 1.5707963267949;
                                                                            new_r01 = 0;
                                                                            new_r10 = 0;
                                                                            j4eval[0] = new_r11;
                                                                            j4eval[1] = cj6;
                                                                            if (IKabs(j4eval[0]) < 0.0000010000000000 ||
                                                                                IKabs(j4eval[1]) < 0.0000010000000000)
                                                                            {
                                                                              {
                                                                                IkReal evalcond[1];
                                                                                bool bgotonextstatement = true;
                                                                                do
                                                                                {
                                                                                  evalcond[0] =
                                                                                      ((-3.14159265358979) +
                                                                                       (IKfmod(
                                                                                           ((3.14159265358979) +
                                                                                            (IKabs(((-1.5707963267949) +
                                                                                                    j6)))),
                                                                                           6.28318530717959)));
                                                                                  if (IKabs(evalcond[0]) <
                                                                                      0.0000050000000000)
                                                                                  {
                                                                                    bgotonextstatement = false;
                                                                                    {
                                                                                      IkReal j4array[2], cj4array[2],
                                                                                          sj4array[2];
                                                                                      bool j4valid[2] = { false };
                                                                                      _nj4 = 2;
                                                                                      sj4array[0] = new_r00;
                                                                                      if (sj4array[0] >=
                                                                                              -1 - IKFAST_SINCOS_THRESH &&
                                                                                          sj4array[0] <=
                                                                                              1 + IKFAST_SINCOS_THRESH)
                                                                                      {
                                                                                        j4valid[0] = j4valid[1] = true;
                                                                                        j4array[0] =
                                                                                            IKasin(sj4array[0]);
                                                                                        cj4array[0] = IKcos(j4array[0]);
                                                                                        sj4array[1] = sj4array[0];
                                                                                        j4array[1] =
                                                                                            j4array[0] > 0 ?
                                                                                                (IKPI - j4array[0]) :
                                                                                                (-IKPI - j4array[0]);
                                                                                        cj4array[1] = -cj4array[0];
                                                                                      }
                                                                                      else if (isnan(sj4array[0]))
                                                                                      {
                                                                                        // probably any value will work
                                                                                        j4valid[0] = true;
                                                                                        cj4array[0] = 1;
                                                                                        sj4array[0] = 0;
                                                                                        j4array[0] = 0;
                                                                                      }
                                                                                      for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                      {
                                                                                        if (!j4valid[ij4])
                                                                                        {
                                                                                          continue;
                                                                                        }
                                                                                        _ij4[0] = ij4;
                                                                                        _ij4[1] = -1;
                                                                                        for (int iij4 = ij4 + 1;
                                                                                             iij4 < 2; ++iij4)
                                                                                        {
                                                                                          if (j4valid[iij4] &&
                                                                                              IKabs(cj4array[ij4] -
                                                                                                    cj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH &&
                                                                                              IKabs(sj4array[ij4] -
                                                                                                    sj4array[iij4]) <
                                                                                                  IKFAST_SOLUTION_THRESH)
                                                                                          {
                                                                                            j4valid[iij4] = false;
                                                                                            _ij4[1] = iij4;
                                                                                            break;
                                                                                          }
                                                                                        }
                                                                                        j4 = j4array[ij4];
                                                                                        cj4 = cj4array[ij4];
                                                                                        sj4 = sj4array[ij4];
                                                                                        {
                                                                                          IkReal evalcond[6];
                                                                                          IkReal x652 = IKcos(j4);
                                                                                          IkReal x653 = IKsin(j4);
                                                                                          evalcond[0] = x652;
                                                                                          evalcond[1] =
                                                                                              (new_r00 * x652);
                                                                                          evalcond[2] =
                                                                                              (x653 + new_r11);
                                                                                          evalcond[3] =
                                                                                              (new_r11 * x652);
                                                                                          evalcond[4] =
                                                                                              ((1.0) +
                                                                                               ((new_r11 * x653)));
                                                                                          evalcond[5] =
                                                                                              ((1.0) +
                                                                                               (((-1.0) * new_r00 *
                                                                                                 x653)));
                                                                                          if (IKabs(evalcond[0]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[1]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[2]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[3]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[4]) >
                                                                                                  IKFAST_EVALCOND_THRESH ||
                                                                                              IKabs(evalcond[5]) >
                                                                                                  IKFAST_EVALCOND_THRESH)
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                        }

                                                                                        {
                                                                                          std::vector<
                                                                                              IkSingleDOFSolutionBase<
                                                                                                  IkReal> >
                                                                                              vinfos(7);
                                                                                          vinfos[0].jointtype = 17;
                                                                                          vinfos[0].foffset = j0;
                                                                                          vinfos[0].indices[0] =
                                                                                              _ij0[0];
                                                                                          vinfos[0].indices[1] =
                                                                                              _ij0[1];
                                                                                          vinfos[0].maxsolutions = _nj0;
                                                                                          vinfos[1].jointtype = 17;
                                                                                          vinfos[1].foffset = j1;
                                                                                          vinfos[1].indices[0] =
                                                                                              _ij1[0];
                                                                                          vinfos[1].indices[1] =
                                                                                              _ij1[1];
                                                                                          vinfos[1].maxsolutions = _nj1;
                                                                                          vinfos[2].jointtype = 17;
                                                                                          vinfos[2].foffset = j2;
                                                                                          vinfos[2].indices[0] =
                                                                                              _ij2[0];
                                                                                          vinfos[2].indices[1] =
                                                                                              _ij2[1];
                                                                                          vinfos[2].maxsolutions = _nj2;
                                                                                          vinfos[3].jointtype = 17;
                                                                                          vinfos[3].foffset = j3;
                                                                                          vinfos[3].indices[0] =
                                                                                              _ij3[0];
                                                                                          vinfos[3].indices[1] =
                                                                                              _ij3[1];
                                                                                          vinfos[3].maxsolutions = _nj3;
                                                                                          vinfos[4].jointtype = 1;
                                                                                          vinfos[4].foffset = j4;
                                                                                          vinfos[4].indices[0] =
                                                                                              _ij4[0];
                                                                                          vinfos[4].indices[1] =
                                                                                              _ij4[1];
                                                                                          vinfos[4].maxsolutions = _nj4;
                                                                                          vinfos[5].jointtype = 1;
                                                                                          vinfos[5].foffset = j5;
                                                                                          vinfos[5].indices[0] =
                                                                                              _ij5[0];
                                                                                          vinfos[5].indices[1] =
                                                                                              _ij5[1];
                                                                                          vinfos[5].maxsolutions = _nj5;
                                                                                          vinfos[6].jointtype = 1;
                                                                                          vinfos[6].foffset = j6;
                                                                                          vinfos[6].indices[0] =
                                                                                              _ij6[0];
                                                                                          vinfos[6].indices[1] =
                                                                                              _ij6[1];
                                                                                          vinfos[6].maxsolutions = _nj6;
                                                                                          std::vector<int> vfree(0);
                                                                                          solutions.AddSolution(vinfos,
                                                                                                                vfree);
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                } while (0);
                                                                                if (bgotonextstatement)
                                                                                {
                                                                                  bool bgotonextstatement = true;
                                                                                  do
                                                                                  {
                                                                                    evalcond[0] =
                                                                                        ((-3.14159265358979) +
                                                                                         (IKfmod(
                                                                                             ((3.14159265358979) +
                                                                                              (IKabs(((1.5707963267949) +
                                                                                                      j6)))),
                                                                                             6.28318530717959)));
                                                                                    if (IKabs(evalcond[0]) <
                                                                                        0.0000050000000000)
                                                                                    {
                                                                                      bgotonextstatement = false;
                                                                                      {
                                                                                        IkReal j4array[2], cj4array[2],
                                                                                            sj4array[2];
                                                                                        bool j4valid[2] = { false };
                                                                                        _nj4 = 2;
                                                                                        sj4array[0] = new_r11;
                                                                                        if (sj4array[0] >=
                                                                                                -1 -
                                                                                                    IKFAST_SINCOS_THRESH &&
                                                                                            sj4array[0] <=
                                                                                                1 + IKFAST_SINCOS_THRESH)
                                                                                        {
                                                                                          j4valid[0] = j4valid[1] =
                                                                                              true;
                                                                                          j4array[0] =
                                                                                              IKasin(sj4array[0]);
                                                                                          cj4array[0] =
                                                                                              IKcos(j4array[0]);
                                                                                          sj4array[1] = sj4array[0];
                                                                                          j4array[1] =
                                                                                              j4array[0] > 0 ?
                                                                                                  (IKPI - j4array[0]) :
                                                                                                  (-IKPI - j4array[0]);
                                                                                          cj4array[1] = -cj4array[0];
                                                                                        }
                                                                                        else if (isnan(sj4array[0]))
                                                                                        {
                                                                                          // probably any value will work
                                                                                          j4valid[0] = true;
                                                                                          cj4array[0] = 1;
                                                                                          sj4array[0] = 0;
                                                                                          j4array[0] = 0;
                                                                                        }
                                                                                        for (int ij4 = 0; ij4 < 2; ++ij4)
                                                                                        {
                                                                                          if (!j4valid[ij4])
                                                                                          {
                                                                                            continue;
                                                                                          }
                                                                                          _ij4[0] = ij4;
                                                                                          _ij4[1] = -1;
                                                                                          for (int iij4 = ij4 + 1;
                                                                                               iij4 < 2; ++iij4)
                                                                                          {
                                                                                            if (j4valid[iij4] &&
                                                                                                IKabs(cj4array[ij4] -
                                                                                                      cj4array[iij4]) <
                                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                                IKabs(sj4array[ij4] -
                                                                                                      sj4array[iij4]) <
                                                                                                    IKFAST_SOLUTION_THRESH)
                                                                                            {
                                                                                              j4valid[iij4] = false;
                                                                                              _ij4[1] = iij4;
                                                                                              break;
                                                                                            }
                                                                                          }
                                                                                          j4 = j4array[ij4];
                                                                                          cj4 = cj4array[ij4];
                                                                                          sj4 = sj4array[ij4];
                                                                                          {
                                                                                            IkReal evalcond[6];
                                                                                            IkReal x654 = IKcos(j4);
                                                                                            IkReal x655 = IKsin(j4);
                                                                                            evalcond[0] =
                                                                                                (new_r00 * x654);
                                                                                            evalcond[1] =
                                                                                                (new_r11 * x654);
                                                                                            evalcond[2] =
                                                                                                ((-1.0) * x654);
                                                                                            evalcond[3] =
                                                                                                (x655 + new_r00);
                                                                                            evalcond[4] =
                                                                                                ((-1.0) +
                                                                                                 ((new_r11 * x655)));
                                                                                            evalcond[5] =
                                                                                                ((-1.0) +
                                                                                                 (((-1.0) * new_r00 *
                                                                                                   x655)));
                                                                                            if (IKabs(evalcond[0]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[1]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[2]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[3]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[4]) >
                                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                                IKabs(evalcond[5]) >
                                                                                                    IKFAST_EVALCOND_THRESH)
                                                                                            {
                                                                                              continue;
                                                                                            }
                                                                                          }

                                                                                          {
                                                                                            std::vector<
                                                                                                IkSingleDOFSolutionBase<
                                                                                                    IkReal> >
                                                                                                vinfos(7);
                                                                                            vinfos[0].jointtype = 17;
                                                                                            vinfos[0].foffset = j0;
                                                                                            vinfos[0].indices[0] =
                                                                                                _ij0[0];
                                                                                            vinfos[0].indices[1] =
                                                                                                _ij0[1];
                                                                                            vinfos[0].maxsolutions =
                                                                                                _nj0;
                                                                                            vinfos[1].jointtype = 17;
                                                                                            vinfos[1].foffset = j1;
                                                                                            vinfos[1].indices[0] =
                                                                                                _ij1[0];
                                                                                            vinfos[1].indices[1] =
                                                                                                _ij1[1];
                                                                                            vinfos[1].maxsolutions =
                                                                                                _nj1;
                                                                                            vinfos[2].jointtype = 17;
                                                                                            vinfos[2].foffset = j2;
                                                                                            vinfos[2].indices[0] =
                                                                                                _ij2[0];
                                                                                            vinfos[2].indices[1] =
                                                                                                _ij2[1];
                                                                                            vinfos[2].maxsolutions =
                                                                                                _nj2;
                                                                                            vinfos[3].jointtype = 17;
                                                                                            vinfos[3].foffset = j3;
                                                                                            vinfos[3].indices[0] =
                                                                                                _ij3[0];
                                                                                            vinfos[3].indices[1] =
                                                                                                _ij3[1];
                                                                                            vinfos[3].maxsolutions =
                                                                                                _nj3;
                                                                                            vinfos[4].jointtype = 1;
                                                                                            vinfos[4].foffset = j4;
                                                                                            vinfos[4].indices[0] =
                                                                                                _ij4[0];
                                                                                            vinfos[4].indices[1] =
                                                                                                _ij4[1];
                                                                                            vinfos[4].maxsolutions =
                                                                                                _nj4;
                                                                                            vinfos[5].jointtype = 1;
                                                                                            vinfos[5].foffset = j5;
                                                                                            vinfos[5].indices[0] =
                                                                                                _ij5[0];
                                                                                            vinfos[5].indices[1] =
                                                                                                _ij5[1];
                                                                                            vinfos[5].maxsolutions =
                                                                                                _nj5;
                                                                                            vinfos[6].jointtype = 1;
                                                                                            vinfos[6].foffset = j6;
                                                                                            vinfos[6].indices[0] =
                                                                                                _ij6[0];
                                                                                            vinfos[6].indices[1] =
                                                                                                _ij6[1];
                                                                                            vinfos[6].maxsolutions =
                                                                                                _nj6;
                                                                                            std::vector<int> vfree(0);
                                                                                            solutions.AddSolution(
                                                                                                vinfos, vfree);
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  } while (0);
                                                                                  if (bgotonextstatement)
                                                                                  {
                                                                                    bool bgotonextstatement = true;
                                                                                    do
                                                                                    {
                                                                                      if (1)
                                                                                      {
                                                                                        bgotonextstatement = false;
                                                                                        continue;  // branch miss [j4]
                                                                                      }
                                                                                    } while (0);
                                                                                    if (bgotonextstatement) {}
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                            else
                                                                            {
                                                                              {
                                                                                IkReal j4array[1], cj4array[1],
                                                                                    sj4array[1];
                                                                                bool j4valid[1] = { false };
                                                                                _nj4 = 1;
                                                                                CheckValue<IkReal> x657 =
                                                                                    IKPowWithIntegerCheck(new_r11, -1);
                                                                                if (!x657.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                IkReal x656 = x657.value;
                                                                                CheckValue<IkReal> x658 =
                                                                                    IKPowWithIntegerCheck(cj6, -1);
                                                                                if (!x658.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                CheckValue<IkReal> x659 =
                                                                                    IKPowWithIntegerCheck(x656, -2);
                                                                                if (!x659.valid)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                                if (IKabs(((-1.0) * sj6 * x656)) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs((
                                                                                        x656 * (x658.value) *
                                                                                        (((1.0) +
                                                                                          (((-1.0) * (cj6 * cj6))) +
                                                                                          (((-1.0) * (x659.value))))))) <
                                                                                        IKFAST_ATAN2_MAGTHRESH &&
                                                                                    IKabs(
                                                                                        IKsqr(((-1.0) * sj6 * x656)) +
                                                                                        IKsqr((
                                                                                            x656 * (x658.value) *
                                                                                            (((1.0) +
                                                                                              (((-1.0) * (cj6 * cj6))) +
                                                                                              (((-1.0) *
                                                                                                (x659.value))))))) -
                                                                                        1) <= IKFAST_SINCOS_THRESH)
                                                                                  continue;
                                                                                j4array[0] = IKatan2(
                                                                                    ((-1.0) * sj6 * x656),
                                                                                    (x656 * (x658.value) *
                                                                                     (((1.0) + (((-1.0) * (cj6 * cj6))) +
                                                                                       (((-1.0) * (x659.value)))))));
                                                                                sj4array[0] = IKsin(j4array[0]);
                                                                                cj4array[0] = IKcos(j4array[0]);
                                                                                if (j4array[0] > IKPI)
                                                                                {
                                                                                  j4array[0] -= IK2PI;
                                                                                }
                                                                                else if (j4array[0] < -IKPI)
                                                                                {
                                                                                  j4array[0] += IK2PI;
                                                                                }
                                                                                j4valid[0] = true;
                                                                                for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                                {
                                                                                  if (!j4valid[ij4])
                                                                                  {
                                                                                    continue;
                                                                                  }
                                                                                  _ij4[0] = ij4;
                                                                                  _ij4[1] = -1;
                                                                                  for (int iij4 = ij4 + 1; iij4 < 1;
                                                                                       ++iij4)
                                                                                  {
                                                                                    if (j4valid[iij4] &&
                                                                                        IKabs(cj4array[ij4] -
                                                                                              cj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH &&
                                                                                        IKabs(sj4array[ij4] -
                                                                                              sj4array[iij4]) <
                                                                                            IKFAST_SOLUTION_THRESH)
                                                                                    {
                                                                                      j4valid[iij4] = false;
                                                                                      _ij4[1] = iij4;
                                                                                      break;
                                                                                    }
                                                                                  }
                                                                                  j4 = j4array[ij4];
                                                                                  cj4 = cj4array[ij4];
                                                                                  sj4 = sj4array[ij4];
                                                                                  {
                                                                                    IkReal evalcond[7];
                                                                                    IkReal x660 = IKsin(j4);
                                                                                    IkReal x661 = IKcos(j4);
                                                                                    IkReal x662 = ((1.0) * cj6);
                                                                                    IkReal x663 = (sj6 * x660);
                                                                                    evalcond[0] =
                                                                                        (sj6 + ((new_r11 * x660)));
                                                                                    evalcond[1] =
                                                                                        (cj6 + ((new_r11 * x661)));
                                                                                    evalcond[2] =
                                                                                        (sj6 +
                                                                                         (((-1.0) * new_r00 * x660)));
                                                                                    evalcond[3] = ((((-1.0) * x662)) +
                                                                                                   ((new_r00 * x661)));
                                                                                    evalcond[4] = (((cj6 * x661)) +
                                                                                                   x663 + new_r11);
                                                                                    evalcond[5] =
                                                                                        ((((-1.0) * x660 * x662)) +
                                                                                         ((sj6 * x661)));
                                                                                    evalcond[6] =
                                                                                        ((((-1.0) * x661 * x662)) +
                                                                                         (((-1.0) * x663)) + new_r00);
                                                                                    if (IKabs(evalcond[0]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[1]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[2]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[3]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[4]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[5]) >
                                                                                            IKFAST_EVALCOND_THRESH ||
                                                                                        IKabs(evalcond[6]) >
                                                                                            IKFAST_EVALCOND_THRESH)
                                                                                    {
                                                                                      continue;
                                                                                    }
                                                                                  }

                                                                                  {
                                                                                    std::vector<
                                                                                        IkSingleDOFSolutionBase<IkReal> >
                                                                                        vinfos(7);
                                                                                    vinfos[0].jointtype = 17;
                                                                                    vinfos[0].foffset = j0;
                                                                                    vinfos[0].indices[0] = _ij0[0];
                                                                                    vinfos[0].indices[1] = _ij0[1];
                                                                                    vinfos[0].maxsolutions = _nj0;
                                                                                    vinfos[1].jointtype = 17;
                                                                                    vinfos[1].foffset = j1;
                                                                                    vinfos[1].indices[0] = _ij1[0];
                                                                                    vinfos[1].indices[1] = _ij1[1];
                                                                                    vinfos[1].maxsolutions = _nj1;
                                                                                    vinfos[2].jointtype = 17;
                                                                                    vinfos[2].foffset = j2;
                                                                                    vinfos[2].indices[0] = _ij2[0];
                                                                                    vinfos[2].indices[1] = _ij2[1];
                                                                                    vinfos[2].maxsolutions = _nj2;
                                                                                    vinfos[3].jointtype = 17;
                                                                                    vinfos[3].foffset = j3;
                                                                                    vinfos[3].indices[0] = _ij3[0];
                                                                                    vinfos[3].indices[1] = _ij3[1];
                                                                                    vinfos[3].maxsolutions = _nj3;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j4;
                                                                                    vinfos[4].indices[0] = _ij4[0];
                                                                                    vinfos[4].indices[1] = _ij4[1];
                                                                                    vinfos[4].maxsolutions = _nj4;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j5;
                                                                                    vinfos[5].indices[0] = _ij5[0];
                                                                                    vinfos[5].indices[1] = _ij5[1];
                                                                                    vinfos[5].maxsolutions = _nj5;
                                                                                    vinfos[6].jointtype = 1;
                                                                                    vinfos[6].foffset = j6;
                                                                                    vinfos[6].indices[0] = _ij6[0];
                                                                                    vinfos[6].indices[1] = _ij6[1];
                                                                                    vinfos[6].maxsolutions = _nj6;
                                                                                    std::vector<int> vfree(0);
                                                                                    solutions.AddSolution(vinfos, vfree);
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        else
                                                                        {
                                                                          {
                                                                            IkReal j4array[1], cj4array[1], sj4array[1];
                                                                            bool j4valid[1] = { false };
                                                                            _nj4 = 1;
                                                                            CheckValue<IkReal> x664 =
                                                                                IKPowWithIntegerCheck(new_r00, -1);
                                                                            if (!x664.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            CheckValue<IkReal> x665 =
                                                                                IKPowWithIntegerCheck(new_r11, -1);
                                                                            if (!x665.valid)
                                                                            {
                                                                              continue;
                                                                            }
                                                                            if (IKabs((sj6 * (x664.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(((-1.0) * cj6 * (x665.value))) <
                                                                                    IKFAST_ATAN2_MAGTHRESH &&
                                                                                IKabs(IKsqr((sj6 * (x664.value))) +
                                                                                      IKsqr(((-1.0) * cj6 *
                                                                                             (x665.value))) -
                                                                                      1) <= IKFAST_SINCOS_THRESH)
                                                                              continue;
                                                                            j4array[0] =
                                                                                IKatan2((sj6 * (x664.value)),
                                                                                        ((-1.0) * cj6 * (x665.value)));
                                                                            sj4array[0] = IKsin(j4array[0]);
                                                                            cj4array[0] = IKcos(j4array[0]);
                                                                            if (j4array[0] > IKPI)
                                                                            {
                                                                              j4array[0] -= IK2PI;
                                                                            }
                                                                            else if (j4array[0] < -IKPI)
                                                                            {
                                                                              j4array[0] += IK2PI;
                                                                            }
                                                                            j4valid[0] = true;
                                                                            for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                            {
                                                                              if (!j4valid[ij4])
                                                                              {
                                                                                continue;
                                                                              }
                                                                              _ij4[0] = ij4;
                                                                              _ij4[1] = -1;
                                                                              for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                              {
                                                                                if (j4valid[iij4] &&
                                                                                    IKabs(cj4array[ij4] -
                                                                                          cj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH &&
                                                                                    IKabs(sj4array[ij4] -
                                                                                          sj4array[iij4]) <
                                                                                        IKFAST_SOLUTION_THRESH)
                                                                                {
                                                                                  j4valid[iij4] = false;
                                                                                  _ij4[1] = iij4;
                                                                                  break;
                                                                                }
                                                                              }
                                                                              j4 = j4array[ij4];
                                                                              cj4 = cj4array[ij4];
                                                                              sj4 = sj4array[ij4];
                                                                              {
                                                                                IkReal evalcond[7];
                                                                                IkReal x666 = IKsin(j4);
                                                                                IkReal x667 = IKcos(j4);
                                                                                IkReal x668 = ((1.0) * cj6);
                                                                                IkReal x669 = (sj6 * x666);
                                                                                evalcond[0] =
                                                                                    (sj6 + ((new_r11 * x666)));
                                                                                evalcond[1] =
                                                                                    (cj6 + ((new_r11 * x667)));
                                                                                evalcond[2] =
                                                                                    (sj6 + (((-1.0) * new_r00 * x666)));
                                                                                evalcond[3] = ((((-1.0) * x668)) +
                                                                                               ((new_r00 * x667)));
                                                                                evalcond[4] =
                                                                                    (((cj6 * x667)) + x669 + new_r11);
                                                                                evalcond[5] =
                                                                                    ((((-1.0) * x666 * x668)) +
                                                                                     ((sj6 * x667)));
                                                                                evalcond[6] =
                                                                                    ((((-1.0) * x669)) +
                                                                                     (((-1.0) * x667 * x668)) + new_r00);
                                                                                if (IKabs(evalcond[0]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[1]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[2]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[3]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[4]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[5]) >
                                                                                        IKFAST_EVALCOND_THRESH ||
                                                                                    IKabs(evalcond[6]) >
                                                                                        IKFAST_EVALCOND_THRESH)
                                                                                {
                                                                                  continue;
                                                                                }
                                                                              }

                                                                              {
                                                                                std::vector<
                                                                                    IkSingleDOFSolutionBase<IkReal> >
                                                                                    vinfos(7);
                                                                                vinfos[0].jointtype = 17;
                                                                                vinfos[0].foffset = j0;
                                                                                vinfos[0].indices[0] = _ij0[0];
                                                                                vinfos[0].indices[1] = _ij0[1];
                                                                                vinfos[0].maxsolutions = _nj0;
                                                                                vinfos[1].jointtype = 17;
                                                                                vinfos[1].foffset = j1;
                                                                                vinfos[1].indices[0] = _ij1[0];
                                                                                vinfos[1].indices[1] = _ij1[1];
                                                                                vinfos[1].maxsolutions = _nj1;
                                                                                vinfos[2].jointtype = 17;
                                                                                vinfos[2].foffset = j2;
                                                                                vinfos[2].indices[0] = _ij2[0];
                                                                                vinfos[2].indices[1] = _ij2[1];
                                                                                vinfos[2].maxsolutions = _nj2;
                                                                                vinfos[3].jointtype = 17;
                                                                                vinfos[3].foffset = j3;
                                                                                vinfos[3].indices[0] = _ij3[0];
                                                                                vinfos[3].indices[1] = _ij3[1];
                                                                                vinfos[3].maxsolutions = _nj3;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j4;
                                                                                vinfos[4].indices[0] = _ij4[0];
                                                                                vinfos[4].indices[1] = _ij4[1];
                                                                                vinfos[4].maxsolutions = _nj4;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j5;
                                                                                vinfos[5].indices[0] = _ij5[0];
                                                                                vinfos[5].indices[1] = _ij5[1];
                                                                                vinfos[5].maxsolutions = _nj5;
                                                                                vinfos[6].jointtype = 1;
                                                                                vinfos[6].foffset = j6;
                                                                                vinfos[6].indices[0] = _ij6[0];
                                                                                vinfos[6].indices[1] = _ij6[1];
                                                                                vinfos[6].maxsolutions = _nj6;
                                                                                std::vector<int> vfree(0);
                                                                                solutions.AddSolution(vinfos, vfree);
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      {
                                                                        IkReal j4array[1], cj4array[1], sj4array[1];
                                                                        bool j4valid[1] = { false };
                                                                        _nj4 = 1;
                                                                        CheckValue<IkReal> x670 =
                                                                            IKPowWithIntegerCheck(IKsign(new_r11), -1);
                                                                        if (!x670.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        CheckValue<IkReal> x671 =
                                                                            IKatan2WithCheck(IkReal(((-1.0) * sj6)),
                                                                                             IkReal(((-1.0) * cj6)),
                                                                                             IKFAST_ATAN2_MAGTHRESH);
                                                                        if (!x671.valid)
                                                                        {
                                                                          continue;
                                                                        }
                                                                        j4array[0] =
                                                                            ((-1.5707963267949) +
                                                                             (((1.5707963267949) * (x670.value))) +
                                                                             (x671.value));
                                                                        sj4array[0] = IKsin(j4array[0]);
                                                                        cj4array[0] = IKcos(j4array[0]);
                                                                        if (j4array[0] > IKPI)
                                                                        {
                                                                          j4array[0] -= IK2PI;
                                                                        }
                                                                        else if (j4array[0] < -IKPI)
                                                                        {
                                                                          j4array[0] += IK2PI;
                                                                        }
                                                                        j4valid[0] = true;
                                                                        for (int ij4 = 0; ij4 < 1; ++ij4)
                                                                        {
                                                                          if (!j4valid[ij4])
                                                                          {
                                                                            continue;
                                                                          }
                                                                          _ij4[0] = ij4;
                                                                          _ij4[1] = -1;
                                                                          for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                                          {
                                                                            if (j4valid[iij4] &&
                                                                                IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                                                    IKFAST_SOLUTION_THRESH &&
                                                                                IKabs(sj4array[ij4] - sj4array[iij4]) <
                                                                                    IKFAST_SOLUTION_THRESH)
                                                                            {
                                                                              j4valid[iij4] = false;
                                                                              _ij4[1] = iij4;
                                                                              break;
                                                                            }
                                                                          }
                                                                          j4 = j4array[ij4];
                                                                          cj4 = cj4array[ij4];
                                                                          sj4 = sj4array[ij4];
                                                                          {
                                                                            IkReal evalcond[7];
                                                                            IkReal x672 = IKsin(j4);
                                                                            IkReal x673 = IKcos(j4);
                                                                            IkReal x674 = ((1.0) * cj6);
                                                                            IkReal x675 = (sj6 * x672);
                                                                            evalcond[0] = (((new_r11 * x672)) + sj6);
                                                                            evalcond[1] = (((new_r11 * x673)) + cj6);
                                                                            evalcond[2] =
                                                                                (sj6 + (((-1.0) * new_r00 * x672)));
                                                                            evalcond[3] = (((new_r00 * x673)) +
                                                                                           (((-1.0) * x674)));
                                                                            evalcond[4] =
                                                                                (x675 + new_r11 + ((cj6 * x673)));
                                                                            evalcond[5] = (((sj6 * x673)) +
                                                                                           (((-1.0) * x672 * x674)));
                                                                            evalcond[6] = ((((-1.0) * x675)) + new_r00 +
                                                                                           (((-1.0) * x673 * x674)));
                                                                            if (IKabs(evalcond[0]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[1]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[2]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[3]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[4]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[5]) >
                                                                                    IKFAST_EVALCOND_THRESH ||
                                                                                IKabs(evalcond[6]) >
                                                                                    IKFAST_EVALCOND_THRESH)
                                                                            {
                                                                              continue;
                                                                            }
                                                                          }

                                                                          {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> >
                                                                                vinfos(7);
                                                                            vinfos[0].jointtype = 17;
                                                                            vinfos[0].foffset = j0;
                                                                            vinfos[0].indices[0] = _ij0[0];
                                                                            vinfos[0].indices[1] = _ij0[1];
                                                                            vinfos[0].maxsolutions = _nj0;
                                                                            vinfos[1].jointtype = 17;
                                                                            vinfos[1].foffset = j1;
                                                                            vinfos[1].indices[0] = _ij1[0];
                                                                            vinfos[1].indices[1] = _ij1[1];
                                                                            vinfos[1].maxsolutions = _nj1;
                                                                            vinfos[2].jointtype = 17;
                                                                            vinfos[2].foffset = j2;
                                                                            vinfos[2].indices[0] = _ij2[0];
                                                                            vinfos[2].indices[1] = _ij2[1];
                                                                            vinfos[2].maxsolutions = _nj2;
                                                                            vinfos[3].jointtype = 17;
                                                                            vinfos[3].foffset = j3;
                                                                            vinfos[3].indices[0] = _ij3[0];
                                                                            vinfos[3].indices[1] = _ij3[1];
                                                                            vinfos[3].maxsolutions = _nj3;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j4;
                                                                            vinfos[4].indices[0] = _ij4[0];
                                                                            vinfos[4].indices[1] = _ij4[1];
                                                                            vinfos[4].maxsolutions = _nj4;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j5;
                                                                            vinfos[5].indices[0] = _ij5[0];
                                                                            vinfos[5].indices[1] = _ij5[1];
                                                                            vinfos[5].maxsolutions = _nj5;
                                                                            vinfos[6].jointtype = 1;
                                                                            vinfos[6].foffset = j6;
                                                                            vinfos[6].indices[0] = _ij6[0];
                                                                            vinfos[6].indices[1] = _ij6[1];
                                                                            vinfos[6].maxsolutions = _nj6;
                                                                            std::vector<int> vfree(0);
                                                                            solutions.AddSolution(vinfos, vfree);
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              } while (0);
                                                              if (bgotonextstatement)
                                                              {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                  if (1)
                                                                  {
                                                                    bgotonextstatement = false;
                                                                    continue;  // branch miss [j4]
                                                                  }
                                                                } while (0);
                                                                if (bgotonextstatement) {}
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            {
                                              IkReal j4array[1], cj4array[1], sj4array[1];
                                              bool j4valid[1] = { false };
                                              _nj4 = 1;
                                              CheckValue<IkReal> x676 = IKatan2WithCheck(
                                                  IkReal(((-1.0) + (new_r01 * new_r01) + (cj6 * cj6))),
                                                  IkReal(((((-1.0) * new_r01 * new_r11)) + (((-1.0) * cj6 * sj6)))),
                                                  IKFAST_ATAN2_MAGTHRESH);
                                              if (!x676.valid)
                                              {
                                                continue;
                                              }
                                              CheckValue<IkReal> x677 = IKPowWithIntegerCheck(
                                                  IKsign((((new_r11 * sj6)) + ((cj6 * new_r01)))), -1);
                                              if (!x677.valid)
                                              {
                                                continue;
                                              }
                                              j4array[0] = ((-1.5707963267949) + (x676.value) +
                                                            (((1.5707963267949) * (x677.value))));
                                              sj4array[0] = IKsin(j4array[0]);
                                              cj4array[0] = IKcos(j4array[0]);
                                              if (j4array[0] > IKPI)
                                              {
                                                j4array[0] -= IK2PI;
                                              }
                                              else if (j4array[0] < -IKPI)
                                              {
                                                j4array[0] += IK2PI;
                                              }
                                              j4valid[0] = true;
                                              for (int ij4 = 0; ij4 < 1; ++ij4)
                                              {
                                                if (!j4valid[ij4])
                                                {
                                                  continue;
                                                }
                                                _ij4[0] = ij4;
                                                _ij4[1] = -1;
                                                for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                                {
                                                  if (j4valid[iij4] &&
                                                      IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j4valid[iij4] = false;
                                                    _ij4[1] = iij4;
                                                    break;
                                                  }
                                                }
                                                j4 = j4array[ij4];
                                                cj4 = cj4array[ij4];
                                                sj4 = sj4array[ij4];
                                                {
                                                  IkReal evalcond[8];
                                                  IkReal x678 = IKsin(j4);
                                                  IkReal x679 = IKcos(j4);
                                                  IkReal x680 = ((1.0) * cj6);
                                                  IkReal x681 = (sj6 * x679);
                                                  IkReal x682 = (sj6 * x678);
                                                  IkReal x683 = ((1.0) * x678);
                                                  IkReal x684 = (x678 * x680);
                                                  evalcond[0] = (((new_r11 * x678)) + ((new_r01 * x679)) + sj6);
                                                  evalcond[1] = (x682 + new_r11 + ((cj6 * x679)));
                                                  evalcond[2] =
                                                      (((new_r10 * x679)) + sj6 + (((-1.0) * new_r00 * x683)));
                                                  evalcond[3] =
                                                      (((new_r11 * x679)) + cj6 + (((-1.0) * new_r01 * x683)));
                                                  evalcond[4] = ((((-1.0) * x684)) + x681 + new_r01);
                                                  evalcond[5] = ((((-1.0) * x684)) + x681 + new_r10);
                                                  evalcond[6] =
                                                      (((new_r00 * x679)) + ((new_r10 * x678)) + (((-1.0) * x680)));
                                                  evalcond[7] =
                                                      ((((-1.0) * x679 * x680)) + new_r00 + (((-1.0) * x682)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        {
                                          IkReal j4array[1], cj4array[1], sj4array[1];
                                          bool j4valid[1] = { false };
                                          _nj4 = 1;
                                          IkReal x685 = ((1.0) * sj6);
                                          CheckValue<IkReal> x686 = IKPowWithIntegerCheck(
                                              IKsign(((new_r01 * new_r01) + (new_r11 * new_r11))), -1);
                                          if (!x686.valid)
                                          {
                                            continue;
                                          }
                                          CheckValue<IkReal> x687 = IKatan2WithCheck(
                                              IkReal((((cj6 * new_r01)) + (((-1.0) * new_r11 * x685)))),
                                              IkReal(((((-1.0) * new_r01 * x685)) + (((-1.0) * cj6 * new_r11)))),
                                              IKFAST_ATAN2_MAGTHRESH);
                                          if (!x687.valid)
                                          {
                                            continue;
                                          }
                                          j4array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x686.value))) +
                                                        (x687.value));
                                          sj4array[0] = IKsin(j4array[0]);
                                          cj4array[0] = IKcos(j4array[0]);
                                          if (j4array[0] > IKPI)
                                          {
                                            j4array[0] -= IK2PI;
                                          }
                                          else if (j4array[0] < -IKPI)
                                          {
                                            j4array[0] += IK2PI;
                                          }
                                          j4valid[0] = true;
                                          for (int ij4 = 0; ij4 < 1; ++ij4)
                                          {
                                            if (!j4valid[ij4])
                                            {
                                              continue;
                                            }
                                            _ij4[0] = ij4;
                                            _ij4[1] = -1;
                                            for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                            {
                                              if (j4valid[iij4] &&
                                                  IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j4valid[iij4] = false;
                                                _ij4[1] = iij4;
                                                break;
                                              }
                                            }
                                            j4 = j4array[ij4];
                                            cj4 = cj4array[ij4];
                                            sj4 = sj4array[ij4];
                                            {
                                              IkReal evalcond[8];
                                              IkReal x688 = IKsin(j4);
                                              IkReal x689 = IKcos(j4);
                                              IkReal x690 = ((1.0) * cj6);
                                              IkReal x691 = (sj6 * x689);
                                              IkReal x692 = (sj6 * x688);
                                              IkReal x693 = ((1.0) * x688);
                                              IkReal x694 = (x688 * x690);
                                              evalcond[0] = (sj6 + ((new_r01 * x689)) + ((new_r11 * x688)));
                                              evalcond[1] = (((cj6 * x689)) + x692 + new_r11);
                                              evalcond[2] = (sj6 + (((-1.0) * new_r00 * x693)) + ((new_r10 * x689)));
                                              evalcond[3] = (cj6 + (((-1.0) * new_r01 * x693)) + ((new_r11 * x689)));
                                              evalcond[4] = (x691 + (((-1.0) * x694)) + new_r01);
                                              evalcond[5] = (x691 + (((-1.0) * x694)) + new_r10);
                                              evalcond[6] =
                                                  (((new_r00 * x689)) + (((-1.0) * x690)) + ((new_r10 * x688)));
                                              evalcond[7] = ((((-1.0) * x689 * x690)) + new_r00 + (((-1.0) * x692)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 17;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  else
                                  {
                                    {
                                      IkReal j4array[1], cj4array[1], sj4array[1];
                                      bool j4valid[1] = { false };
                                      _nj4 = 1;
                                      IkReal x695 = ((1.0) * sj6);
                                      CheckValue<IkReal> x696 = IKPowWithIntegerCheck(
                                          IKsign((((new_r10 * new_r11)) + ((new_r00 * new_r01)))), -1);
                                      if (!x696.valid)
                                      {
                                        continue;
                                      }
                                      CheckValue<IkReal> x697 = IKatan2WithCheck(
                                          IkReal((((new_r01 * sj6)) + (((-1.0) * new_r10 * x695)))),
                                          IkReal(((((-1.0) * new_r00 * x695)) + (((-1.0) * new_r11 * x695)))),
                                          IKFAST_ATAN2_MAGTHRESH);
                                      if (!x697.valid)
                                      {
                                        continue;
                                      }
                                      j4array[0] =
                                          ((-1.5707963267949) + (((1.5707963267949) * (x696.value))) + (x697.value));
                                      sj4array[0] = IKsin(j4array[0]);
                                      cj4array[0] = IKcos(j4array[0]);
                                      if (j4array[0] > IKPI)
                                      {
                                        j4array[0] -= IK2PI;
                                      }
                                      else if (j4array[0] < -IKPI)
                                      {
                                        j4array[0] += IK2PI;
                                      }
                                      j4valid[0] = true;
                                      for (int ij4 = 0; ij4 < 1; ++ij4)
                                      {
                                        if (!j4valid[ij4])
                                        {
                                          continue;
                                        }
                                        _ij4[0] = ij4;
                                        _ij4[1] = -1;
                                        for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                        {
                                          if (j4valid[iij4] &&
                                              IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                              IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                          {
                                            j4valid[iij4] = false;
                                            _ij4[1] = iij4;
                                            break;
                                          }
                                        }
                                        j4 = j4array[ij4];
                                        cj4 = cj4array[ij4];
                                        sj4 = sj4array[ij4];
                                        {
                                          IkReal evalcond[8];
                                          IkReal x698 = IKsin(j4);
                                          IkReal x699 = IKcos(j4);
                                          IkReal x700 = ((1.0) * cj6);
                                          IkReal x701 = (sj6 * x699);
                                          IkReal x702 = (sj6 * x698);
                                          IkReal x703 = ((1.0) * x698);
                                          IkReal x704 = (x698 * x700);
                                          evalcond[0] = (sj6 + ((new_r11 * x698)) + ((new_r01 * x699)));
                                          evalcond[1] = (((cj6 * x699)) + x702 + new_r11);
                                          evalcond[2] = (sj6 + ((new_r10 * x699)) + (((-1.0) * new_r00 * x703)));
                                          evalcond[3] = (cj6 + ((new_r11 * x699)) + (((-1.0) * new_r01 * x703)));
                                          evalcond[4] = ((((-1.0) * x704)) + x701 + new_r01);
                                          evalcond[5] = ((((-1.0) * x704)) + x701 + new_r10);
                                          evalcond[6] = (((new_r10 * x698)) + (((-1.0) * x700)) + ((new_r00 * x699)));
                                          evalcond[7] = ((((-1.0) * x702)) + (((-1.0) * x699 * x700)) + new_r00);
                                          if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                              IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                          {
                                            continue;
                                          }
                                        }

                                        {
                                          std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                          vinfos[0].jointtype = 17;
                                          vinfos[0].foffset = j0;
                                          vinfos[0].indices[0] = _ij0[0];
                                          vinfos[0].indices[1] = _ij0[1];
                                          vinfos[0].maxsolutions = _nj0;
                                          vinfos[1].jointtype = 17;
                                          vinfos[1].foffset = j1;
                                          vinfos[1].indices[0] = _ij1[0];
                                          vinfos[1].indices[1] = _ij1[1];
                                          vinfos[1].maxsolutions = _nj1;
                                          vinfos[2].jointtype = 17;
                                          vinfos[2].foffset = j2;
                                          vinfos[2].indices[0] = _ij2[0];
                                          vinfos[2].indices[1] = _ij2[1];
                                          vinfos[2].maxsolutions = _nj2;
                                          vinfos[3].jointtype = 17;
                                          vinfos[3].foffset = j3;
                                          vinfos[3].indices[0] = _ij3[0];
                                          vinfos[3].indices[1] = _ij3[1];
                                          vinfos[3].maxsolutions = _nj3;
                                          vinfos[4].jointtype = 1;
                                          vinfos[4].foffset = j4;
                                          vinfos[4].indices[0] = _ij4[0];
                                          vinfos[4].indices[1] = _ij4[1];
                                          vinfos[4].maxsolutions = _nj4;
                                          vinfos[5].jointtype = 1;
                                          vinfos[5].foffset = j5;
                                          vinfos[5].indices[0] = _ij5[0];
                                          vinfos[5].indices[1] = _ij5[1];
                                          vinfos[5].maxsolutions = _nj5;
                                          vinfos[6].jointtype = 1;
                                          vinfos[6].foffset = j6;
                                          vinfos[6].indices[0] = _ij6[0];
                                          vinfos[6].indices[1] = _ij6[1];
                                          vinfos[6].maxsolutions = _nj6;
                                          std::vector<int> vfree(0);
                                          solutions.AddSolution(vinfos, vfree);
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            } while (0);
                            if (bgotonextstatement)
                            {
                              bool bgotonextstatement = true;
                              do
                              {
                                evalcond[0] = ((-3.14159265358979) +
                                               (IKfmod(((3.14159265358979) + (IKabs(((1.5707963267949) + j5)))),
                                                       6.28318530717959)));
                                evalcond[1] = new_r12;
                                evalcond[2] = new_r02;
                                evalcond[3] = new_r20;
                                evalcond[4] = new_r21;
                                if (IKabs(evalcond[0]) < 0.0000050000000000 &&
                                    IKabs(evalcond[1]) < 0.0000050000000000 &&
                                    IKabs(evalcond[2]) < 0.0000050000000000 &&
                                    IKabs(evalcond[3]) < 0.0000050000000000 && IKabs(evalcond[4]) < 0.0000050000000000)
                                {
                                  bgotonextstatement = false;
                                  {
                                    IkReal j4array[1], cj4array[1], sj4array[1];
                                    bool j4valid[1] = { false };
                                    _nj4 = 1;
                                    IkReal x705 = ((1.0) * sj6);
                                    if (IKabs(((((-1.0) * cj6 * new_r01)) + (((-1.0) * new_r11 * x705)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs((((cj6 * new_r11)) + (((-1.0) * new_r01 * x705)))) <
                                            IKFAST_ATAN2_MAGTHRESH &&
                                        IKabs(IKsqr(((((-1.0) * cj6 * new_r01)) + (((-1.0) * new_r11 * x705)))) +
                                              IKsqr((((cj6 * new_r11)) + (((-1.0) * new_r01 * x705)))) - 1) <=
                                            IKFAST_SINCOS_THRESH)
                                      continue;
                                    j4array[0] = IKatan2(((((-1.0) * cj6 * new_r01)) + (((-1.0) * new_r11 * x705))),
                                                         (((cj6 * new_r11)) + (((-1.0) * new_r01 * x705))));
                                    sj4array[0] = IKsin(j4array[0]);
                                    cj4array[0] = IKcos(j4array[0]);
                                    if (j4array[0] > IKPI)
                                    {
                                      j4array[0] -= IK2PI;
                                    }
                                    else if (j4array[0] < -IKPI)
                                    {
                                      j4array[0] += IK2PI;
                                    }
                                    j4valid[0] = true;
                                    for (int ij4 = 0; ij4 < 1; ++ij4)
                                    {
                                      if (!j4valid[ij4])
                                      {
                                        continue;
                                      }
                                      _ij4[0] = ij4;
                                      _ij4[1] = -1;
                                      for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                                      {
                                        if (j4valid[iij4] &&
                                            IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                            IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                        {
                                          j4valid[iij4] = false;
                                          _ij4[1] = iij4;
                                          break;
                                        }
                                      }
                                      j4 = j4array[ij4];
                                      cj4 = cj4array[ij4];
                                      sj4 = sj4array[ij4];
                                      {
                                        IkReal evalcond[8];
                                        IkReal x706 = IKcos(j4);
                                        IkReal x707 = IKsin(j4);
                                        IkReal x708 = ((1.0) * cj6);
                                        IkReal x709 = (sj6 * x707);
                                        IkReal x710 = (cj6 * x707);
                                        IkReal x711 = (sj6 * x706);
                                        IkReal x712 = ((1.0) * x707);
                                        IkReal x713 = (x706 * x708);
                                        evalcond[0] = (sj6 + ((new_r01 * x706)) + ((new_r11 * x707)));
                                        evalcond[1] = (x711 + x710 + new_r01);
                                        evalcond[2] = ((((-1.0) * x713)) + x709 + new_r11);
                                        evalcond[3] = ((((-1.0) * x713)) + x709 + new_r00);
                                        evalcond[4] = (((new_r00 * x706)) + (((-1.0) * x708)) + ((new_r10 * x707)));
                                        evalcond[5] = ((((-1.0) * x707 * x708)) + (((-1.0) * x711)) + new_r10);
                                        evalcond[6] =
                                            ((((-1.0) * sj6)) + ((new_r10 * x706)) + (((-1.0) * new_r00 * x712)));
                                        evalcond[7] =
                                            ((((-1.0) * x708)) + ((new_r11 * x706)) + (((-1.0) * new_r01 * x712)));
                                        if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                            IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH)
                                        {
                                          continue;
                                        }
                                      }

                                      {
                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                        vinfos[0].jointtype = 17;
                                        vinfos[0].foffset = j0;
                                        vinfos[0].indices[0] = _ij0[0];
                                        vinfos[0].indices[1] = _ij0[1];
                                        vinfos[0].maxsolutions = _nj0;
                                        vinfos[1].jointtype = 17;
                                        vinfos[1].foffset = j1;
                                        vinfos[1].indices[0] = _ij1[0];
                                        vinfos[1].indices[1] = _ij1[1];
                                        vinfos[1].maxsolutions = _nj1;
                                        vinfos[2].jointtype = 17;
                                        vinfos[2].foffset = j2;
                                        vinfos[2].indices[0] = _ij2[0];
                                        vinfos[2].indices[1] = _ij2[1];
                                        vinfos[2].maxsolutions = _nj2;
                                        vinfos[3].jointtype = 17;
                                        vinfos[3].foffset = j3;
                                        vinfos[3].indices[0] = _ij3[0];
                                        vinfos[3].indices[1] = _ij3[1];
                                        vinfos[3].maxsolutions = _nj3;
                                        vinfos[4].jointtype = 1;
                                        vinfos[4].foffset = j4;
                                        vinfos[4].indices[0] = _ij4[0];
                                        vinfos[4].indices[1] = _ij4[1];
                                        vinfos[4].maxsolutions = _nj4;
                                        vinfos[5].jointtype = 1;
                                        vinfos[5].foffset = j5;
                                        vinfos[5].indices[0] = _ij5[0];
                                        vinfos[5].indices[1] = _ij5[1];
                                        vinfos[5].maxsolutions = _nj5;
                                        vinfos[6].jointtype = 1;
                                        vinfos[6].foffset = j6;
                                        vinfos[6].indices[0] = _ij6[0];
                                        vinfos[6].indices[1] = _ij6[1];
                                        vinfos[6].maxsolutions = _nj6;
                                        std::vector<int> vfree(0);
                                        solutions.AddSolution(vinfos, vfree);
                                      }
                                    }
                                  }
                                }
                              } while (0);
                              if (bgotonextstatement)
                              {
                                bool bgotonextstatement = true;
                                do
                                {
                                  evalcond[0] = ((IKabs(new_r12)) + (IKabs(new_r02)));
                                  if (IKabs(evalcond[0]) < 0.0000050000000000)
                                  {
                                    bgotonextstatement = false;
                                    {
                                      IkReal j4eval[1];
                                      new_r02 = 0;
                                      new_r12 = 0;
                                      new_r20 = 0;
                                      new_r21 = 0;
                                      j4eval[0] = ((IKabs(new_r11)) + (IKabs(new_r01)));
                                      if (IKabs(j4eval[0]) < 0.0000010000000000)
                                      {
                                        {
                                          IkReal j4eval[1];
                                          new_r02 = 0;
                                          new_r12 = 0;
                                          new_r20 = 0;
                                          new_r21 = 0;
                                          j4eval[0] = ((IKabs(new_r10)) + (IKabs(new_r00)));
                                          if (IKabs(j4eval[0]) < 0.0000010000000000)
                                          {
                                            {
                                              IkReal j4eval[1];
                                              new_r02 = 0;
                                              new_r12 = 0;
                                              new_r20 = 0;
                                              new_r21 = 0;
                                              j4eval[0] = ((IKabs((new_r10 * new_r22))) + (IKabs((new_r00 * new_r22))));
                                              if (IKabs(j4eval[0]) < 0.0000010000000000)
                                              {
                                                continue;  // no branches [j4]
                                              }
                                              else
                                              {
                                                {
                                                  IkReal j4array[2], cj4array[2], sj4array[2];
                                                  bool j4valid[2] = { false };
                                                  _nj4 = 2;
                                                  CheckValue<IkReal> x715 =
                                                      IKatan2WithCheck(IkReal((new_r10 * new_r22)),
                                                                       IkReal(((-1.0) * new_r00 * new_r22)),
                                                                       IKFAST_ATAN2_MAGTHRESH);
                                                  if (!x715.valid)
                                                  {
                                                    continue;
                                                  }
                                                  IkReal x714 = x715.value;
                                                  j4array[0] = ((-1.0) * x714);
                                                  sj4array[0] = IKsin(j4array[0]);
                                                  cj4array[0] = IKcos(j4array[0]);
                                                  j4array[1] = ((3.14159265358979) + (((-1.0) * x714)));
                                                  sj4array[1] = IKsin(j4array[1]);
                                                  cj4array[1] = IKcos(j4array[1]);
                                                  if (j4array[0] > IKPI)
                                                  {
                                                    j4array[0] -= IK2PI;
                                                  }
                                                  else if (j4array[0] < -IKPI)
                                                  {
                                                    j4array[0] += IK2PI;
                                                  }
                                                  j4valid[0] = true;
                                                  if (j4array[1] > IKPI)
                                                  {
                                                    j4array[1] -= IK2PI;
                                                  }
                                                  else if (j4array[1] < -IKPI)
                                                  {
                                                    j4array[1] += IK2PI;
                                                  }
                                                  j4valid[1] = true;
                                                  for (int ij4 = 0; ij4 < 2; ++ij4)
                                                  {
                                                    if (!j4valid[ij4])
                                                    {
                                                      continue;
                                                    }
                                                    _ij4[0] = ij4;
                                                    _ij4[1] = -1;
                                                    for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                    {
                                                      if (j4valid[iij4] &&
                                                          IKabs(cj4array[ij4] - cj4array[iij4]) <
                                                              IKFAST_SOLUTION_THRESH &&
                                                          IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                      {
                                                        j4valid[iij4] = false;
                                                        _ij4[1] = iij4;
                                                        break;
                                                      }
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];
                                                    {
                                                      IkReal evalcond[5];
                                                      IkReal x716 = IKcos(j4);
                                                      IkReal x717 = IKsin(j4);
                                                      IkReal x718 = (new_r11 * x716);
                                                      IkReal x719 = ((1.0) * x717);
                                                      evalcond[0] = (((new_r01 * x716)) + ((new_r11 * x717)));
                                                      evalcond[1] = (((new_r00 * x716)) + ((new_r10 * x717)));
                                                      evalcond[2] = (((new_r10 * x716)) + (((-1.0) * new_r00 * x719)));
                                                      evalcond[3] = (x718 + (((-1.0) * new_r01 * x719)));
                                                      evalcond[4] =
                                                          ((((-1.0) * new_r01 * new_r22 * x719)) + ((new_r22 * x718)));
                                                      if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                          IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                      {
                                                        continue;
                                                      }
                                                    }

                                                    {
                                                      std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                      vinfos[0].jointtype = 17;
                                                      vinfos[0].foffset = j0;
                                                      vinfos[0].indices[0] = _ij0[0];
                                                      vinfos[0].indices[1] = _ij0[1];
                                                      vinfos[0].maxsolutions = _nj0;
                                                      vinfos[1].jointtype = 17;
                                                      vinfos[1].foffset = j1;
                                                      vinfos[1].indices[0] = _ij1[0];
                                                      vinfos[1].indices[1] = _ij1[1];
                                                      vinfos[1].maxsolutions = _nj1;
                                                      vinfos[2].jointtype = 17;
                                                      vinfos[2].foffset = j2;
                                                      vinfos[2].indices[0] = _ij2[0];
                                                      vinfos[2].indices[1] = _ij2[1];
                                                      vinfos[2].maxsolutions = _nj2;
                                                      vinfos[3].jointtype = 17;
                                                      vinfos[3].foffset = j3;
                                                      vinfos[3].indices[0] = _ij3[0];
                                                      vinfos[3].indices[1] = _ij3[1];
                                                      vinfos[3].maxsolutions = _nj3;
                                                      vinfos[4].jointtype = 1;
                                                      vinfos[4].foffset = j4;
                                                      vinfos[4].indices[0] = _ij4[0];
                                                      vinfos[4].indices[1] = _ij4[1];
                                                      vinfos[4].maxsolutions = _nj4;
                                                      vinfos[5].jointtype = 1;
                                                      vinfos[5].foffset = j5;
                                                      vinfos[5].indices[0] = _ij5[0];
                                                      vinfos[5].indices[1] = _ij5[1];
                                                      vinfos[5].maxsolutions = _nj5;
                                                      vinfos[6].jointtype = 1;
                                                      vinfos[6].foffset = j6;
                                                      vinfos[6].indices[0] = _ij6[0];
                                                      vinfos[6].indices[1] = _ij6[1];
                                                      vinfos[6].maxsolutions = _nj6;
                                                      std::vector<int> vfree(0);
                                                      solutions.AddSolution(vinfos, vfree);
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                          else
                                          {
                                            {
                                              IkReal j4array[2], cj4array[2], sj4array[2];
                                              bool j4valid[2] = { false };
                                              _nj4 = 2;
                                              CheckValue<IkReal> x721 = IKatan2WithCheck(
                                                  IkReal(new_r00), IkReal(new_r10), IKFAST_ATAN2_MAGTHRESH);
                                              if (!x721.valid)
                                              {
                                                continue;
                                              }
                                              IkReal x720 = x721.value;
                                              j4array[0] = ((-1.0) * x720);
                                              sj4array[0] = IKsin(j4array[0]);
                                              cj4array[0] = IKcos(j4array[0]);
                                              j4array[1] = ((3.14159265358979) + (((-1.0) * x720)));
                                              sj4array[1] = IKsin(j4array[1]);
                                              cj4array[1] = IKcos(j4array[1]);
                                              if (j4array[0] > IKPI)
                                              {
                                                j4array[0] -= IK2PI;
                                              }
                                              else if (j4array[0] < -IKPI)
                                              {
                                                j4array[0] += IK2PI;
                                              }
                                              j4valid[0] = true;
                                              if (j4array[1] > IKPI)
                                              {
                                                j4array[1] -= IK2PI;
                                              }
                                              else if (j4array[1] < -IKPI)
                                              {
                                                j4array[1] += IK2PI;
                                              }
                                              j4valid[1] = true;
                                              for (int ij4 = 0; ij4 < 2; ++ij4)
                                              {
                                                if (!j4valid[ij4])
                                                {
                                                  continue;
                                                }
                                                _ij4[0] = ij4;
                                                _ij4[1] = -1;
                                                for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                                {
                                                  if (j4valid[iij4] &&
                                                      IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                                      IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                                  {
                                                    j4valid[iij4] = false;
                                                    _ij4[1] = iij4;
                                                    break;
                                                  }
                                                }
                                                j4 = j4array[ij4];
                                                cj4 = cj4array[ij4];
                                                sj4 = sj4array[ij4];
                                                {
                                                  IkReal evalcond[5];
                                                  IkReal x722 = IKcos(j4);
                                                  IkReal x723 = IKsin(j4);
                                                  IkReal x724 = (new_r10 * x722);
                                                  IkReal x725 = (new_r11 * x722);
                                                  IkReal x726 = ((1.0) * new_r00 * x723);
                                                  IkReal x727 = ((1.0) * new_r01 * x723);
                                                  evalcond[0] = (((new_r01 * x722)) + ((new_r11 * x723)));
                                                  evalcond[1] = ((((-1.0) * x726)) + x724);
                                                  evalcond[2] = ((((-1.0) * x727)) + x725);
                                                  evalcond[3] = (((new_r22 * x724)) + (((-1.0) * new_r22 * x726)));
                                                  evalcond[4] = (((new_r22 * x725)) + (((-1.0) * new_r22 * x727)));
                                                  if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                      IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                                  {
                                                    continue;
                                                  }
                                                }

                                                {
                                                  std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                                  vinfos[0].jointtype = 17;
                                                  vinfos[0].foffset = j0;
                                                  vinfos[0].indices[0] = _ij0[0];
                                                  vinfos[0].indices[1] = _ij0[1];
                                                  vinfos[0].maxsolutions = _nj0;
                                                  vinfos[1].jointtype = 17;
                                                  vinfos[1].foffset = j1;
                                                  vinfos[1].indices[0] = _ij1[0];
                                                  vinfos[1].indices[1] = _ij1[1];
                                                  vinfos[1].maxsolutions = _nj1;
                                                  vinfos[2].jointtype = 17;
                                                  vinfos[2].foffset = j2;
                                                  vinfos[2].indices[0] = _ij2[0];
                                                  vinfos[2].indices[1] = _ij2[1];
                                                  vinfos[2].maxsolutions = _nj2;
                                                  vinfos[3].jointtype = 17;
                                                  vinfos[3].foffset = j3;
                                                  vinfos[3].indices[0] = _ij3[0];
                                                  vinfos[3].indices[1] = _ij3[1];
                                                  vinfos[3].maxsolutions = _nj3;
                                                  vinfos[4].jointtype = 1;
                                                  vinfos[4].foffset = j4;
                                                  vinfos[4].indices[0] = _ij4[0];
                                                  vinfos[4].indices[1] = _ij4[1];
                                                  vinfos[4].maxsolutions = _nj4;
                                                  vinfos[5].jointtype = 1;
                                                  vinfos[5].foffset = j5;
                                                  vinfos[5].indices[0] = _ij5[0];
                                                  vinfos[5].indices[1] = _ij5[1];
                                                  vinfos[5].maxsolutions = _nj5;
                                                  vinfos[6].jointtype = 1;
                                                  vinfos[6].foffset = j6;
                                                  vinfos[6].indices[0] = _ij6[0];
                                                  vinfos[6].indices[1] = _ij6[1];
                                                  vinfos[6].maxsolutions = _nj6;
                                                  std::vector<int> vfree(0);
                                                  solutions.AddSolution(vinfos, vfree);
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else
                                      {
                                        {
                                          IkReal j4array[2], cj4array[2], sj4array[2];
                                          bool j4valid[2] = { false };
                                          _nj4 = 2;
                                          CheckValue<IkReal> x729 = IKatan2WithCheck(IkReal(new_r01), IkReal(new_r11),
                                                                                     IKFAST_ATAN2_MAGTHRESH);
                                          if (!x729.valid)
                                          {
                                            continue;
                                          }
                                          IkReal x728 = x729.value;
                                          j4array[0] = ((-1.0) * x728);
                                          sj4array[0] = IKsin(j4array[0]);
                                          cj4array[0] = IKcos(j4array[0]);
                                          j4array[1] = ((3.14159265358979) + (((-1.0) * x728)));
                                          sj4array[1] = IKsin(j4array[1]);
                                          cj4array[1] = IKcos(j4array[1]);
                                          if (j4array[0] > IKPI)
                                          {
                                            j4array[0] -= IK2PI;
                                          }
                                          else if (j4array[0] < -IKPI)
                                          {
                                            j4array[0] += IK2PI;
                                          }
                                          j4valid[0] = true;
                                          if (j4array[1] > IKPI)
                                          {
                                            j4array[1] -= IK2PI;
                                          }
                                          else if (j4array[1] < -IKPI)
                                          {
                                            j4array[1] += IK2PI;
                                          }
                                          j4valid[1] = true;
                                          for (int ij4 = 0; ij4 < 2; ++ij4)
                                          {
                                            if (!j4valid[ij4])
                                            {
                                              continue;
                                            }
                                            _ij4[0] = ij4;
                                            _ij4[1] = -1;
                                            for (int iij4 = ij4 + 1; iij4 < 2; ++iij4)
                                            {
                                              if (j4valid[iij4] &&
                                                  IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                                  IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                              {
                                                j4valid[iij4] = false;
                                                _ij4[1] = iij4;
                                                break;
                                              }
                                            }
                                            j4 = j4array[ij4];
                                            cj4 = cj4array[ij4];
                                            sj4 = sj4array[ij4];
                                            {
                                              IkReal evalcond[5];
                                              IkReal x730 = IKcos(j4);
                                              IkReal x731 = IKsin(j4);
                                              IkReal x732 = (new_r10 * x730);
                                              IkReal x733 = (new_r11 * x730);
                                              IkReal x734 = ((1.0) * new_r00 * x731);
                                              IkReal x735 = ((1.0) * new_r01 * x731);
                                              evalcond[0] = (((new_r00 * x730)) + ((new_r10 * x731)));
                                              evalcond[1] = ((((-1.0) * x734)) + x732);
                                              evalcond[2] = ((((-1.0) * x735)) + x733);
                                              evalcond[3] = ((((-1.0) * new_r22 * x734)) + ((new_r22 * x732)));
                                              evalcond[4] = ((((-1.0) * new_r22 * x735)) + ((new_r22 * x733)));
                                              if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                                  IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH)
                                              {
                                                continue;
                                              }
                                            }

                                            {
                                              std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                              vinfos[0].jointtype = 17;
                                              vinfos[0].foffset = j0;
                                              vinfos[0].indices[0] = _ij0[0];
                                              vinfos[0].indices[1] = _ij0[1];
                                              vinfos[0].maxsolutions = _nj0;
                                              vinfos[1].jointtype = 17;
                                              vinfos[1].foffset = j1;
                                              vinfos[1].indices[0] = _ij1[0];
                                              vinfos[1].indices[1] = _ij1[1];
                                              vinfos[1].maxsolutions = _nj1;
                                              vinfos[2].jointtype = 17;
                                              vinfos[2].foffset = j2;
                                              vinfos[2].indices[0] = _ij2[0];
                                              vinfos[2].indices[1] = _ij2[1];
                                              vinfos[2].maxsolutions = _nj2;
                                              vinfos[3].jointtype = 17;
                                              vinfos[3].foffset = j3;
                                              vinfos[3].indices[0] = _ij3[0];
                                              vinfos[3].indices[1] = _ij3[1];
                                              vinfos[3].maxsolutions = _nj3;
                                              vinfos[4].jointtype = 1;
                                              vinfos[4].foffset = j4;
                                              vinfos[4].indices[0] = _ij4[0];
                                              vinfos[4].indices[1] = _ij4[1];
                                              vinfos[4].maxsolutions = _nj4;
                                              vinfos[5].jointtype = 1;
                                              vinfos[5].foffset = j5;
                                              vinfos[5].indices[0] = _ij5[0];
                                              vinfos[5].indices[1] = _ij5[1];
                                              vinfos[5].maxsolutions = _nj5;
                                              vinfos[6].jointtype = 1;
                                              vinfos[6].foffset = j6;
                                              vinfos[6].indices[0] = _ij6[0];
                                              vinfos[6].indices[1] = _ij6[1];
                                              vinfos[6].maxsolutions = _nj6;
                                              std::vector<int> vfree(0);
                                              solutions.AddSolution(vinfos, vfree);
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                } while (0);
                                if (bgotonextstatement)
                                {
                                  bool bgotonextstatement = true;
                                  do
                                  {
                                    if (1)
                                    {
                                      bgotonextstatement = false;
                                      continue;  // branch miss [j4]
                                    }
                                  } while (0);
                                  if (bgotonextstatement) {}
                                }
                              }
                            }
                          }
                        }
                        else
                        {
                          {
                            IkReal j4array[1], cj4array[1], sj4array[1];
                            bool j4valid[1] = { false };
                            _nj4 = 1;
                            CheckValue<IkReal> x737 = IKPowWithIntegerCheck(cj5, -1);
                            if (!x737.valid)
                            {
                              continue;
                            }
                            IkReal x736 = x737.value;
                            CheckValue<IkReal> x738 = IKPowWithIntegerCheck(new_r11, -1);
                            if (!x738.valid)
                            {
                              continue;
                            }
                            if (IKabs((x736 * (x738.value) * (((((-1.0) * cj5 * sj6)) + ((new_r01 * new_r12)))))) <
                                    IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(((-1.0) * new_r12 * x736)) < IKFAST_ATAN2_MAGTHRESH &&
                                IKabs(IKsqr((x736 * (x738.value) * (((((-1.0) * cj5 * sj6)) + ((new_r01 * new_r12)))))) +
                                      IKsqr(((-1.0) * new_r12 * x736)) - 1) <= IKFAST_SINCOS_THRESH)
                              continue;
                            j4array[0] =
                                IKatan2((x736 * (x738.value) * (((((-1.0) * cj5 * sj6)) + ((new_r01 * new_r12))))),
                                        ((-1.0) * new_r12 * x736));
                            sj4array[0] = IKsin(j4array[0]);
                            cj4array[0] = IKcos(j4array[0]);
                            if (j4array[0] > IKPI)
                            {
                              j4array[0] -= IK2PI;
                            }
                            else if (j4array[0] < -IKPI)
                            {
                              j4array[0] += IK2PI;
                            }
                            j4valid[0] = true;
                            for (int ij4 = 0; ij4 < 1; ++ij4)
                            {
                              if (!j4valid[ij4])
                              {
                                continue;
                              }
                              _ij4[0] = ij4;
                              _ij4[1] = -1;
                              for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                              {
                                if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                    IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                                {
                                  j4valid[iij4] = false;
                                  _ij4[1] = iij4;
                                  break;
                                }
                              }
                              j4 = j4array[ij4];
                              cj4 = cj4array[ij4];
                              sj4 = sj4array[ij4];
                              {
                                IkReal evalcond[18];
                                IkReal x739 = IKcos(j4);
                                IkReal x740 = IKsin(j4);
                                IkReal x741 = ((1.0) * cj6);
                                IkReal x742 = ((1.0) * sj6);
                                IkReal x743 = (new_r10 * x739);
                                IkReal x744 = (sj5 * x740);
                                IkReal x745 = (sj5 * x739);
                                IkReal x746 = (new_r12 * x739);
                                IkReal x747 = (cj5 * x739);
                                IkReal x748 = ((1.0) * x740);
                                IkReal x749 = (cj5 * x748);
                                evalcond[0] = (x747 + new_r12);
                                evalcond[1] = (new_r02 + (((-1.0) * x749)));
                                evalcond[2] = (((new_r02 * x739)) + ((new_r12 * x740)));
                                evalcond[3] = (sj6 + ((new_r01 * x739)) + ((new_r11 * x740)));
                                evalcond[4] = (cj5 + (((-1.0) * new_r02 * x748)) + x746);
                                evalcond[5] = (((cj6 * x745)) + ((sj6 * x740)) + new_r11);
                                evalcond[6] = (((new_r00 * x739)) + ((new_r10 * x740)) + (((-1.0) * x741)));
                                evalcond[7] = ((((-1.0) * x741 * x744)) + new_r01 + ((sj6 * x739)));
                                evalcond[8] = (((sj6 * x745)) + (((-1.0) * x740 * x741)) + new_r10);
                                evalcond[9] = ((((-1.0) * new_r00 * x748)) + ((sj5 * sj6)) + x743);
                                evalcond[10] = (((cj6 * sj5)) + (((-1.0) * new_r01 * x748)) + ((new_r11 * x739)));
                                evalcond[11] = ((((-1.0) * x742 * x744)) + (((-1.0) * x739 * x741)) + new_r00);
                                evalcond[12] = ((((-1.0) * new_r00 * x749)) + ((new_r20 * sj5)) + ((cj5 * x743)));
                                evalcond[13] = ((((-1.0) * new_r01 * x749)) + ((new_r11 * x747)) + ((new_r21 * sj5)));
                                evalcond[14] = ((((-1.0) * new_r12 * x745)) + ((cj5 * new_r22)) + ((new_r02 * x744)));
                                evalcond[15] =
                                    ((1.0) + (((-1.0) * new_r02 * x749)) + ((new_r22 * sj5)) + ((cj5 * x746)));
                                evalcond[16] = (((cj5 * new_r20)) + ((new_r00 * x744)) + (((-1.0) * sj5 * x743)) +
                                                (((-1.0) * x742)));
                                evalcond[17] = ((((-1.0) * new_r11 * x745)) + ((cj5 * new_r21)) + ((new_r01 * x744)) +
                                                (((-1.0) * x741)));
                                if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                    IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                                {
                                  continue;
                                }
                              }

                              {
                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                                vinfos[0].jointtype = 17;
                                vinfos[0].foffset = j0;
                                vinfos[0].indices[0] = _ij0[0];
                                vinfos[0].indices[1] = _ij0[1];
                                vinfos[0].maxsolutions = _nj0;
                                vinfos[1].jointtype = 17;
                                vinfos[1].foffset = j1;
                                vinfos[1].indices[0] = _ij1[0];
                                vinfos[1].indices[1] = _ij1[1];
                                vinfos[1].maxsolutions = _nj1;
                                vinfos[2].jointtype = 17;
                                vinfos[2].foffset = j2;
                                vinfos[2].indices[0] = _ij2[0];
                                vinfos[2].indices[1] = _ij2[1];
                                vinfos[2].maxsolutions = _nj2;
                                vinfos[3].jointtype = 17;
                                vinfos[3].foffset = j3;
                                vinfos[3].indices[0] = _ij3[0];
                                vinfos[3].indices[1] = _ij3[1];
                                vinfos[3].maxsolutions = _nj3;
                                vinfos[4].jointtype = 1;
                                vinfos[4].foffset = j4;
                                vinfos[4].indices[0] = _ij4[0];
                                vinfos[4].indices[1] = _ij4[1];
                                vinfos[4].maxsolutions = _nj4;
                                vinfos[5].jointtype = 1;
                                vinfos[5].foffset = j5;
                                vinfos[5].indices[0] = _ij5[0];
                                vinfos[5].indices[1] = _ij5[1];
                                vinfos[5].maxsolutions = _nj5;
                                vinfos[6].jointtype = 1;
                                vinfos[6].foffset = j6;
                                vinfos[6].indices[0] = _ij6[0];
                                vinfos[6].indices[1] = _ij6[1];
                                vinfos[6].maxsolutions = _nj6;
                                std::vector<int> vfree(0);
                                solutions.AddSolution(vinfos, vfree);
                              }
                            }
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        IkReal j4array[1], cj4array[1], sj4array[1];
                        bool j4valid[1] = { false };
                        _nj4 = 1;
                        CheckValue<IkReal> x750 = IKPowWithIntegerCheck(IKsign(cj5), -1);
                        if (!x750.valid)
                        {
                          continue;
                        }
                        CheckValue<IkReal> x751 =
                            IKatan2WithCheck(IkReal(new_r02), IkReal(((-1.0) * new_r12)), IKFAST_ATAN2_MAGTHRESH);
                        if (!x751.valid)
                        {
                          continue;
                        }
                        j4array[0] = ((-1.5707963267949) + (((1.5707963267949) * (x750.value))) + (x751.value));
                        sj4array[0] = IKsin(j4array[0]);
                        cj4array[0] = IKcos(j4array[0]);
                        if (j4array[0] > IKPI)
                        {
                          j4array[0] -= IK2PI;
                        }
                        else if (j4array[0] < -IKPI)
                        {
                          j4array[0] += IK2PI;
                        }
                        j4valid[0] = true;
                        for (int ij4 = 0; ij4 < 1; ++ij4)
                        {
                          if (!j4valid[ij4])
                          {
                            continue;
                          }
                          _ij4[0] = ij4;
                          _ij4[1] = -1;
                          for (int iij4 = ij4 + 1; iij4 < 1; ++iij4)
                          {
                            if (j4valid[iij4] && IKabs(cj4array[ij4] - cj4array[iij4]) < IKFAST_SOLUTION_THRESH &&
                                IKabs(sj4array[ij4] - sj4array[iij4]) < IKFAST_SOLUTION_THRESH)
                            {
                              j4valid[iij4] = false;
                              _ij4[1] = iij4;
                              break;
                            }
                          }
                          j4 = j4array[ij4];
                          cj4 = cj4array[ij4];
                          sj4 = sj4array[ij4];
                          {
                            IkReal evalcond[18];
                            IkReal x752 = IKcos(j4);
                            IkReal x753 = IKsin(j4);
                            IkReal x754 = ((1.0) * cj6);
                            IkReal x755 = ((1.0) * sj6);
                            IkReal x756 = (new_r10 * x752);
                            IkReal x757 = (sj5 * x753);
                            IkReal x758 = (sj5 * x752);
                            IkReal x759 = (new_r12 * x752);
                            IkReal x760 = (cj5 * x752);
                            IkReal x761 = ((1.0) * x753);
                            IkReal x762 = (cj5 * x761);
                            evalcond[0] = (x760 + new_r12);
                            evalcond[1] = ((((-1.0) * x762)) + new_r02);
                            evalcond[2] = (((new_r12 * x753)) + ((new_r02 * x752)));
                            evalcond[3] = (sj6 + ((new_r11 * x753)) + ((new_r01 * x752)));
                            evalcond[4] = (cj5 + x759 + (((-1.0) * new_r02 * x761)));
                            evalcond[5] = (((cj6 * x758)) + ((sj6 * x753)) + new_r11);
                            evalcond[6] = (((new_r00 * x752)) + ((new_r10 * x753)) + (((-1.0) * x754)));
                            evalcond[7] = ((((-1.0) * x754 * x757)) + ((sj6 * x752)) + new_r01);
                            evalcond[8] = ((((-1.0) * x753 * x754)) + ((sj6 * x758)) + new_r10);
                            evalcond[9] = ((((-1.0) * new_r00 * x761)) + ((sj5 * sj6)) + x756);
                            evalcond[10] = (((cj6 * sj5)) + ((new_r11 * x752)) + (((-1.0) * new_r01 * x761)));
                            evalcond[11] = ((((-1.0) * x755 * x757)) + (((-1.0) * x752 * x754)) + new_r00);
                            evalcond[12] = (((cj5 * x756)) + (((-1.0) * new_r00 * x762)) + ((new_r20 * sj5)));
                            evalcond[13] = (((new_r11 * x760)) + ((new_r21 * sj5)) + (((-1.0) * new_r01 * x762)));
                            evalcond[14] = (((cj5 * new_r22)) + (((-1.0) * new_r12 * x758)) + ((new_r02 * x757)));
                            evalcond[15] = ((1.0) + ((cj5 * x759)) + ((new_r22 * sj5)) + (((-1.0) * new_r02 * x762)));
                            evalcond[16] =
                                (((cj5 * new_r20)) + ((new_r00 * x757)) + (((-1.0) * sj5 * x756)) + (((-1.0) * x755)));
                            evalcond[17] = ((((-1.0) * new_r11 * x758)) + ((cj5 * new_r21)) + ((new_r01 * x757)) +
                                            (((-1.0) * x754)));
                            if (IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH ||
                                IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH)
                            {
                              continue;
                            }
                          }

                          {
                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
                            vinfos[0].jointtype = 17;
                            vinfos[0].foffset = j0;
                            vinfos[0].indices[0] = _ij0[0];
                            vinfos[0].indices[1] = _ij0[1];
                            vinfos[0].maxsolutions = _nj0;
                            vinfos[1].jointtype = 17;
                            vinfos[1].foffset = j1;
                            vinfos[1].indices[0] = _ij1[0];
                            vinfos[1].indices[1] = _ij1[1];
                            vinfos[1].maxsolutions = _nj1;
                            vinfos[2].jointtype = 17;
                            vinfos[2].foffset = j2;
                            vinfos[2].indices[0] = _ij2[0];
                            vinfos[2].indices[1] = _ij2[1];
                            vinfos[2].maxsolutions = _nj2;
                            vinfos[3].jointtype = 17;
                            vinfos[3].foffset = j3;
                            vinfos[3].indices[0] = _ij3[0];
                            vinfos[3].indices[1] = _ij3[1];
                            vinfos[3].maxsolutions = _nj3;
                            vinfos[4].jointtype = 1;
                            vinfos[4].foffset = j4;
                            vinfos[4].indices[0] = _ij4[0];
                            vinfos[4].indices[1] = _ij4[1];
                            vinfos[4].maxsolutions = _nj4;
                            vinfos[5].jointtype = 1;
                            vinfos[5].foffset = j5;
                            vinfos[5].indices[0] = _ij5[0];
                            vinfos[5].indices[1] = _ij5[1];
                            vinfos[5].maxsolutions = _nj5;
                            vinfos[6].jointtype = 1;
                            vinfos[6].foffset = j6;
                            vinfos[6].indices[0] = _ij6[0];
                            vinfos[6].indices[1] = _ij6[1];
                            vinfos[6].maxsolutions = _nj6;
                            std::vector<int> vfree(0);
                            solutions.AddSolution(vinfos, vfree);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  static inline void polyroots3(IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for (int i = 0; i < 3; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 3; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 3; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 3; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 3; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[3] = { false };
    for (int i = 0; i < 3; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 3; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
  static inline void polyroots2(IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int& numroots)
  {
    IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
    if (det < 0)
    {
      numroots = 0;
    }
    else if (det == 0)
    {
      rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
      numroots = 1;
    }
    else
    {
      det = IKsqrt(det);
      rawroots[0] = (-rawcoeffs[1] + det) / (2 * rawcoeffs[0]);
      rawroots[1] = (-rawcoeffs[1] - det) / (2 * rawcoeffs[0]);  // rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
      numroots = 2;
    }
  }
  static inline void polyroots4(IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int& numroots)
  {
    using std::complex;
    if (rawcoeffs[0] == 0)
    {
      // solve with one reduced degree
      polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
      return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for (int i = 0; i < 4; ++i)
    {
      coeffs[i] = complex<IkReal>(rawcoeffs[i + 1] / rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1, 0);
    roots[1] = complex<IkReal>(0.4, 0.9);  // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for (int i = 2; i < 4; ++i)
    {
      roots[i] = roots[i - 1] * roots[1];
      err[i] = 1.0;
    }
    for (int step = 0; step < maxsteps; ++step)
    {
      bool changed = false;
      for (int i = 0; i < 4; ++i)
      {
        if (err[i] >= tol)
        {
          changed = true;
          // evaluate
          complex<IkReal> x = roots[i] + coeffs[0];
          for (int j = 1; j < 4; ++j)
          {
            x = roots[i] * x + coeffs[j];
          }
          for (int j = 0; j < 4; ++j)
          {
            if (i != j)
            {
              if (roots[i] != roots[j])
              {
                x /= (roots[i] - roots[j]);
              }
            }
          }
          roots[i] -= x;
          err[i] = abs(x);
        }
      }
      if (!changed)
      {
        break;
      }
    }

    numroots = 0;
    bool visited[4] = { false };
    for (int i = 0; i < 4; ++i)
    {
      if (!visited[i])
      {
        // might be a multiple root, in which case it will have more error than the other roots
        // find any neighboring roots, and take the average
        complex<IkReal> newroot = roots[i];
        int n = 1;
        for (int j = i + 1; j < 4; ++j)
        {
          // care about error in real much more than imaginary
          if (abs(real(roots[i]) - real(roots[j])) < tolsqrt && abs(imag(roots[i]) - imag(roots[j])) < 0.002)
          {
            newroot += roots[j];
            n += 1;
            visited[j] = true;
          }
        }
        if (n > 1)
        {
          newroot /= n;
        }
        // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is
        // used, need to use the sqrt
        if (IKabs(imag(newroot)) < tolsqrt)
        {
          rawroots[numroots++] = real(newroot);
        }
      }
    }
  }
};

/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                          IkSolutionListBase<IkReal>& solutions)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree,
                           IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip)
{
  IKSolver solver;
  return solver.ComputeIk(eetrans, eerot, pfree, solutions);
}

IKFAST_API const char* GetKinematicsHash()
{
  return "be689e9eae455fd093b5f0bd94087b9e";
}

IKFAST_API const char* GetIkFastVersion()
{
  return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
}  // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
  if (argc != 12 + GetNumFreeParameters() + 1)
  {
    printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
           "Returns the ik solutions given the transformation of the end effector specified by\n"
           "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
           "There are %d free parameters that have to be specified.\n\n",
           GetNumFreeParameters());
    return 1;
  }

  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  IkReal eerot[9], eetrans[3];
  eerot[0] = atof(argv[1]);
  eerot[1] = atof(argv[2]);
  eerot[2] = atof(argv[3]);
  eetrans[0] = atof(argv[4]);
  eerot[3] = atof(argv[5]);
  eerot[4] = atof(argv[6]);
  eerot[5] = atof(argv[7]);
  eetrans[1] = atof(argv[8]);
  eerot[6] = atof(argv[9]);
  eerot[7] = atof(argv[10]);
  eerot[8] = atof(argv[11]);
  eetrans[2] = atof(argv[12]);
  for (std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = atof(argv[13 + i]);
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

  if (!bSuccess)
  {
    fprintf(stderr, "Failed to get ik solution\n");
    return -1;
  }

  printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i)
  {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
    for (std::size_t j = 0; j < solvalues.size(); ++j)
      printf("%.15f, ", solvalues[j]);
    printf("\n");
  }
  return 0;
}

#endif
